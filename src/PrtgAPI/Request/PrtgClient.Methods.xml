<Document>
    <Resources>
        <StreamSummary>
            &lt;para/&gt;
            When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        </StreamSummary>
        <SerialSummary>
            &lt;para/&gt;
            If &lt;paramref name="serial"/&gt; is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
            and yielded in the order they return.&lt;para/&gt;
            Otherwise, requests will be serially executed as the response is enumerated.
        </SerialSummary>
        <StreamLogsDateTimeSummary>Streams logs between two time periods from a PRTG Server. If &lt;paramref name="serial"/&gt; is true, logs are guaranteed to be ordered from newest to oldest.</StreamLogsDateTimeSummary>
        <StreamLogsDateTimeObjectSummary>Streams logs between two time periods from a PRTG Server for a specified object. If &lt;paramref name="serial"/&gt; is true, logs are guaranteed to be ordered from newest to oldest.</StreamLogsDateTimeObjectSummary>
        <StreamLogsRecordAgeSummary>Streams logs for a standard time period from a PRTG Server. If &lt;paramref name="serial"/&gt; is true, logs are guaranteed to be ordered from newest to oldest.</StreamLogsRecordAgeSummary>
        <StreamLogsRecordAgeObjectSummary>Streams logs from a standard time period from a PRTG Server for a specified object. If &lt;paramref name="serial"/&gt; is true, logs are guaranteed to be ordered from newest to oldest.</StreamLogsRecordAgeObjectSummary>
        <SerialOnlySummary>
            When this method's response is enumerated,
            requests will be sent to PRTG as required in order to retrieve additional items.
        </SerialOnlySummary>
        
        <StreamReturnDescription>A generator encapsulating a series of &lt;see cref="Task"/&gt; objects capable of streaming a response from a PRTG Server.</StreamReturnDescription>
        <SerialReturnDescription>If &lt;paramref name="serial"/&gt; is false, a generator encapsulating a series of &lt;see cref="Task"/&gt; objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</SerialReturnDescription>
        <SerialOnlyReturnDescription>A generator encapsulating a series of requests capable of streaming a response from a PRTG Server.</SerialOnlyReturnDescription>

        <SystemInfoSummary>
            &lt;para/&gt;
            System Information is automatically refreshed by PRTG once every 24 hours. Devices are not guaranteed to support all system information types.
        </SystemInfoSummary>
        <CancellationToken>with a specified cancellation token.</CancellationToken>
    </Resources>
    <CommonParameters>
        <CommonParameter name="token" type="CancellationToken" description="A cancellation token that can be used by other objects or threads to receive notice of cancellation."/>
    </CommonParameters>
    <Templates>
        <Template name="Object">
            <Region name="Single">
                <MethodDef name="{Request}{Name}" returns="{type}" needsStream="false">
                    <Summary>
                        Retrieves a {extendedDescription} with a specified ID from a PRTG Server.&lt;para/&gt;
                        If the {description} does not exist or an ambiguous match is found, an &lt;see cref="InvalidOperationException"/&gt; is thrown.</Summary>
                    <Exception type="InvalidOperationException" description="The specified {description} does not exist or multiple {description}s were resolved with the specified ID." />
                    <ReturnDescription>The {description} with the specified ID.</ReturnDescription>

                    <Parameter name="id" type="int" description="The ID of the {description} to retrieve." />
                    <Body expression="true">
                        <Call name="{Request}{Name}s" args="Property.Id, id"/>.SingleObject(id)
                    </Body>
                </MethodDef>
            </Region>
            <Region name="Multiple">
                <MethodDef name="{Request}{Name}s" returns="List&lt;{type}&gt;" needsStream="true">
                    <Summary>
                        Retrieves all {extendedDescription}s from a PRTG Server.
                        <Resource name="SerialSummary" condition="Stream" mode="append"/>
                    </Summary>
                    <ReturnDescription>
                        A list of all {description}s on a PRTG Server.
                        <Resource name="SerialReturnDescription" condition="Stream" mode="replace"/>
                    </ReturnDescription>

                    <Parameter name="serial" type="bool" default="false" description="Specifies whether PrtgAPI should execute all requests one at a time rather than all at once." streamOnly="true"/>

                    <SyncAsyncBody expression="true" singleLine="true">
                        <Call name="{Request}{Name}s" args="new {type}Parameters()"/>
                    </SyncAsyncBody>
                    <StreamBody expression="true" singleLine="true">
                        <Call name="{Request}{Name}s" args="new {type}Parameters(), serial"/>
                    </StreamBody>
                </MethodDef>
            </Region>
            <Region name="Filter (Property, Value)">
                <MethodDef name="{Request}{Name}s" returns="List&lt;{type}&gt;" needsStream="true">
                    <Summary>
                        Retrieves {extendedDescription}s from a PRTG Server based on the value of a certain property.
                        <Resource name="StreamSummary" condition="Stream" mode="append"/>
                    </Summary>
                    <ReturnDescription>
                        A list of {description}s that match the specified search criteria.
                        <Resource name="StreamReturnDescription" condition="Stream" mode="replace"/>
                    </ReturnDescription>

                    <Parameter name="property" type="Property" description="Property to search against." />
                    <Parameter name="value" type="object" description="Value to search for."/>
                    <Body expression="true">
                        <Call name="{Request}{Name}s" args="new SearchFilter(property, value)"/>
                    </Body>
                    <TokenBody expression="true">
                        <Call name="{Request}{Name}s" args="new[]{new SearchFilter(property, value)}"/>
                    </TokenBody>
                </MethodDef>
            </Region>
            <Region name="Filter (Property, Operator, Value)">
                <MethodDef name="{Request}{Name}s" returns="List&lt;{type}&gt;" needsStream="true">
                    <Summary>
                        Retrieves {extendedDescription}s from a PRTG Server based on the value of a certain property.
                        <Resource name="StreamSummary" condition="Stream" mode="append"/>
                    </Summary>
                    <ReturnDescription>
                        A list of {description}s that match the specified search criteria.
                        <Resource name="StreamReturnDescription" condition="Stream" mode="replace"/>
                    </ReturnDescription>

                    <Parameter name="property" type="Property" description="Property to search against." />
                    <Parameter name="@operator" type="FilterOperator" description="Operator to compare value and property value with." />
                    <Parameter name="value" type="object" description="Value to search for."/>
                    <Body expression="true">
                        <Call name="{Request}{Name}s" args="new SearchFilter(property, @operator, value)"/>
                    </Body>
                    <TokenBody expression="true">
                        <Call name="{Request}{Name}s" args="new[]{new SearchFilter(property, @operator, value)}"/>
                    </TokenBody>
                </MethodDef>
            </Region>
            <Region name="Filter (Array)">
                <MethodDef name="{Request}{Name}s" returns="List&lt;{type}&gt;" needsStream="true">
                    <Summary>
                        Retrieves {extendedDescription}s from a PRTG Server, filtering for objects based on one or more conditions.
                        <Resource name="StreamSummary" condition="Stream" mode="append"/>
                    </Summary>
                    <ReturnDescription>
                        A list of {description}s that match the specified search criteria.
                        <Resource name="StreamReturnDescription" condition="Stream" mode="replace"/>
                    </ReturnDescription>

                    <Parameter name="filters" type="params SearchFilter[]" description="One or more filters used to limit search results." />
                    <Body expression="true">
                        <Call name="{Request}{Name}s" args="new {type}Parameters(filters)"/>
                    </Body>
                </MethodDef>
            </Region>
            <Region name="Query" type="Query">
                <MethodDef name="Query{Name}s" returns="IQueryable&lt;{type}&gt;" needsAsync="false">
                    <Summary>Retrieves {name}s from a PRTG Server based on one or more &lt;see cref="Queryable"/&gt; expressions.</Summary>
                    <ReturnDescription>An &lt;see cref=&quot;IQueryable{{type}}&quot;/&gt; to be wrapped by &lt;see cref=&quot;Queryable&quot;/&gt; LINQ Expressions.</ReturnDescription>
                    
                    <Body expression="true" singleLine="true">
                        <Call name="Query{Name}s" args="null"/>
                    </Body>
                </MethodDef>
                <MethodDef name="Query{Name}s" returns="IQueryable&lt;{type}&gt;" needsAsync="false">
                    <Summary>Retrieves {name}s from a PRTG Server based on one or more &lt;see cref="Queryable"/&gt; expressions, specifying whether to use strict parsing semantics.</Summary>
                    <ReturnDescription>An &lt;see cref=&quot;IQueryable{{type}}&quot;/&gt; to be wrapped by &lt;see cref=&quot;Queryable&quot;/&gt; LINQ Expressions.</ReturnDescription>
                    <Exception type="NotSupportedException" description="An expression was specified that cannot be evaluated server side."/>

                    <Parameter name="strict" type="bool" description="Whether to use strict evaluation. If true, a &lt;see cref=&quot;NotSupportedException&quot;/&gt; will be thrown\nif an expression is encountered that cannot be evaluated server side.&lt;para/&gt;If &lt;paramref name=&quot;strict&quot;/&gt; is false,\nthe maximal supported expression will be executed server side, with any remaining expressions executed client side."/>

                    <Body expression="true" singleLine="true">
                        <Call name="Query{Name}s" args="null, strict"/>
                    </Body>
                </MethodDef>
                <MethodDef name="Query{Name}s" returns="IQueryable&lt;{type}&gt;" needsAsync="false">
                    <Summary>
                        Retrieves {name}s from a PRTG Server based on one or more &lt;see cref="Queryable"/&gt; expressions,
                        starting with an expression to filter {name}s according to a specified predicate.
                    </Summary>
                    <ReturnDescription>An &lt;see cref=&quot;IQueryable{{type}}&quot;/&gt; representing the result of filtering the {name}s.</ReturnDescription>
                    
                    <Parameter name="predicate" type="Expression&lt;Func&lt;{type}, bool&gt;&gt;" description="The predicate to initially filter {name}s by."/>

                    <Body expression="true" singleLine="true">
                        <Call name="Query{Name}s" args="predicate, false"/>
                    </Body>
                </MethodDef>
                <MethodDef name="Query{Name}s" returns="IQueryable&lt;{type}&gt;" needsAsync="false">
                    <Summary>
                        Retrieves {name}s from a PRTG Server based on one or more &lt;see cref="Queryable"/&gt; expressions,
                        starting with an expression to filter {name}s according to a specified predicate and specifying whether
                        to use strict parsing semantics.
                    </Summary>
                    <ReturnDescription>An &lt;see cref=&quot;IQueryable{{type}}&quot;/&gt; representing the result of filtering the {name}s.</ReturnDescription>

                    <Exception type="NotSupportedException" description="An expression was specified that cannot be evaluated server side."/>

                    <Parameter name="predicate" type="Expression&lt;Func&lt;{type}, bool&gt;&gt;" description="The predicate to initially filter {name}s by."/>
                    <Parameter name="strict" type="bool" description="Whether to use strict evaluation. If true, a &lt;see cref=&quot;NotSupportedException&quot;/&gt; will be thrown\nif an expression is encountered that cannot be evaluated server side.&lt;para/&gt;If &lt;paramref name=&quot;strict&quot;/&gt; is false,\nthe maximal supported expression will be executed server side, with any remaining expressions executed client side."/>

                    <Body expression="true">
                        <Call name="ObjectEngine.QueryObjects" args="predicate, strict, () =&gt; new {type}Parameters()"/>
                    </Body>
                </MethodDef>
            </Region>
            <Region name="Parameters" cancellationToken="true">
                <MethodDef name="{Request}{Name}s" returns="List&lt;{type}&gt;" needsStream="true" tokenMode="AutomaticNamed">
                    <Summary>
                        Retrieves {extendedDescription}s from a PRTG Server using a custom set of parameters.
                        <Resource name="SerialSummary" condition="Stream" mode="append"/>
                    </Summary>
                    <ReturnDescription>
                        A list of {description}s that match the specified parameters.
                        <Resource name="SerialReturnDescription" condition="Stream" mode="replace"/>
                    </ReturnDescription>

                    <Parameter name="parameters" type="{type}Parameters" description="A custom set of parameters used to retrieve PRTG {Name}s." />
                    <Parameter name="serial" type="bool" default="false" description="Specifies whether PrtgAPI should execute all requests one at a time rather than all at once." streamOnly="true"/>

                    <SyncAsyncBody expression="true">
                        <Call name="ObjectEngine.GetObjects" genericArgs="{type}" args="parameters"/>
                    </SyncAsyncBody>
                    <StreamBody expression="true">
                        <Call name="ObjectEngine.StreamObjects" genericArgs="{type}, {type}Parameters" args="parameters, serial"/>
                    </StreamBody>
                </MethodDef>
            </Region>
        </Template>
        <Template name="LogObject">
            <Region name="DateTime Root">
                <MethodDef name="{Request}{Name}s" returns="List&lt;Log&gt;" needsStream="true" tokenMode="Automatic">
                    <Summary>
                        Retrieves logs between two time periods from a PRTG Server. Logs are ordered from newest to oldest.
                        <Resource name="StreamLogsDateTimeSummary" condition="Stream" mode="replace"/>
                    </Summary>
                    <ReturnDescription>All logs that meet the specified criteria.</ReturnDescription>

                    <Parameter name="startDate" type="DateTime?" description="Start date to retrieve logs from. If this value is null, logs will be retrieved from the current date and time."/>
                    <Parameter name="endDate" type="DateTime?" default="null" description="End date to retrieve logs to. If this value is null, logs will be retrieved until the beginning of all logs."/>
                    <Parameter name="count" type="int?" default="500" streamDefault="null"
                               description="Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout."
                               streamDescription="Number of logs to retrieve. If this value is null, all logs will be retrieved within the specified timespan."
                    />
                    <Parameter name="serial" type="bool" default="false" description="Specifies whether PrtgAPI should execute all requests one at a time rather than all at once." streamOnly="true"/>
                    <Parameter name="status" type="params LogStatus[]" description="Log event types to retrieve records for. If no types are specified, all record types will be retrieved."/>

                    <SyncAsyncBody expression="true">
                        <Call name="{Request}{type}s" args="new LogParameters(null, startDate, endDate, count, status)"/>
                    </SyncAsyncBody>
                    <StreamBody expression="true">
                        <Call name="{Request}{type}s" args="new LogParameters(null, startDate, endDate, count, status), serial"/>
                    </StreamBody>
                </MethodDef>
            </Region>
            <Region name="DateTime Object">
                <MethodDef name="{Request}{Name}s" returns="List&lt;Log&gt;" needsStream="true" tokenMode="Automatic">
                    <Summary>
                        Retrieves logs between two time periods from a PRTG Server for a specified object. Logs are ordered from newest to oldest.
                        <Resource name="StreamLogsDateTimeObjectSummary" condition="Stream" mode="replace"/>
                    </Summary>
                    <ReturnDescription>All logs that meet the specified criteria.</ReturnDescription>
                    
                    <Parameter name="objectId" type="int" description="ID of the object to retrieve logs from. If this value is 0, logs will be retrieved from the root group."/>
                    <Parameter name="startDate" type="DateTime?" default="null" description="Start date to retrieve logs from. If this value is null, logs will be retrieved from the current date and time."/>
                    <Parameter name="endDate" type="DateTime?" default="null" description="End date to retrieve logs to. If this value is null, logs will be retrieved until the beginning of all logs."/>
                    <Parameter name="count" type="int?" default="500" streamDefault="null"
                               description="Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout."
                               streamDescription="Number of logs to retrieve. If this value is null, all logs will be retrieved within the specified timespan."
                    />
                    <Parameter name="serial" type="bool" default="false" description="Specifies whether PrtgAPI should execute all requests one at a time rather than all at once." streamOnly="true"/>
                    <Parameter name="status" type="params LogStatus[]" description="Log event types to retrieve records for. If no types are specified, all record types will be retrieved."/>

                    <SyncAsyncBody expression="true">
                        <Call name="{Request}{type}s" args="new LogParameters(objectId, startDate, endDate, count, status)"/>
                    </SyncAsyncBody>
                    <StreamBody expression="true">
                        <Call name="{Request}{type}s" args="new LogParameters(objectId, startDate, endDate, count, status), serial"/>
                    </StreamBody>
                </MethodDef>
            </Region>
            <Region name="RecordAge Root">
                <MethodDef name="{Request}{Name}s" returns="List&lt;Log&gt;" needsStream="true" tokenMode="Automatic">
                    <Summary>
                        Retrieves logs for a standard time period from a PRTG Server. Logs are ordered from newest to oldest.
                        <Resource name="StreamLogsRecordAgeSummary" condition="Stream" mode="replace"/>
                    </Summary>
                    <ReturnDescription>All logs that meet the specified criteria.</ReturnDescription>
                    
                    <Parameter name="recordAge" type="RecordAge" default="RecordAge.LastWeek" description="Time period to retrieve logs from. Logs will be retrieved from the beginning of this period until the current date and time, ordered newest to oldest."/>
                    <Parameter name="count" type="int?" default="500" streamDefault="null"
                               description="Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout."
                               streamDescription="Number of logs to retrieve. If this value is null, all logs will be retrieved within the specified timespan."
                    />
                    <Parameter name="serial" type="bool" default="false" description="Specifies whether PrtgAPI should execute all requests one at a time rather than all at once." streamOnly="true"/>
                    <Parameter name="status" type="params LogStatus[]" description="Log event types to retrieve records for. If no types are specified, all record types will be retrieved."/>

                    <SyncAsyncBody expression="true">
                        <Call name="{Request}{type}s" args="new LogParameters(null, recordAge, count, status)"/>
                    </SyncAsyncBody>
                    <StreamBody expression="true">
                        <Call name="{Request}{type}s" args="new LogParameters(null, recordAge, count, status), serial"/>
                    </StreamBody>
                </MethodDef>
            </Region>
            <Region name="RecordAge Object">
                <MethodDef name="{Request}{Name}s" returns="List&lt;Log&gt;" needsStream="true" tokenMode="Automatic">
                    <Summary>
                        Retrieves logs from a standard time period from a PRTG Server for a specified object. Logs are ordered from newest to oldest.
                        <Resource name="StreamLogsRecordAgeObjectSummary" condition="Stream" mode="replace"/>
                    </Summary>
                    <ReturnDescription>All logs that meet the specified criteria.</ReturnDescription>
                    
                    <Parameter name="objectId" type="int" description="ID of the object to retrieve logs from. If this value is 0, logs will be retrieved from the root group."/>
                    <Parameter name="recordAge" type="RecordAge" description="Time period to retrieve logs from. Logs will be retrieved from the beginning of this period until the current date and time, ordered newest to oldest."/>
                    <Parameter name="count" type="int?" default="500" streamDefault="null"
                               description="Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout."
                               streamDescription="Number of logs to retrieve. If this value is null, all logs will be retrieved within the specified timespan."
                    />
                    <Parameter name="serial" type="bool" default="false" description="Specifies whether PrtgAPI should execute all requests one at a time rather than all at once." streamOnly="true"/>
                    <Parameter name="status" type="params LogStatus[]" description="Log event types to retrieve records for. If no types are specified, all record types will be retrieved."/>

                    <SyncAsyncBody expression="true">
                        <Call name="{Request}{type}s" args="new LogParameters(objectId, recordAge, count, status)"/>
                    </SyncAsyncBody>
                    <StreamBody expression="true">
                        <Call name="{Request}{type}s" args="new LogParameters(objectId, recordAge, count, status), serial"/>
                    </StreamBody>
                </MethodDef>
            </Region>
            <Region name="Query">
                <MethodDef name="Query{Name}s" template="Object" parameters="none">
                    <Summary>
                        Retrieves logs from a PRTG Server based on one or more &lt;see cref="Queryable"/&gt; expressions.&lt;para/&gt;
                        If a lower date range is not specified, logs will be retrieved between the upper range and the beginning of all logs.
                        If an upper range is not specified, logs will be retrieved from the current date and time. If an Id is not specified,
                        logs will be retrieved for all objects.
                    </Summary>
                </MethodDef>
                <MethodDef name="Query{Name}s" template="Object" parameters="strict">
                    <Summary>
                        Retrieves logs from a PRTG Server based on one or more &lt;see cref="Queryable"/&gt; expressions using strict parsing semantics.&lt;para/&gt;
                        If a lower date range is not specified, logs will be retrieved between the upper range and the beginning of all logs.
                        If an upper range is not specified, logs will be retrieved from the current date and time. If an Id is not specified,
                        logs will be retrieved for all objects.
                    </Summary>
                </MethodDef>
                <MethodDef name="Query{Name}s" template="Object" parameters="predicate">
                    <Summary>
                        Retrieves logs from a PRTG Server based on one or more &lt;see cref="Queryable"/&gt; expressions,
                        starting with an expression to filter logs according to a specified predicate.&lt;para/&gt;
                        If a lower date range is not specified in any predicate, logs will be retrieved between the upper range and the beginning of all logs.
                        If an upper range is not specified, logs will be retrieved from the current date and time. If an Id is not specified,
                        logs will be retrieved for all objects.
                    </Summary>
                </MethodDef>
                <MethodDef name="Query{Name}s" template="Object" parameters="predicate,strict">
                    <Summary>
                        Retrieves logs from a PRTG Server based on one or more &lt;see cref="Queryable"/&gt; expressions,
                        starting with an expression to filter logs according to a specified predicate and specifying
                        whether to use strict parsing semantics.&lt;para/&gt;
                        If a lower date range is not specified in any predicate, logs will be retrieved between the upper range and the beginning of all logs.
                        If an upper range is not specified, logs will be retrieved from the current date and time. If an Id is not specified,
                        logs will be retrieved for all objects.
                    </Summary>

                    <Body expression="true">
                        <Call name="ObjectEngine.QueryObjects" args="predicate, strict, () =&gt; new {type}Parameters(null), new QueryLogHelper(strict)"/>
                    </Body>
                </MethodDef>
            </Region>
            <Region name="Watch" type="Watch">
                <MethodDef name="Watch{Name}s" returns="IEnumerable&lt;Log&gt;" needsAsync="false">
                    <Summary>
                        Continuously streams logs from a PRTG Server. This method will not end until you stop requesting items from it,
                        &lt;paramref name="progressCallback"/&gt; returns false or the specified &lt;see cref="CancellationToken"/&gt; is cancelled.&lt;para/&gt;
                        Logs are ordered from oldest to newest.
                    </Summary>
                    <ReturnDescription>All logs that meet the specified criteria between the first log retrieved and when streaming is ended.</ReturnDescription>

                    <Parameter name="status" type="LogStatus[]" default="null" description="Log event types to retrieve records for. If no types are specified, all record types will be retrieved."/>
                    <Parameter name="interval" type="int" default="1" description="Interval (in seconds) with which PrtgAPI should poll for new logs."/>
                    <Parameter name="startDate" type="DateTime?" default="null" description="Start date closest to now to begin streaming logs from. Specifying a value before now will show earlier logs that have already occurred. If this value is null, logs will be retrieved from the current date and time."/>
                    <Parameter name="progressCallback" type="Func&lt;int, bool&gt;" default="null" description="Callback used to indicate how many records have been retrieved and whether to abort retrieving records.\nCalled between each polling attempt. Takes the number of records retrieved so far as an argument. If this method returns false, streaming will abort."/>
                    <Parameter name="token" type="CancellationToken" default="default(CancellationToken)" description="A cancellation token that can be used by other objects or threads to receive notice of cancellation."/>

                    <Body expression="true">
                        new InfiniteLogGenerator(GetLogs, null, status, interval, startDate, progressCallback, token)
                    </Body>
                </MethodDef>
                <MethodDef name="Watch{Name}s" returns="IEnumerable&lt;Log&gt;" needsAsync="false">
                    <Summary>
                        Continuously streams logs for a specified object from a PRTG Server. This method will not end until you stop requesting items from it,
                        &lt;paramref name="progressCallback"/&gt; returns false or the specified &lt;see cref="CancellationToken"/&gt; is cancelled.&lt;para/&gt;
                        Logs are ordered from oldest to newest.
                    </Summary>
                    <ReturnDescription>All logs that meet the specified criteria between the first log retrieved and when streaming is ended.</ReturnDescription>

                    <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to retrieve logs for."/>
                    <Parameter name="status" type="LogStatus[]" default="null" description="Log event types to retrieve records for. If no types are specified, all record types will be retrieved."/>
                    <Parameter name="interval" type="int" default="1" description="Interval (in seconds) with which PrtgAPI should poll for new logs."/>
                    <Parameter name="startDate" type="DateTime?" default="null" description="Start date closest to now to begin streaming logs from. Specifying a value before now will show earlier logs that have already occurred. If this value is null, logs will be retrieved from the current date and time."/>
                    <Parameter name="progressCallback" type="Func&lt;int, bool&gt;" default="null" description="Callback used to indicate how many records have been retrieved and whether to abort retrieving records.\nCalled between each polling attempt. Takes the number of records retrieved so far as an argument. If this method returns false, streaming will abort."/>
                    <Parameter name="token" type="CancellationToken" default="default(CancellationToken)" description="A cancellation token that can be used by other objects or threads to receive notice of cancellation."/>

                    <Body expression="true">
                        new InfiniteLogGenerator(GetLogs, objectOrId.GetId(), status, interval, startDate, progressCallback, token)
                    </Body>
                </MethodDef>
            </Region>
            <Region name="Parameters" cancellationToken="true">
                <MethodDef name="{Request}{Name}s" template="Object" parameters="parameters" tokenMode="AutomaticNamed"/>
            </Region>
        </Template>
        <Template name="ChannelObject">
            <Region name="Single">
                <MethodDef name="{Request}{Name}" returns="{type}">
                    <Summary>Retrieves a channel with a specified ID from a PRTG Server. If the channel does not exist or an ambiguous match is found, an &lt;see cref="InvalidOperationException"/&gt; is thrown.</Summary>
                    <ReturnDescription>The channel with the specified ID.</ReturnDescription>
                    
                    <Exception type="InvalidOperationException" description="The specified channel does not exist or multiple channels were resolved with the specified ID."/>

                    <Parameter name="sensorOrId" type="Either&lt;Sensor, int&gt;" description="The sensor or ID of the sensor containing the channel."/>
                    <Parameter name="id" type="int" description="The ID of the channel to retrieve."/>

                    <Body expression="true">
                        <Call name="GetChannelsInternal" args="sensorOrId, null, i =&gt; i == id"/>.SingleObject(id)
                    </Body>
                </MethodDef>
                <MethodDef name="{Request}{Name}" returns="{type}" tokenMode="AutomaticNamed">
                    <Summary>Retrieves a channel with a specified name from a PRTG Server. If the channel does not exist or an ambiguous match is found, an &lt;see cref="InvalidOperationException"/&gt; is thrown.</Summary>
                    <ReturnDescription>The channel with the specified name.</ReturnDescription>
                    
                    <Exception type="InvalidOperationException" description="The specified channel does not exist or multiple channels were resolved with the specified name."/>

                    <Parameter name="sensorOrId" type="Either&lt;Sensor, int&gt;" description="The sensor or ID of the sensor containing the channel."/>
                    <Parameter name="name" type="string" description="The name of the channel to retrieve."/>

                    <Body expression="false">
                        AssertHasValue(name, nameof(name));

                        var channels = <Call name="GetChannelsInternal" args="sensorOrId, n =&gt; n == name"/>;

                        return channels.SingleObject(name, "name");
                    </Body>
                </MethodDef>
            </Region>

            <MethodDef name="{Request}{Name}s" returns="List&lt;{type}&gt;" tokenMode="AutomaticNamed">
                <Summary>Retrieves all channels of a sensor.</Summary>
                <ReturnDescription>A list of channels on the specified sensor.</ReturnDescription>

                <Parameter name="sensorOrId" type="Either&lt;Sensor, int&gt;" description="The sensor or ID of the sensor to retrieve channels for."/>

                <Body expression="true">
                    <Call name="GetChannelsInternal" args="sensorOrId"/>
                </Body>
            </MethodDef>
            <MethodDef name="{Request}{Name}s" returns="List&lt;{type}&gt;" tokenMode="AutomaticNamed">
                <Summary>Retrieves all channels of a sensor that match the specified name.</Summary>
                <ReturnDescription>A list of channels on the specified sensor.</ReturnDescription>

                <Parameter name="sensorOrId" type="Either&lt;Sensor, int&gt;" description="The sensor or ID of the sensor to retrieve channels for."/>
                <Parameter name="name" type="string" description="The name of the channel to retrieve."/>

                <Body expression="false">
                    AssertHasValue(name, nameof(name));

                    return <Call name="GetChannelsInternal" args="sensorOrId, n =&gt; n == name"/>;
                </Body>
            </MethodDef>
        </Template>
        <Template name="LimitedObject">
            <MethodDef name="{Request}{Name}" template="Object" parameters="id" overload="id"/>
            <MethodDef name="{Request}{Name}" returns="{type}" stream="false" overload="name">
                <Summary>Retrieves a {description} with a specified name from a PRTG Server. If the {description} does not exist or an ambiguous match is found, an &lt;see cref="InvalidOperationException"/&gt; is thrown.</Summary>
                <ReturnDescription>The {description} with the specified name.</ReturnDescription>
                <Exception type="InvalidOperationException" description="The specified {description} does not exist or multiple {description}s were resolved with the specified name." />

                <Parameter name="name" type="string" description="The name of the {description} to retrieve." />
                <Body expression="true">
                    <Call name="{Request}{Name}s" args="Property.Name, AssertHasValue(name, nameof(name))"/>.SingleObject(name, "name")
                </Body>
            </MethodDef>
            <MethodDef name="{Request}{Name}s" template="Object" parameters="none" overload="all" tokenMode="MandatoryCall">
                <SyncAsyncBody expression="true">
                    <Call name="{Request}{Name}sInternal" args="new {type}Parameters()"/>
                </SyncAsyncBody>
            </MethodDef>
            <MethodDef name="{Request}{Name}s" template="Object" parameters="property,value"/>
            <MethodDef name="{Request}{Name}s" template="Object" parameters="filters" tokenMode="MandatoryCall">
                <SyncAsyncBody expression="true">
                    <Call name="{Request}{type}sInternal" args="new {type}Parameters(filters)"/>
                </SyncAsyncBody>
            </MethodDef>
        </Template>
        <Template name="NotificationTrigger">
            <MethodDef name="{Request}{Name}s" returns="List&lt;{type}&gt;" tokenMode="MandatoryCall">
                <Summary>Retrieves all notification triggers of a PRTG Object.</Summary>
                <ReturnDescription>A list of notification triggers that apply to the specified object.</ReturnDescription>

                <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to retrieve triggers for."/>
                
                <Body expression="true">
                    <Call name="GetNotificationTriggersInternal" args="objectOrId"/>
                </Body>
            </MethodDef>
            <MethodDef name="{Request}{Name}Types" returns="List&lt;TriggerType&gt;" tokenMode="MandatoryCall">
                <Summary>Retrieves all notification trigger types supported by a PRTG Object.</Summary>
                <ReturnDescription>The trigger types supported by the object.</ReturnDescription>

                <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to retrieve supported trigger types for."/>

                <Body expression="true">
                    <Call name="GetNotificationTriggerData" args="objectOrId"/>.SupportedTypes.ToList()
                </Body>
            </MethodDef>
        </Template>
        <Template name="SensorHistory">
            <MethodDef name="{Request}{Name}" returns="List&lt;{type}&gt;" needsStream="true" tokenMode="AutomaticDefault">
                <Summary>
                    Retrieves the historical values of a sensor's channels from within a specified time period.
                    <Resource name="SerialOnlySummary" condition="Stream" mode="append"/>
                </Summary>
                <ReturnDescription>
                    Historical data for the specified sensor within the desired date range.
                    <Resource name="SerialOnlyReturnDescription" condition="Stream" mode="replace"/>
                </ReturnDescription>

                <Parameter name="sensorOrId" type="Either&lt;Sensor, int&gt;" description="The sensor or ID of the sensor to retrieve historical data for."/>
                <Parameter name="average" type="int" default="300" description="The time span (in seconds) to average results up to. For example, a value of 300 shows the average of results every 5 minutes. If a value of 0\nis used, PRTG will use the true interval of the sensor.&lt;para/&gt;\nNote: due to limitations of the PRTG API, value lookup labels can only be retrieved when the average is 0, while downtime information\ncan only be retrieved when the average is not 0."/>
                <Parameter name="startDate" type="DateTime?" default="null" description="The start date and time to retrieve data from. If this value is null, records will be retrieved from the current date and time."/>
                <Parameter name="endDate" type="DateTime?" default="null" description="The end date and time to retrieve data to. If this value is null, records will be retrieved from one day prior to &lt;paramref name=&quot;startDate&quot;/&gt;."/>
                <Parameter name="count" type="int?" default="null" description="Limit results to the specified number of items within the specified time period." excludeStream="true"/>

                <SyncBody expression="false">
                    var parameters = new SensorHistoryParameters(sensorOrId, average, startDate, endDate, count);

                    return <Call name="GetSensorHistoryInternal" args="parameters"/>.Item1;
                </SyncBody>
                <AsyncBody expression="false">
                    var parameters = new SensorHistoryParameters(sensorOrId, average, startDate, endDate, count);

                    return <Call name="{Request}SensorHistoryInternal" args="parameters"/>;
                </AsyncBody>
                <StreamBody expression="false">
                    var parameters = new SensorHistoryParameters(sensorOrId, average, startDate, endDate, null);

                    return <Call name="{Request}SensorHistoryInternal" args="parameters, true"/>;
                </StreamBody>
            </MethodDef>
            <MethodDef name="{Request}{Name}Report" returns="List&lt;SensorHistoryReportItem&gt;" tokenMode="AutomaticNamedDefault">
                <Summary>
                    Retrieves a report of &lt;see cref="Status"/&gt; changes of a sensor from within a specified time period.
                </Summary>
                <ReturnDescription>A report of the &lt;see cref="Status"/&gt; changes of the specified sensor within the desired date range.</ReturnDescription>

                <Parameter name="sensorOrId" type="Either&lt;Sensor, int&gt;" description="The sensor or ID of the sensor to retrieve historical data for."/>
                <Parameter name="startDate" type="DateTime?" default="null" description="The start date and time to retrieve data from. If this value is null, records will be retrieved from the current date and time."/>
                <Parameter name="endDate" type="DateTime?" default="null" description="The end date and time to retrieve data to. If this value is null, records will be retrieved from one day prior to &lt;paramref name=&quot;startDate&quot;/&gt;."/>

                <Body expression="false">
                    var response = <Call name="RequestEngine.ExecuteRequest" args="new SensorHistoryReportParameters(sensorOrId, startDate, endDate)"/>;

                    return GetSensorHistoryReportInternal(sensorOrId, response);
                </Body>
            </MethodDef>
        </Template>
        <Template name="ModificationHistory">
            <MethodDef name="GetModificationHistory" returns="List&lt;ModificationEvent&gt;" tokenMode="AutomaticNamed">
                <Summary>Retrieves the setting/state modification history of a PRTG Object.</Summary>
                <ReturnDescription>A list of all setting/state modifications to the specified object.</ReturnDescription>

                <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to retrieve historical records for."/>

                <Body expression="true">
                    ResponseParser.Amend(<Call name="ObjectEngine.GetObjects" genericArgs="ModificationEvent" args="new ModificationHistoryParameters(objectOrId)"/>, e => e.ObjectId = objectOrId.GetId())
                </Body>
            </MethodDef>
        </Template>
        <Template name="ServerStatus">
            <MethodDef name="GetStatus" returns="ServerStatus" tokenMode="AutomaticNamed">
                <Summary>Retrieves configuration, status and version details of the PRTG Server.</Summary>
                <ReturnDescription>Status details of a PRTG Server.</ReturnDescription>

                <Body expression="true">
                    <Call name="ObjectEngine.GetObject" genericArgs="ServerStatus" args="new ServerStatusParameters()"/>
                </Body>
            </MethodDef>
        </Template>
        <Template name="SystemInfo">
            <Region name="Full">
                <MethodDef name="GetSystemInfo" returns="SystemInfo">
                    <Summary>
                        Retrieves System Information including hardware, software, process, service and user information for a specified device.
                        <Resource name="SystemInfoSummary" mode="append" condition="none"/>
                    </Summary>
                    <ReturnDescription>A complete summary of System Information known to PRTG for the specified device.</ReturnDescription>

                    <Parameter name="deviceOrId" type="Either&lt;Device, int&gt;" description="The device or ID of the device to retrieve information for."/>

                    <Body expression="true">
                        <Call name="GetSystemInfoInternal" args="deviceOrId"/>
                    </Body>
                </MethodDef>
            </Region>
            <Region name="Generic">
                <MethodDef name="GetSystemInfo" returns="List&lt;T&gt;" tokenMode="MandatoryCall">
                    <Summary>Retrieves a specific type of system information for a specified device based on the resulting object type.</Summary>
                    <ReturnDescription>System Information known to PRTG for the specified information type for the specified device.</ReturnDescription>

                    <GenericArg name="T" description="Type of System Information to retrieve." constraint="IDeviceInfo"/>
                    <Parameter name="deviceOrId" type="Either&lt;Device, int&gt;" description="The device or ID of the device to retrieve information for."/>

                    <Body expression="true">
                        <Call name="GetSystemInfoInternal" args="deviceOrId" genericArgs="T"/>
                    </Body>
                </MethodDef>
            </Region>
            <Region name="Type">
                <MethodDef name="GetSystemInfo" returns="List&lt;IDeviceInfo&gt;">
                    <Summary>Retrieves a specific type of system information for a specified device based on a &lt;see cref="SystemInfoType"/&gt;.</Summary>
                    <ReturnDescription>System Information known to PRTG for the specified information type for the specified device.</ReturnDescription>

                    <Parameter name="deviceOrId" type="Either&lt;Device, int&gt;" description="The device or ID of the device to retrieve information for."/>
                    <Parameter name="type" type="SystemInfoType" description="Type of information to retrieve."/>

                    <Body expression="true">
                        <Call name="GetSystemInfoInternal" args="deviceOrId, type"/>
                    </Body>
                </MethodDef>
            </Region>
            <Region name="Refresh">
                <MethodDef name="RefreshSystemInfo" returns="void" tokenMode="MandatoryCall">
                    <Summary>
                        Refreshes one or more types of system information on a specified device.&lt;para/&gt;

                        If no types are specified, all information types will be refreshed.
                    </Summary>

                    <Parameter name="deviceOrId" type="Either&lt;Device, int&gt;" description="The device or ID of the device to refresh system information for."/>
                    <Parameter name="types" type="params SystemInfoType[]" description="Types to refresh. If no types are specified, all types will be refreshed."/>

                    <Body expression="true">
                        <Call name="RefreshSystemInfoInternal" args="deviceOrId, types"/>
                    </Body>
                </MethodDef>
            </Region>
        </Template>
        <Template name="TotalObjects">
            <MethodDef name="GetTotalObjects" returns="int" tokenMode="AutomaticNamed">
                <Summary>Calculates the total number of objects of a given type present on a PRTG Server.</Summary>
                <ReturnDescription>The total number of objects of the given type.</ReturnDescription>

                <Parameter name="content" type="Content" description="The type of object to total."/>

                <Body expression="true">
                    <Call name="ObjectEngine.GetObjectsRaw" genericArgs="object" args="new TotalObjectParameters(content)"/>.TotalCount
                </Body>
            </MethodDef>
            <MethodDef name="GetTotalObjects" returns="int" tokenMode="AutomaticNamed">
                <Summary>Calculates the total number of objects of a given type present on a PRTG Server that match one or more search criteria.</Summary>
                <ReturnDescription>The total number of objects of the given type.</ReturnDescription>

                <Parameter name="content" type="Content" description="The type of object to total."/>
                <Parameter name="filters" type="params SearchFilter[]" description="One or more filters used to limit search results."/>

                <Body expression="true">
                    <Call name="ObjectEngine.GetObjectsRaw" genericArgs="object" args="new TotalObjectParameters(content, filters)"/>.TotalCount
                </Body>
            </MethodDef>
        </Template>
        <Template name="ObjectProperties">
            <MethodDef name="Get{type}Properties" returns="{type}Settings">
                <Summary>
                    Retrieves properties and settings of a PRTG {type}.&lt;para/&gt;
                    If the current user does not have write access to the specified object, an &lt;see cref="InvalidOperationException"/&gt; will be thrown.</Summary>
                <Exception type="InvalidOperationException" description="The specified {name} is read only. To retrieve properties from read only {name}s, use &lt;see cref=&quot;GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)&quot;/&gt;."/>
                <ReturnDescription>All settings of the specified {name}.</ReturnDescription>

                <Parameter name="{name}" type="Either&lt;{Name}, int&gt;" description="The {name} or ID of the {name} to retrieve settings for."/>
                <Body expression="true">
                    <Call name="GetObjectProperties" genericArgs="{type}Settings" args="{name}.ToPrtgObject(), ObjectType.{type}, ObjectProperty.Name"/>
                </Body>
            </MethodDef>
        </Template>
    </Templates>

    <Methods>
        <Region name="Object Data">
            <MethodImpl name="Object" type="PrtgObject" extendedDescription ="uniquely identifiable {name}" template="Object" stream="true" region="true">
                <Region name="Single">
                    <MethodDef name="{Request}{Name}" tokenMode="AutomaticDefault">
                        <Summary>
                            Retrieves an object of an unspecified type based on its object ID.&lt;para/&gt;
                            If an object with the specified object ID does not exist or an ambiguous match is found, an &lt;see cref="InvalidOperationException"/&gt; exception is thrown.
                        </Summary>

                        <Parameter name="resolve" type="bool" default="false" after="id" description="Whether to resolve the resultant object to its most derived &lt;see cref=&quot;PrtgObject&quot;/&gt; type. If the object type\nis not supported by PrtgAPI, the original &lt;see cref=&quot;PrtgObject&quot;/&gt; is returned."/>
                    
                        <Body expression="true">
                            <Call name="{Request}{Name}Internal" args="id, resolve"/>
                        </Body>
                    </MethodDef>
                </Region>
                <Region name="Parameters">
                    <MethodDef name="{Request}{Name}s" tokenMode="AutomaticNamed">
                        <SyncAsyncBody expression="true">
                            <Call name="ObjectEngine.GetObjects" genericArgs="{type}" args="parameters"/>.OrderBy(o => o.Id).ToList()
                        </SyncAsyncBody>
                    </MethodDef>
                </Region>
            </MethodImpl>
            <MethodImpl name="Sensor" type="Sensor" template="Object" stream="true" query="true" region="true">
                <Region name="Sensor Status" after="Multiple">
                    <MethodDef name="{Request}{type}s" returns="List&lt;{type}&gt;" needsStream="true">
                        <Summary>
                            Retrieves sensors from a PRTG Server of one or more statuses.
                            <Resource name="StreamSummary" condition="Stream" mode="append"/>
                        </Summary>
                        <ReturnDescription>
                            A list of {description}s that match the specified search criteria.
                            <Resource name="StreamReturnDescription" condition="Stream" mode="replace"/>
                        </ReturnDescription>

                        <Parameter name="statuses" type="params Status[]" description="A list of {description} statuses to filter for." />

                        <Body expression="true">
                            <Call name="{Request}{type}s" args="new SensorParameters { Status = statuses }"/>
                        </Body>
                    </MethodDef>
                </Region>
                <Region name="Types" after="*">
                    <MethodDef name="GetSensorTypes" returns="List&lt;SensorTypeDescriptor&gt;" tokenMode="AutomaticNamedDefault">
                        <Summary>
                            Retrieves descriptions of all sensor types that can be created under a specified object. Actual supported types may differ based on current PRTG settings.&lt;para/&gt;
                            If the specified object does not support querying sensor types, this method returns null.
                        </Summary>
                        <ReturnDescription>If the specified object supports querying sensor types, a list descriptions of sensor types supported by the specified object. Otherwise, null.</ReturnDescription>

                        <Parameter name="objectId" type="int" default="WellKnownId.DefaultProbe" description="The ID of the object to retrieve supported types of."/>

                        <Body expression="true">
                            ResponseParser.ParseSensorTypes(<Call name="ObjectEngine.GetObject" genericArgs="SensorTypeDescriptorInternal" args="new SensorTypeParameters(objectId), ResponseParser.ValidateHasContent{Request}"/>.Types)
                        </Body>
                    </MethodDef>
                </Region>
                <Region name="Totals" after="*">
                    <MethodDef name="GetSensorTotals" returns="SensorTotals" tokenMode="AutomaticNamed">
                        <Summary>Retrieves the number of sensors of each sensor type in the system.</Summary>
                        <ReturnDescription>The total number of sensors of each &lt;see cref=&quot;Status&quot;/&gt; type.</ReturnDescription>
                        
                        <Body expression="true">
                            <Call name="ObjectEngine.GetObject" genericArgs="SensorTotals" args="new XmlFunctionParameters(XmlFunction.GetTreeNodeStats)"/>
                        </Body>
                    </MethodDef>
                </Region>
            </MethodImpl>
            <MethodImpl name="Device" type="Device" template="Object" stream="true" query="true" region="true">
                <MethodDef name="GetDeviceTemplates" returns="List&lt;DeviceTemplate&gt;" after="*" tokenMode="AutomaticDefault">
                    <Summary>Retrieves all auto-discovery device templates supported by the specified object.</Summary>
                    <ReturnDescription>A list of device templates supported by the specified object.</ReturnDescription>

                    <Parameter name="deviceId" type="int" default="WellKnownId.DefaultProbeDevice" description="The ID of the device to retrieve supported device templates of. In practice all devices should support the same device templates."/>

                    <Body expression="true">
                        ResponseParser.GetTemplates(<Call name="GetObjectPropertiesRawInternal" args="deviceId, ObjectType.Device"/>.StringValue)
                    </Body>
                </MethodDef>
            </MethodImpl>
            <MethodImpl name="Group" type="Group" template="Object" stream="true" query="true" region="true"/>
            <MethodImpl name="Probe" type="Probe" template="Object" stream="true" query="true" region="true"/>

            <MethodImpl name="Channel" type="Channel" template="ChannelObject" region="true"/>
            <MethodImpl name="Log" type="Log" template="LogObject" stream="true" query="true" region="true"/>

            <MethodImpl name="NotificationAction" type="NotificationAction" description="Notification Action" template="LimitedObject" region="true"/>
            <MethodImpl name="NotificationTrigger" type="NotificationTrigger" description="Notification Trigger" template="NotificationTrigger" region="true"/>
            <MethodImpl name="Schedule" type="Schedule" extendedDescription="monitoring {name}" template="LimitedObject" region="true">
                <MethodDef name="{Request}{Name}" overload="id">
                    <Summary>
                        Retrieves a monitoring schedule with a specified ID from a PRTG Server.&lt;para/&gt;
                        If the schedule does not exist or an ambiguous match is found, an &lt;see cref="InvalidOperationException"/&gt; is thrown.</Summary>
                </MethodDef>
                <MethodDef name="{Request}{Name}" overload="name">
                    <Summary>
                        Retrieves a monitoring schedule with a specified name from a PRTG Server.&lt;para/&gt;
                        If the schedule does not exist or an ambiguous match is found, an &lt;see cref="InvalidOperationException"/&gt; is thrown.</Summary>
                </MethodDef>
                <MethodDef name="{Request}{Name}s" overload="all">
                    <ReturnDescription>A list of all monitoring schedules supported by a PRTG Server.</ReturnDescription>
                </MethodDef>
            </MethodImpl>
            <MethodImpl name="SensorHistory" type="SensorHistoryRecord" description="Sensor History" template="SensorHistory" stream="true" query="false" region="true" pluralRegion="false"/>
            <MethodImpl name="ModificationHistory" type="ModificationEvent" description="Modification History" template="ModificationHistory" region="true" pluralRegion="false"/>
            <MethodImpl name="ServerStatus" type="ServerStatus" description="Server Status" template="ServerStatus" region="true" pluralRegion="false"/>
            <MethodImpl name="SystemInfo" type="SystemInfo" description="System Information" template="SystemInfo" region="true"/>
            <MethodImpl name="TotalObjects" type="int" description="Total Objects" template="TotalObjects" region="true" pluralRegion="false"/>

            <Region name="Tree">
                <InlineMethodDef name="GetTree" returns="PrtgNode" tokenMode="MandatoryDefault">
                    <Summary>Retrieves a &lt;see cref="PrtgNode"/&gt; tree for a specified object. If no object is specified, the Root node will be used.</Summary>
                    <ReturnDescription>A &lt;see cref="PrtgNode"/&gt; encapsulating the specified &lt;paramref name="value"/&gt; and all its descendants.</ReturnDescription>

                    <Parameter name="value" type="PrtgObject" default="null" description="The object at the root of the tree."/>
                    <Parameter name="options" type="FlagEnum&lt;TreeParseOption&gt;?" default="null" description="Specifies the types of descendants to include in the tree. If no value is specified, &lt;see cref=&quot;TreeParseOption.Common&quot; /&gt; will be used."/>
                    <Parameter name="progressCallback" type="ITreeProgressCallback" default="null" description="A callback used to receive progress notifications."/>

                    <Body expression="false">
                        if (value != null)
                            return <Call name="GetTree" args="(Either&lt;PrtgObject, int&gt;) value, options, progressCallback"/>;

                        return <Call name="GetTree" args="WellKnownId.Root, options, progressCallback"/>;
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="GetTree" returns="PrtgNode" tokenMode="MandatoryDefault">
                    <Summary>Retrieves a &lt;see cref="PrtgNode"/&gt; tree for a specified object or ID.</Summary>
                    <ReturnDescription>A &lt;see cref="PrtgNode"/&gt; encapsulating the specified object and all its descendants.</ReturnDescription>

                    <Parameter name="objectOrId" type="Either&lt;PrtgObject, int&gt;" description="The object or ID of the object at the root of the tree."/>
                    <Parameter name="options" type="FlagEnum&lt;TreeParseOption&gt;?" default="null" description="Specifies the types of descendants to include in the tree. If no value is specified, &lt;see cref=&quot;TreeParseOption.Common&quot; /&gt; will be used."/>
                    <Parameter name="progressCallback" type="ITreeProgressCallback" default="null" description="A callback used to receive progress notifications."/>

                    <Body expression="false">
                        var builder = new TreeBuilder(this, options, progressCallback, TreeRequestType.{Request}, token);

                        return <Call name="builder.GetTree" args="objectOrId" needsToken="false"/>.ToStandaloneNode&lt;PrtgNode&gt;();
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="GetTreeLazy" returns="PrtgNode" tokenMode="MandatoryDefault" needsAsync="false">
                    <Summary>
                        Lazily retrieves a &lt;see cref="PrtgNode"/&gt; tree for a specified object. If no object is specified, the Root node will be used.&lt;para/&gt;
                        Children of the root object will be retrieved on demand upon being accessed.
                    </Summary>
                    <ReturnDescription>A &lt;see cref="PrtgNode"/&gt; encapsulating the specified &lt;paramref name="value"/&gt; that lazily calculates its descendants.</ReturnDescription>

                    <Parameter name="value" type="PrtgObject" default="null" description="The object at the root of the tree."/>
                    <Parameter name="options" type="FlagEnum&lt;TreeParseOption&gt;?" default="null" description="Specifies the types of descendants to include in the tree. If no value is specified, &lt;see cref=&quot;TreeParseOption.Common&quot; /&gt; will be used."/>
                    <Parameter name="progressCallback" type="ITreeProgressCallback" default="null" description="A callback used to retrieve progress notifications when children are lazily resolved."/>

                    <Body expression="false">
                        if (value != null)
                            return <Call name="GetTreeLazy" args="(Either&lt;PrtgObject, int&gt;) value, options, progressCallback"/>;

                        return <Call name="GetTreeLazy" args="WellKnownId.Root, options, progressCallback"/>;
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="GetTreeLazy" returns="PrtgNode" tokenMode="MandatoryDefault" needsAsync="false">
                    <Summary>
                        Lazily retrieves a &lt;see cref="PrtgNode"/&gt; tree for a specified object or ID.&lt;para/&gt;
                        Children of the root object will be retrieved on demand upon being accessed.
                    </Summary>
                    <ReturnDescription>A &lt;see cref="PrtgNode"/&gt; encapsulating the specified object that lazily calculates its descendants.</ReturnDescription>

                    <Parameter name="objectOrId" type="Either&lt;PrtgObject, int&gt;" description="The object or ID of the object at the root of the tree."/>
                    <Parameter name="options" type="FlagEnum&lt;TreeParseOption&gt;?" default="null" description="Specifies the types of descendants to include in the tree. If no value is specified, &lt;see cref=&quot;TreeParseOption.Common&quot; /&gt; will be used."/>
                    <Parameter name="progressCallback" type="ITreeProgressCallback" default="null" description="A callback used to retrieve progress notifications when children are lazily resolved."/>

                    <Body expression="false">
                        var builder = new TreeBuilder(this, options, progressCallback, TreeRequestType.{Request} | TreeRequestType.Lazy, token);

                        return <Call name="builder.GetTree" args="objectOrId" needsToken="false"/>.ToStandaloneNode&lt;PrtgNode&gt;();
                    </Body>
                </InlineMethodDef>
            </Region>
        </Region>
        <Region name="Object Manipulation">
            <Region name="Add Objects">
                <InlineMethodDef name="AddSensor" returns="List&lt;Sensor&gt;" tokenMode="MandatoryNamedDefault">
                    <Summary>Adds a new sensor to a PRTG device. Based on the specified sensor parameters, multiple new sensors may be created.</Summary>
                    <ReturnDescription>If &lt;paramref name=&quot;resolve&quot;/&gt; is true, all new sensors that were created from the sensor &lt;paramref name=&quot;parameters&quot;/&gt;. Otherwise, null.</ReturnDescription>

                    <Parameter name="deviceOrId" type="Either&lt;Device, int&gt;" description="The device or ID of the device the sensor will apply to."/>
                    <Parameter name="parameters" type="NewSensorParameters" description="A set of parameters describing the properties of the sensor to create.\nDepending on the type of sensor parameters specified, this may result in the creation of several new sensors."/>
                    <Parameter name="resolve" type="bool" default="true" description="Whether to resolve the new sensors to their resultant &lt;see cref=&quot;Sensor&quot;/&gt; objects.\nIf this value is false, this method will return null."/>

                    <Body expression="true">
                        <Call name="AddObject" args="deviceOrId.ToPrtgObject(), parameters, {RequestLambda}(f, t) => {Alias:GetObjects}, resolve, allowMultiple: true">
                            <Call name="{Request}Sensors" args="new SensorParameters(f), t" alias="GetObjects"/>
                        </Call>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="AddDevice" returns="Device" tokenMode="MandatoryNamedDefault">
                    <Summary>Adds a new device to a PRTG group or probe.</Summary>
                    <ReturnDescription>If &lt;paramref name=&quot;resolve&quot;/&gt; is true, the device that was created from this method's device parameters. Otherwise, null.</ReturnDescription>

                    <Parameter name="parent" type="Either&lt;GroupOrProbe, int&gt;" description="The group or probe the device will apply to."/>
                    <Parameter name="name" type="string" description="The name to use for the new device."/>
                    <Parameter name="host" type="string" default="null" description="The hostname or IP Address PRTG should use to communicate with the device. If this value is null, the &lt;paramref name=&quot;name&quot;/&gt; will be used."/>
                    <Parameter name="discoveryMode" type="AutoDiscoveryMode" default="AutoDiscoveryMode.Manual" description="Whether an auto-discovery should be automatically performed after device creation."/>
                    <Parameter name="resolve" type="bool" default="true" description="Whether to resolve the new device to its resultant &lt;see cref=&quot;Device&quot;/&gt; object.\nIf this value is false, this method will return null."/>

                    <Body expression="true">
                        <Call name="AddDevice" args="parent, new NewDeviceParameters(name, host) { AutoDiscoveryMode = discoveryMode }, resolve"/>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="AddDevice" returns="Device" tokenMode="MandatoryNamedDefault">
                    <Summary>Adds a new device to a PRTG group or probe with a complex set of parameters.</Summary>
                    <ReturnDescription>If &lt;paramref name=&quot;resolve&quot;/&gt; is true, the device that was created from this method's device &lt;paramref name=&quot;parameters&quot;/&gt;. Otherwise, null.</ReturnDescription>

                    <Parameter name="parent" type="Either&lt;GroupOrProbe, int&gt;" description="The group or probe the device will apply to."/>
                    <Parameter name="parameters" type="NewDeviceParameters" description="A set of parameters describing the properties of the device to create."/>
                    <Parameter name="resolve" type="bool" default="true" description="Whether to resolve the new device to its resultant &lt;see cref=&quot;Device&quot;/&gt; object.\nIf this value is false, this method will return null."/>

                    <Body expression="true">
                        <Call name="AddObject" args="parent.ToPrtgObject(), parameters, {RequestLambda}(f, t) => {Alias:GetObjects}, resolve">
                            <Call name="{Request}Devices" args="new DeviceParameters(f), t" alias="GetObjects"/>
                        </Call>?.Single()
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="AddGroup" returns="Group" tokenMode="MandatoryNamedDefault">
                    <Summary>Adds a new group to a PRTG group or probe.</Summary>
                    <ReturnDescription>If &lt;paramref name=&quot;resolve&quot;/&gt; is true, the group that was created from this method's group parameters. Otherwise, null.</ReturnDescription>

                    <Parameter name="parent" type="Either&lt;GroupOrProbe, int&gt;" description="The group or probe the new group will apply to."/>
                    <Parameter name="name" type="string" description="The name to use for the new group."/>
                    <Parameter name="resolve" type="bool" default="true" description="Whether to resolve the new group to its resultant &lt;see cref=&quot;Group&quot;/&gt; object.\nIf this value is false, this method will return null."/>

                    <Body expression="true">
                        <Call name="AddGroup" args="parent, new NewGroupParameters(name), resolve"/>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="AddGroup" returns="Group" tokenMode="MandatoryNamedDefault">
                    <Summary>Adds a new group to a PRTG group or probe with a complex set of parameters.</Summary>
                    <ReturnDescription>If &lt;paramref name=&quot;resolve&quot;/&gt; is true, the group that was created from this method's group &lt;paramref name=&quot;parameters&quot;/&gt;. Otherwise, null.</ReturnDescription>

                    <Parameter name="parent" type="Either&lt;GroupOrProbe, int&gt;" description="The group or probe the new group will apply to."/>
                    <Parameter name="parameters" type="NewGroupParameters" description="A set of parameters describing the properties of the group to create."/>
                    <Parameter name="resolve" type="bool" default="true" description="Whether to resolve the new group to its resultant &lt;see cref=&quot;Group&quot;/&gt; object.\nIf this value is false, this method will return null."/>

                    <Body expression="true">
                        <Call name="AddObject" args="parent.ToPrtgObject(), parameters, {RequestLambda}(f, t) => {Alias:GetObjects}, resolve">
                            <Call name="{Request}Groups" args="new GroupParameters(f), t" alias="GetObjects"/>
                        </Call>?.Single()
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="GetDynamicSensorParameters" returns="DynamicSensorParameters" tokenMode="MandatoryDefault">
                    <Summary>Creates a set of dynamic sensor parameters for creating a new sensor of a specified type.</Summary>
                    <ReturnDescription>A dynamic set of sensor parameters that store the the parameters required to create a sensor of a specified type.</ReturnDescription>
                    
                    <Exception type="TimeoutException" description="Sensor parameters failed to resolve within the specified timespan."/>

                    <Parameter name="deviceOrId" type="Either&lt;Device, int&gt;" description="The device or ID of a device that supports the specified sensor type."/>
                    <Parameter name="sensorType" type="string" description="The type of sensor to create sensor paramters for."/>
                    <Parameter name="progressCallback" type="Func&lt;int, bool&gt;" default="null" description="A callback function used to monitor the progress of the request. If this function returns false, the request is aborted and this method returns null."/>
                    <Parameter name="timeout" type="int" default="60" description="Duration (in seconds) to wait for sensor parameters to resolve."/>
                    <Parameter name="queryParameters" type="ISensorQueryTargetParameters" default="null" description="A &lt;see cref=&quot;SensorQueryTarget&quot;/&gt;, &lt;see cref=&quot;SensorQueryTargetParameters&quot;/&gt; or &lt;see cref=&quot;SensorMultiQueryTargetParameters&quot;/&gt; value specifying the parameters that must be known prior to interrogating a sensor's dynamic parameters (such as the SNMP Library file to use or IPMI UserName and Password)."/>

                    <Body expression="true">
                        new DynamicSensorParameters(<Call name="GetAddSensorQueryResponse" args="deviceOrId, sensorType, progressCallback, timeout, queryParameters"/>, sensorType, queryParameters)
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="AutoDiscover" returns="void" tokenMode="AutomaticNamed">
                    <Summary>Automatically creates sensors under an object based on the object's (or it's children's) device type.</Summary>

                    <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to run Auto-Discovery for (such as a device or group)."/>
                    <Parameter name="templates" type="params DeviceTemplate[]" description="An optional list of device templates to use for performing the auto-discovery."/>

                    <Body expression="true">
                        <Call name="RequestEngine.ExecuteRequest" args="new AutoDiscoverParameters(objectOrId, templates)"/>
                    </Body>
                </InlineMethodDef>
            </Region>
            <Region name="Sensor State">
                <Region name="Acknowledge" groupOverloads="true">
                    <InlineMethodDef name="AcknowledgeSensor" returns="void" tokenMode="AutomaticDefault">
                        <Summary>Marks a &lt;see cref="Status.Down"/&gt; sensor as &lt;see cref="Status.DownAcknowledged"/&gt;. If an acknowledged sensor returns to &lt;see cref="Status.Up"/&gt;, it will not be acknowledged when it goes down again.</Summary>

                        <Parameter name="sensorOrId" type="Either&lt;Sensor, int&gt;" description="The sensor or ID of the sensor to acknowledge."/>
                        <Parameter name="duration" type="int?" default="null" description="Duration (in minutes) to acknowledge the sensor for. If null, sensor will be acknowledged indefinitely."/>
                        <Parameter name="message" type="string" default="null" description="Message to display on the acknowledged sensor."/>

                        <Body expression="true">
                            <Call name="AcknowledgeSensor" args="new[] {sensorOrId.GetId()}, duration, message"/>
                        </Body>
                    </InlineMethodDef>
                    <InlineMethodDef name="AcknowledgeSensor" returns="void" tokenMode="AutomaticNamedDefault">
                        <Summary>Marks one or more &lt;see cref="Status.Down"/&gt; sensors as &lt;see cref="Status.DownAcknowledged"/&gt;. If an acknowledged sensor returns to &lt;see cref="Status.Up"/&gt;, it will not be acknowledged when it goes down again.</Summary>

                        <Parameter name="sensorIds" type="int[]" description="IDs of the sensors to acknowledge."/>
                        <Parameter name="duration" type="int?" default="null" description="Duration (in minutes) to acknowledge the sensors for. If null, sensors will be acknowledged indefinitely."/>
                        <Parameter name="message" type="string" default="null" description="Message to display on the acknowledged sensors."/>

                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new AcknowledgeSensorParameters(sensorIds, duration, message)"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Pause" groupOverloads="true">
                    <InlineMethodDef name="PauseObject" returns="void" tokenMode="AutomaticNamedDefault">
                        <Summary>Pauses monitoring on a PRTG Object and all child objects.</Summary>

                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to pause."/>
                        <Parameter name="duration" type="int?" default="null" description="Duration (in minutes) to pause the object for. If null, object will be paused indefinitely."/>
                        <Parameter name="message" type="string" default="null" description="Message to display on the paused object."/>

                        <Body expression="true">
                            <Call name="PauseObject" args="new[] {objectOrId.GetId()}, duration, message"/>
                        </Body>
                    </InlineMethodDef>
                    <InlineMethodDef name="PauseObject" returns="void" tokenMode="AutomaticNamedDefault">
                        <Summary>Pauses monitoring on one or more PRTG Objects and all child objects.</Summary>

                        <Parameter name="objectIds" type="int[]" description="IDs of the objects to pause."/>
                        <Parameter name="duration" type="int?" default="null" description="Duration (in minutes) to pause the object for. If null, object will be paused indefinitely."/>
                        <Parameter name="message" type="string" default="null" description="Message to display on the paused objects."/>

                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new PauseParameters(objectIds, duration, message)"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Resume" groupOverloads="true">
                    <InlineMethodDef name="ResumeObject" returns="void" tokenMode="AutomaticNamed">
                        <Summary>Resumes monitoring on one or more PRTG Objects (including sensors, devices, groups and probes) from a Paused or Simulated Error state.</Summary>

                        <Parameter name="objectIds" type="params int[]" description="IDs of the objects to resume."/>

                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new PauseParameters(objectIds, PauseAction.Resume)"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Simulate Error" groupOverloads="true">
                    <InlineMethodDef name="SimulateError" returns="void" tokenMode="AutomaticNamed">
                        <Summary>
                            Simulates a &lt;see cref="Status.Down"/&gt; state for one or more sensors.
                        </Summary>

                        <Parameter name="sensorIds" type="params int[]" description="IDs of the sensors to simulate an error for."/>
                        
                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new SimulateErrorParameters(sensorIds)"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
            </Region>
            <Region name="Notifications">
                <InlineMethodDef name="AddNotificationTrigger" returns="NotificationTrigger" tokenMode="MandatoryDefault">
                    <Summary>Adds a notification trigger to an object specified by a set of trigger parameters.</Summary>
                    <ReturnDescription>If &lt;paramref name=&quot;resolve&quot;/&gt; is true, the trigger that was created from this method's trigger parameters. Otherwise, null.</ReturnDescription>

                    <Parameter name="parameters" type="TriggerParameters" description="A set of parameters describing the type of notification trigger to create and the object to apply it to."/>
                    <Parameter name="resolve" type="bool" default="true" description="Whether to resolve the new trigger to its resultant &lt;see cref=&quot;NotificationTrigger&quot;/&gt; object.\nIf this value is false, this method will return null."/>

                    <Body expression="true">
                        <Call name="AddNotificationTriggerInternal" args="parameters, resolve"/>?.Single()
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="SetNotificationTrigger" returns="void" tokenMode="MandatoryCall">
                    <Summary>Adds or edits a notification trigger on an object specified by a set of trigger parameters.</Summary>

                    <Parameter name="parameters" type="TriggerParameters" description="A set of parameters describing the type of notification trigger and how to manipulate it."/>

                    <Body expression="true">
                        <Call name="SetNotificationTriggerInternal" args="parameters"/>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="RemoveNotificationTrigger" returns="void" tokenMode="AutomaticNamed">
                    <Summary>
                        Removes a notification trigger from an object.&lt;para/&gt;
                        Triggers can only be removed from their parent objects, and cannot be removed from objects that have inherited them.</Summary>
                    <Exception type="InvalidOperationException" description="The &lt;paramref name=&quot;trigger&quot;/&gt; was inherited from another object."/>

                    <Parameter name="trigger" type="NotificationTrigger" description="The notification trigger to remove."/>

                    <Body expression="true">
                        <Call name="RequestEngine.ExecuteRequest" args="new RemoveTriggerParameters(trigger)"/>
                    </Body>
                </InlineMethodDef>
            </Region>
            <Region name="Clone Object" groupOverloads="true">
                <InlineMethodDef name="CloneObject" returns="int" tokenMode="MandatoryCall">
                    <Summary>Clones a sensor or group to another device or group.</Summary>
                    <ReturnDescription>The ID of the object that was created.</ReturnDescription>

                    <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The sensor or group to clone."/>
                    <Parameter name="cloneName" type="string" description="The name that should be given to the cloned object."/>
                    <Parameter name="destinationObjectOrId" type="Either&lt;DeviceOrGroupOrProbe, int&gt;" description="If this is a sensor, the device or ID of the device to clone to. If this is a group, the object or ID of the group or probe to clone to."/>

                    <Body expression="true">
                        <Call name="CloneObject" args="new CloneParameters(objectOrId.ToPrtgObject(), cloneName, destinationObjectOrId.ToPrtgObject())"/>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="CloneObject" returns="int" tokenMode="MandatoryCall">
                    <Summary>Clones a device to another group or probe.</Summary>
                    <ReturnDescription>The ID of the object that was created.</ReturnDescription>

                    <Parameter name="deviceOrId" type="Either&lt;Device, int&gt;" description="The device or ID of the device to clone."/>
                    <Parameter name="cloneName" type="string" description="The name that should be given to the cloned device."/>
                    <Parameter name="host" type="string" description="The hostname or IP Address that should be assigned to the new device."/>
                    <Parameter name="destinationObjectOrId" type="Either&lt;GroupOrProbe, int&gt;" description="The group or probe the device should be cloned to."/>

                    <Body expression="true">
                        <Call name="CloneObject" args="new CloneParameters(deviceOrId, cloneName, destinationObjectOrId, host)"/>
                    </Body>
                </InlineMethodDef>
            </Region>
            <Region name="Get Object Properties">
                <Region name="Get Typed Properties">
                    <MethodImpl name="Sensor" type="Sensor" template="ObjectProperties" region="true"/>
                    <MethodImpl name="Device" type="Device" template="ObjectProperties" region="true"/>
                    <MethodImpl name="Group" type="Group" template="ObjectProperties" region="true"/>
                    <MethodImpl name="Probe" type="Probe" template="ObjectProperties" region="true"/>
                </Region>
                <Region name="Get Multiple Raw Properties" groupOverloads="true">
                    <InlineMethodDef name="GetObjectPropertiesRaw" returns="Dictionary&lt;string, string&gt;" tokenMode="Automatic">
                        <Summary>
                            Retrieves all raw properties and settings of a PRTG Object. Note: objects may have additional properties
                            that cannot be retrieved via this method.
                        </Summary>
                        <ReturnDescription>A dictionary mapping all discoverable properties to raw values.</ReturnDescription>

                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to retrieve settings and properties for."/>
                        <Parameter name="objectType" type="ObjectType" description="The type of object to retrieve settings and properties for."/>

                        <Body expression="true">
                            <Call name="GetObjectPropertiesRawDictionary" args="objectOrId, objectType"/>
                        </Body>
                    </InlineMethodDef>
                    <InlineMethodDef name="GetObjectPropertiesRaw" returns="Dictionary&lt;string, string&gt;" tokenMode="AutomaticDefault">
                        <Summary>
                            Retrieves all raw properties and settings of an unsupported object type. Note: objects may have additional properties
                            that cannot be retrieved via this method.
                        </Summary>
                        <ReturnDescription>A dictionary mapping all discoverable properties to raw values.</ReturnDescription>

                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to retrieve settings and properties for."/>
                        <Parameter name="objectType" type="string" default="null" description="The type of object to retrieve settings and properties for.\nIf this value is null, PRTG will attempt to guess the object type based on the specified &lt;paramref name=&quot;objectOrId&quot;/&gt;."/>

                        <Body expression="true">
                            <Call name="GetObjectPropertiesRawDictionary" args="objectOrId, objectType"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Get Single Typed Property" groupOverloads="false">
                    <InlineMethodDef name="GetObjectProperty" returns="object">
                        <Summary>Retrieves a type safe property from a PRTG Server.</Summary>
                        <ReturnDescription>A type safe representation of the specified property.</ReturnDescription>

                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to retrieve the property from."/>
                        <Parameter name="property" type="ObjectProperty" description="The well known property to retrieve."/>

                        <Body expression="true">
                            <Call name="GetObjectPropertyInternal" args="objectOrId, property"/>
                        </Body>
                    </InlineMethodDef>
                    <InlineMethodDef name="GetObjectProperty" returns="T">
                        <Summary>
                            Retrieves a type safe property from a PRTG Server, cast to its actual type. If the deserialized value is not of the type specified,
                            an &lt;see cref="InvalidCastException"/&gt; will be thrown.
                        </Summary>
                        <ReturnDescription>A type safe representation of the specified property, cast to its actual type.</ReturnDescription>

                        <Exception type="InvalidCastException" description="The deserialized value could not be cast to the specified type."/>

                        <GenericArg name="T" description="The type to cast the object to."/>
                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to retrieve the property from."/>
                        <Parameter name="property" type="ObjectProperty" description="The well known property to retrieve."/>

                        <Body expression="true">
                            ResponseParser.GetTypedProperty&lt;T&gt;(<Call name="GetObjectProperty" args="objectOrId, property"/>)
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Get Single Raw Property" groupOverloads="true">
                    <InlineMethodDef name="GetObjectPropertyRaw" returns="string" tokenMode="AutomaticDefault">
                        <Summary>
                            Retrieves unsupported properties and settings of a PRTG Object.&lt;para/&gt;

                            If the specified property does not exist, a &lt;see cref="PrtgRequestException"/&gt; will be thrown, unless
                            the PRTG Server is not in English, in which case "(Property not found)" will be returned in your server's native language.
                        </Summary>
                        <ReturnDescription>The raw value of the object's property.</ReturnDescription>

                        <Exception type="PrtgRequestException" description="The specified property does not exist and the PRTG Server's language is English."/>
                        
                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object whose property should be retrieved."/>
                        <Parameter name="property" type="string" description="The property of the object to retrieve. This can be typically discovered by inspecting the &quot;name&quot; attribute of the properties' &amp;lt;input/&amp;gt; tag on the Settings page of PRTG.&lt;para/&gt;\nIf the properties name ends in an underscore, this must be included."/>
                        <Parameter name="text" type="bool" default="false" description="If true, displays option properties using their label names instead of their internal numeric values."/>

                        <Body expression="true">
                            <Call name="GetObjectPropertyRawInternal" args="new GetObjectPropertyRawParameters(objectOrId, property, text), property"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Get Single Sub Raw Property" groupOverloads="true">
                    <InlineMethodDef name="GetObjectPropertyRaw" returns="string" tokenMode="AutomaticDefault">
                        <Summary>
                            Retrieves unsupported properties and settings of a PRTG &lt;see cref="ISubObject"/&gt; such as Channels and Notification Triggers.&lt;para/&gt;

                            If the specified property does not exist, a &lt;see cref="PrtgRequestException"/&gt; will be thrown, unless
                            the PRTG Server is not in English, in which case "(Property not found)" will be returned in your server's native language.
                        </Summary>
                        <ReturnDescription>The raw value of the sub object's property.</ReturnDescription>

                        <Exception type="PrtgRequestException" description="The specified property does not exist and the PRTG Server's language is English."/>

                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object whose property should be retrieved."/>
                        <Parameter name="subId" type="int" description="The ID of the sub object whose property should be retrieved."/>
                        <Parameter name="subType" type="string" description="The type of sub object to retrieve the property from."/>
                        <Parameter name="property" type="string" description="The property of the object to retrieve. This can be typically discovered by inspecting the &quot;name&quot; attribute of the properties' &amp;lt;input/&amp;gt; tag on the Settings page of PRTG.&lt;para/&gt;\nIf the properties name ends in an underscore, this must be included."/>
                        <Parameter name="text" type="bool" default="false" description="If true, displays option properties using their label names instead of their internal numeric values."/>

                        <Body expression="true">
                            <Call name="GetObjectPropertyRawInternal" args="new GetObjectPropertyRawParameters(objectOrId, subId, subType, property, text), property"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
            </Region>
            <Region name="Set Object Properties">
                <Region name="Normal">
                    <Region name="Single" groupOverloads="true">
                        <InlineMethodDef name="SetObjectProperty" returns="void">
                            <Summary>
                                Modifies properties and settings of a PRTG Object.&lt;para/&gt;
                                Each &lt;see cref="ObjectProperty"/&gt; corresponds with a Property of a type derived from &lt;see cref="ObjectSettings"/>.&lt;para/&gt;
                                If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
                            </Summary>

                            <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object whose properties should be modified."/>
                            <Parameter name="property" type="ObjectProperty" description="The property of the object to modify."/>
                            <Parameter name="value" type="object" description="The value to set the object's property to."/>

                            <Body expression="true">
                                <Call name="SetObjectProperty" args="new[] {objectOrId.GetId()}, property, value"/>
                            </Body>
                        </InlineMethodDef>
                        <InlineMethodDef name="SetObjectProperty" returns="void">
                            <Summary>
                                Modifies properties and settings of one or more PRTG Objects.&lt;para/&gt;
                                Each &lt;see cref="ObjectProperty"/&gt; corresponds with a Property of a type derived from &lt;see cref="ObjectSettings"/&gt;.&lt;para/&gt;
                                If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
                            </Summary>

                            <Parameter name="objectIds" type="int[]" description="The IDs of the objects whose properties should be modified."/>
                            <Parameter name="property" type="ObjectProperty" description="The property of each object to modify."/>
                            <Parameter name="value" type="object" description="The value to set each object's property to."/>

                            <Body expression="true">
                                <Call name="SetObjectProperty" args="objectIds, new PropertyParameter(property, value)"/>
                            </Body>
                            <TokenBody expression="true">
                                <Call name="SetObjectProperty" args="objectIds, new[]{new PropertyParameter(property, value)}"/>
                            </TokenBody>
                        </InlineMethodDef>
                    </Region>
                    <Region name="Multiple" groupOverloads="true">
                        <InlineMethodDef name="SetObjectProperty" returns="void">
                            <Summary>
                                Modifies multiple properties of a PRTG Object.&lt;para/&gt;
                                Each &lt;see cref="ObjectProperty"/&gt; corresponds with a Property of a type derived from &lt;see cref="ObjectSettings"/&gt;.&lt;para/&gt;
                                If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
                            </Summary>

                            <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object whose properties should be modified."/>
                            <Parameter name="parameters" type="params PropertyParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="true">
                                <Call name="SetObjectProperty" args="new[] {objectOrId.GetId()}, parameters"/>
                            </Body>
                        </InlineMethodDef>
                        <InlineMethodDef name="SetObjectProperty" returns="void" tokenMode="MandatoryCall">
                            <Summary>
                                Modifies multiple properties of one or more PRTG Objects.&lt;para/&gt;
                                Each &lt;see cref="ObjectProperty"/&gt; corresponds with a Property of a type derived from &lt;see cref="ObjectSettings"/&gt;.&lt;para/&gt;
                                If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
                            </Summary>

                            <Parameter name="objectIds" type="int[]" description="The IDs of the objects whose properties should be modified."/>
                            <Parameter name="parameters" type="params PropertyParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="true">
                                <Call name="SetObjectProperty" args="{Alias:GetParameters}, objectIds.Length">
                                    <Call name="CreateSetObjectPropertyParameters" args="objectIds, parameters" alias="GetParameters" needsToken="true"/>
                                </Call>
                            </Body>
                        </InlineMethodDef>
                    </Region>
                </Region>
                <Region name="Channel">
                    <Region name="Single" groupOverloads="true">
                        <InlineMethodDef name="SetChannelProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies a property of a PRTG Channel.</Summary>

                            <Parameter name="channel" type="Channel" description="The channel to modify."/>
                            <Parameter name="property" type="ChannelProperty" description="The property whose value should be modified."/>
                            <Parameter name="value" type="object" description="The value to set the property to."/>

                            <Body expression="true">
                                <Call name="SetChannelProperty" args="new[] {AssertHasValue(channel, nameof(channel))}, property, value"/>
                            </Body>
                        </InlineMethodDef>
                        <InlineMethodDef name="SetChannelProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies a property of one or more PRTG Channels.</Summary>

                            <Parameter name="channels" type="IEnumerable&lt;Channel&gt;" description="The channels to modify."/>
                            <Parameter name="property" type="ChannelProperty" description="The property of each channel to modify."/>
                            <Parameter name="value" type="object" description="The value to set each channel's property to."/>

                            <Body expression="true">
                                <Call name="SetChannelProperty" args="AssertHasValue(channels, nameof(channels)), new ChannelParameter(property, value)"/>
                            </Body>
                            <TokenBody expression="true">
                                <Call name="SetChannelProperty" args="AssertHasValue(channels, nameof(channels)), new[]{new ChannelParameter(property, value)}"/>
                            </TokenBody>
                        </InlineMethodDef>
                    </Region>
                    <Region name="Multiple" groupOverloads="true">
                        <InlineMethodDef name="SetChannelProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies one or more properties of a PRTG Channel.</Summary>

                            <Parameter name="channel" type="Channel" description="The channel to modify."/>
                            <Parameter name="parameters" type="params ChannelParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="true">
                                <Call name="SetChannelProperty" args="new[] {AssertHasValue(channel, nameof(channel))}, parameters"/>
                            </Body>
                        </InlineMethodDef>
                        <InlineMethodDef name="SetChannelProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies multiple properties of one or more PRTG Channels.</Summary>

                            <Parameter name="channels" type="IEnumerable&lt;Channel&gt;" description="The channels to modify."/>
                            <Parameter name="parameters" type="params ChannelParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="true">
                                <Call name="SetChannelPropertyInternal" args="AssertHasValue(channels, nameof(channels)), null, null, parameters"/>
                            </Body>
                        </InlineMethodDef>
                    </Region>
                    <Region name="Manual" groupOverloads="true">
                        <InlineMethodDef name="SetChannelProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies a property of a PRTG Channel based on its Sensor ID and Channel ID.</Summary>

                            <Parameter name="sensorOrId" type="Either&lt;Sensor, int&gt;" description="The sensor or ID of the sensor whose channels should be modified."/>
                            <Parameter name="channelId" type="int" description="The ID of the channel to modify."/>
                            <Parameter name="property" type="ChannelProperty" description="The property of the channel to modify."/>
                            <Parameter name="value" type="object" description="The value to set the channel's property to."/>

                            <Body expression="true">
                                <Call name="SetChannelProperty" args="new[] {sensorOrId.GetId()}, channelId, property, value"/>
                            </Body>
                        </InlineMethodDef>
                        <InlineMethodDef name="SetChannelProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies a property of PRTG Channels with a given Channel ID across one or more PRTG Sensors.</Summary>

                            <Parameter name="sensorIds" type="int[]" description="The IDs of the sensors whose channels should be modified."/>
                            <Parameter name="channelId" type="int" description="The ID of the channel of each sensor to modify."/>
                            <Parameter name="property" type="ChannelProperty" description="The property of each channel to modify."/>
                            <Parameter name="value" type="object" description="The value to set each channel's property to."/>

                            <Body expression="true">
                                <Call name="SetChannelProperty" args="sensorIds, channelId, new ChannelParameter(property, value)"/>
                            </Body>
                            <TokenBody expression="true">
                                <Call name="SetChannelProperty" args="sensorIds, channelId, new[]{new ChannelParameter(property, value)}"/>
                            </TokenBody>
                        </InlineMethodDef>
                    </Region>
                    <Region name="Manual: Multiple" groupOverloads="true">
                        <InlineMethodDef name="SetChannelProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies one or more properties of a PRTG Channel based on its Sensor ID and Channel ID.</Summary>

                            <Parameter name="sensorOrId" type="Either&lt;Sensor, int&gt;" description="The sensor or ID of the sensor whose channels should be modified."/>
                            <Parameter name="channelId" type="int" description="The ID of the channel to modify."/>
                            <Parameter name="parameters" type="params ChannelParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="true">
                                <Call name="SetChannelProperty" args="new[] {sensorOrId.GetId()}, channelId, parameters"/>
                            </Body>
                        </InlineMethodDef>
                        <InlineMethodDef name="SetChannelProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies multiple properties of PRTG Channels with a given Channel ID across one or more PRTG Sensors.</Summary>

                            <Parameter name="sensorIds" type="int[]" description="The IDs of the sensors whose channels should be modified."/>
                            <Parameter name="channelId" type="int" description="The ID of the channel of each sensor to modify."/>
                            <Parameter name="parameters" type="params ChannelParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="true">
                                <Call name="SetChannelPropertyInternal" args="null, sensorIds, channelId, parameters"/>
                            </Body>
                        </InlineMethodDef>
                    </Region>
                </Region>
                <Region name="Trigger">
                    <Region name="Single" groupOverloads="true">
                        <InlineMethodDef name="SetTriggerProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies a property of a PRTG Notification Trigger.</Summary>

                            <Parameter name="trigger" type="NotificationTrigger" description="The notification trigger to modify."/>
                            <Parameter name="property" type="TriggerProperty" description="The property whose value should be modified."/>
                            <Parameter name="value" type="object" description="The value to set the property to."/>

                            <Body expression="true">
                                <Call name="SetTriggerProperty" args="new[] {AssertHasValue(trigger, nameof(trigger))}, property, value"/>
                            </Body>
                        </InlineMethodDef>
                        <InlineMethodDef name="SetTriggerProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies a property of one or more PRTG Notification Triggers.</Summary>

                            <Parameter name="triggers" type="IEnumerable&lt;NotificationTrigger&gt;" description="The notification triggers to modify."/>
                            <Parameter name="property" type="TriggerProperty" description="The property of each trigger to modify."/>
                            <Parameter name="value" type="object" description="The value to set each trigger's property to."/>

                            <Body expression="true">
                                <Call name="SetTriggerPropertyInternal" args="AssertHasValue(triggers, nameof(triggers)), new TriggerParameter(property, value)"/>
                            </Body>
                            <TokenBody expression="true">
                                <Call name="SetTriggerPropertyInternal" args="AssertHasValue(triggers, nameof(triggers)), new[]{new TriggerParameter(property, value)}"/>
                            </TokenBody>
                        </InlineMethodDef>
                    </Region>
                    <Region name="Multiple" groupOverloads="true">
                        <InlineMethodDef name="SetTriggerProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies one or more properties of a PRTG Notification Trigger.</Summary>

                            <Parameter name="trigger" type="NotificationTrigger" description="The notification trigger to modify."/>
                            <Parameter name="parameters" type="params TriggerParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="true">
                                <Call name="SetTriggerProperty" args="new[] {AssertHasValue(trigger, nameof(trigger))}, parameters"/>
                            </Body>
                        </InlineMethodDef>
                        <InlineMethodDef name="SetTriggerProperty" returns="void" tokenMode="AutomaticAll">
                            <Summary>Modifies multiple properties of one or more PRTG Notification Triggers.</Summary>

                            <Parameter name="triggers" type="IEnumerable&lt;NotificationTrigger&gt;" description="The notification triggers to modify."/>
                            <Parameter name="parameters" type="params TriggerParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="true">
                                <Call name="SetTriggerPropertyInternal" args="AssertHasValue(triggers, nameof(triggers)), parameters"/>
                            </Body>
                        </InlineMethodDef>
                    </Region>
                    <Region name="Manual" groupOverloads="true">
                        <InlineMethodDef name="SetTriggerProperty" returns="void">
                            <Summary>Modifies a property of a PRTG Notification Trigger based on its Object ID and Sub ID.</Summary>

                            <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object whose notification triggers should be modified."/>
                            <Parameter name="triggerId" type="int" description="The Sub ID of the notification trigger to modify."/>
                            <Parameter name="property" type="TriggerProperty" description="The property of the notification trigger to modify."/>
                            <Parameter name="value" type="object" description="The value to set the notification trigger's property to."/>

                            <Body expression="true">
                                <Call name="SetTriggerProperty" args="objectOrId, triggerId, new[]{new TriggerParameter(property, value)}"/>
                            </Body>
                        </InlineMethodDef>
                    </Region>
                    <Region name="Manual: Multiple" groupOverloads="true">
                        <InlineMethodDef name="SetTriggerProperty" returns="void">
                            <Summary>Modifies one or more properties of a PRTG Notification Trigger based on its Object ID and Sub ID.</Summary>

                            <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object whose notification triggers should be modified."/>
                            <Parameter name="triggerId" type="int" description="The ID of the notification trigger to modify."/>
                            <Parameter name="parameters" type="params TriggerParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="false">
                                var triggers = <Call name="GetNotificationTriggers" args="objectOrId.GetId()"/>;
                                var trigger = triggers.Where(t => t.SubId == triggerId &amp;&amp; !t.Inherited).ToList().SingleObject(triggerId, "SubId");

                                <Call name="SetTriggerProperty" args="trigger, parameters"/>;
                            </Body>
                        </InlineMethodDef>
                    </Region>
                </Region>
                <Region name="Custom">
                    <Region name="Single" groupOverloads="true">
                        <InlineMethodDef name="SetObjectPropertyRaw" returns="void">
                            <Summary>Modifies unsupported properties and settings of a PRTG Object.</Summary>

                            <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object whose properties should be modified."/>
                            <Parameter name="property" type="string" description="The property of the object to modify. This can be typically discovered by inspecting the &quot;name&quot; attribute of the properties' &amp;lt;input/&amp;gt; tag on the Settings page of PRTG.&lt;para/&gt;\nIf the properties name ends in an underscore, this must be included."/>
                            <Parameter name="value" type="string" description="The value to set the object's property to. For radio buttons and dropdown lists, this is the integer found in the 'value' attribute."/>

                            <Body expression="true">
                                <Call name="SetObjectPropertyRaw" args="new[] {objectOrId.GetId()}, property, value"/>
                            </Body>
                        </InlineMethodDef>
                        <InlineMethodDef name="SetObjectPropertyRaw" returns="void">
                            <Summary>Modifies unsupported properties and settings of one or more PRTG Objects.</Summary>

                            <Parameter name="objectIds" type="int[]" description="The IDs of the objects whose properties should be modified."/>
                            <Parameter name="property" type="string" description="The property of each object to modify. This can be typically discovered by inspecting the &quot;name&quot; attribute of the properties' &amp;lt;input/&amp;gt; tag on the Settings page of PRTG.&lt;para/&gt;\nIf the properties name ends in an underscore, this must be included."/>
                            <Parameter name="value" type="string" description="The value to set each object's property to. For radio buttons and dropdown lists, this is the integer found in the 'value' attribute."/>

                            <Body expression="true">
                                <Call name="SetObjectPropertyRaw" args="objectIds, new CustomParameter(property, value)"/>
                            </Body>
                            <TokenBody expression="true">
                                <Call name="SetObjectPropertyRaw" args="objectIds, new[]{new CustomParameter(property, value)}"/>
                            </TokenBody>
                        </InlineMethodDef>
                    </Region>
                    <Region name="Multiple" groupOverloads="true">
                        <InlineMethodDef name="SetObjectPropertyRaw" returns="void">
                            <Summary>Modifies multiple unsupported properties of a PRTG Object.</Summary>

                            <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object whose properties should be modified."/>
                            <Parameter name="parameters" type="params CustomParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="true">
                                <Call name="SetObjectPropertyRaw" args="new[] {objectOrId.GetId()}, parameters"/>
                            </Body>
                        </InlineMethodDef>
                        <InlineMethodDef name="SetObjectPropertyRaw" returns="void" tokenMode="MandatoryCall">
                            <Summary>Modifies multiple unsupported properties of one or more PRTG Objects.</Summary>

                            <Parameter name="objectIds" type="int[]" description="The IDs of the objects whose properties should be modified."/>
                            <Parameter name="parameters" type="params CustomParameter[]" description="A set of parameters describing the properties and their values to process."/>

                            <Body expression="true">
                                <Call name="SetObjectProperty" args="new SetObjectPropertyParameters(objectIds, parameters), objectIds.Length"/>
                            </Body>
                        </InlineMethodDef>
                    </Region>
                </Region>
            </Region>
            <Region name="System Administration">
                <InlineMethodDef name="BackupConfigDatabase" returns="void" tokenMode="AutomaticNamed">
                    <Summary>
                        Requests PRTG generate a backup of the PRTG Configuration Database.&lt;para/&gt;
                        When executed, this method will request PRTG store a backup of its configuration database under
                        the Configuration Auto-Backups folder after first writing the current running configuration to disk.&lt;para/&gt;
                        Depending on the size of your database, this may take several seconds to complete. Note that PRTG always creates
                        its backup asynchronously; as such when this method returns the backup may not have fully completed.&lt;para/&gt;
                        By default, configuration backups are stored under C:\ProgramData\Paessler\PRTG Network Monitor\Configuration Auto-Backups.
                    </Summary>

                    <Body expression="true">
                        <Call name="RequestEngine.ExecuteRequest" args="new CommandFunctionParameters(CommandFunction.SaveNow)"/>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="ClearSystemCache" returns="void" tokenMode="AutomaticNamed">
                    <Summary>
                        Clears cached data used by PRTG, including map, graph and authentication caches. Note: clearing certain cache types may result in a restart of the PRTG Core Server.
                        See each cache type for further details.
                    </Summary>

                    <Parameter name="cacheType" type="SystemCacheType" description="The type of cache to clear. Note: clearing certain cache types may result in a restart of the PRTG Core Server.\nSee each cache type for further details."/>

                    <Body expression="true">
                        <Call name="RequestEngine.ExecuteRequest" args="new ClearSystemCacheParameters(cacheType)"/>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="LoadConfigFiles" returns="void" tokenMode="AutomaticNamed">
                    <Summary>Reloads config files including sensor lookups, device icons and report templates used by PRTG.</Summary>

                    <Parameter name="fileType" type="ConfigFileType" description="The type of files to reload."/>

                    <Body expression="true">
                        <Call name="RequestEngine.ExecuteRequest" args="new LoadConfigFilesParameters(fileType)"/>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="RestartProbe" returns="void" tokenMode="Manual">
                    <Summary>
                        Restarts the PRTG Probe Service of a specified PRTG Probe.&lt;para/&gt;
                        By default, PrtgAPI will wait 5 seconds between each probing attempt to confirm whether all probes have successfully restarted.&lt;para/&gt;
                        If a progress callback is specified, it is up to the programmer to specify the wait duration between each request. If at any time
                        the progress callback returns false, PrtgAPI will stop waiting for all probes to restart.
                    </Summary>

                    <Parameter name="probeOrId" type="Either&lt;Probe, int&gt;" description="The probe or ID of the probe to restart."/>
                    <Parameter name="waitForRestart" type="bool" default="false" description="Whether to wait for the Probe Service on all probes to restart before completing this method."/>
                    <Parameter name="progressCallback" type="Func&lt;ProbeRestartProgress, bool&gt;" default="null" description="A callback method to execute upon each request against PRTG to check whether all probes have restarted."/>
                    <Parameter name="token" type="CancellationToken" default="default(CancellationToken)" description="A cancellation token to use when waiting for all probes to restart. If cancellation is requested, this method will abort waiting for any remaining probes to restart."/>
                    
                    <Body expression="true">
                        <Call name="RestartProbe" args="new[] {probeOrId.GetId()}, waitForRestart, p =&gt; progressCallback(p.First()), token"/>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="RestartProbe" returns="void" tokenMode="Manual">
                    <Summary>
                        Restarts the PRTG Probe Service of one or more PRTG Probes. If no probe ID is specified, the PRTG Probe Service will be restarted on all PRTG Probes.&lt;para/&gt;
                        By default, PrtgAPI will wait 5 seconds between each probing attempt to confirm whether all probes have successfully restarted.&lt;para/&gt;
                        If a progress callback is specified, it is up to the programmer to specify the wait duration between each request. If at any time
                        the progress callback returns false, PrtgAPI will stop waiting for all probes to restart.
                    </Summary>

                    <Parameter name="probeIds" type="int[]" default="null" description="The IDs of the probe to restart. If this value is null or empty, the PRTG Probe Service of all probes will be restarted."/>
                    <Parameter name="waitForRestart" type="bool" default="false" description="Whether to wait for the Probe Service on all probes to restart before completing this method."/>
                    <Parameter name="progressCallback" type="Func&lt;ProbeRestartProgress[], bool&gt;" default="null" description="A callback method to execute upon each request against PRTG to check whether all probes have restarted."/>
                    <Parameter name="token" type="CancellationToken" default="default(CancellationToken)" description="A cancellation token to use when waiting for all probes to restart. If cancellation is requested, this method will abort waiting for any remaining probes to restart."/>
                    
                    <Body expression="true">
                        <Call name="RestartProbeInternal" args="probeIds, waitForRestart, progressCallback, token"/>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="RestartCore" returns="void" tokenMode="Manual">
                    <Summary>
                        Restarts the PRTG Core Service. This will cause PRTG to disconnect all users and become completely unavailable while the service restarts.&lt;para/&gt;
                        If PRTG is part of a cluster, only the server specified by the current &lt;see cref="PrtgClient"/&gt; will be restarted.&lt;para/&gt;
                        By default, PrtgAPI will wait 5 seconds between each probing attempt to confirm whether PRTG has successfully restarted.&lt;para/&gt;
                        If a progress callback is specified, it is up to the programmer to specify the wait duration between each request. If at any time
                        the progress callback returns false, PrtgAPI will stop waiting for the core to restart.
                    </Summary>

                    <Parameter name="waitForRestart" type="bool" default="false" description="Whether wait for the Core Service to restart before completing this method."/>
                    <Parameter name="progressCallback" type="Func&lt;RestartCoreStage, bool&gt;" default="null" description="A callback method to execute upon each request against PRTG to check whether PRTG has restarted."/>
                    <Parameter name="token" type="CancellationToken" default="default(CancellationToken)" description="A cancellation token to use when waiting for the Core Service to restart. If cancellation is requested, this method will abort waiting for the core to restart."/>

                    <Body expression="true">
                        <Call name="RestartCoreInternal" args="waitForRestart, progressCallback, token"/>
                    </Body>
                </InlineMethodDef>
                <InlineMethodDef name="ApproveProbe" returns="void">
                    <Summary>Approves or denies a newly installed probe for use within PRTG.</Summary>
                    <Exception type="InvalidOperationException" description="The specified object ID is not a probe or is a probe that has already been approved."/>
                    
                    <Parameter name="probeOrId" type="Either&lt;Probe, int&gt;" description="The probe or ID of the probe to set the approval status of."/>
                    <Parameter name="action" type="ProbeApproval" description="The approval action to perform for the probe."/>

                    <Body expression="false">
                        var approved = <Call name="GetProbeApprovalStatus" args="probeOrId"/>;

                        if (approved)
                            throw new InvalidOperationException($"Cannot change approval status of probe with ID '{probeOrId}': probe has already been approved.");

                        <Call name="ApproveProbeInternal" args="probeOrId, action"/>;
                    </Body>
                </InlineMethodDef>
            </Region>
            <Region name="Organization">
                <Region name="Refresh Objects" groupOverloads="true">
                    <InlineMethodDef name="RefreshObject" returns="void" tokenMode="AutomaticNamed">
                        <Summary>Requests an object or any children of one or more objects refresh themselves immediately.</Summary>

                        <Parameter name="objectIds" type="params int[]" description="The IDs of the Sensors and/or the IDs of the Probes, Groups or Devices whose child sensors should be refreshed."/>

                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new RefreshObjectParameters(objectIds)"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Set Position" groupOverloads="true">
                    <InlineMethodDef name="SetPosition" returns="void" tokenMode="AutomaticNamed">
                        <Summary>Moves the position of an object up or down under its parent within the PRTG User Interface.</Summary>

                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to reposition."/>
                        <Parameter name="position" type="Position" description="The direction to move in."/>

                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new SetPositionParameters(objectOrId, position)"/>
                        </Body>
                    </InlineMethodDef>
                    <InlineMethodDef name="SetPosition" returns="void" tokenMode="AutomaticNamed">
                        <Summary>Sets the absolute position of an object under its parent within the PRTG User Interface.</Summary>

                        <Parameter name="obj" type="SensorOrDeviceOrGroupOrProbe" description="The object to reposition."/>
                        <Parameter name="position" type="int" description="The position to move the object to. If this value is higher than the total number of objects under the parent node, the object will be moved to the last possible position."/>

                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new SetPositionParameters(obj, position)"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Move Objects" groupOverloads="true">
                    <InlineMethodDef name="MoveObject" returns="void" tokenMode="AutomaticNamed">
                        <Summary>Moves a device or group (excluding the root group) to another group or probe within PRTG.</Summary>

                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The device or group to move."/>
                        <Parameter name="destination" type="Either&lt;GroupOrProbe, int&gt;" description="The group or probe to move the object to."/>

                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new MoveObjectParameters(objectOrId, destination)"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Sort Alphabetically" groupOverloads="true">
                    <InlineMethodDef name="SortAlphabetically" returns="void" tokenMode="AutomaticNamed">
                        <Summary>Sorts the children of a device, group or probe alphabetically.</Summary>

                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to sort."/>

                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new SortAlphabeticallyParameters(objectOrId)"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Remove Object" groupOverloads="true">
                    <InlineMethodDef name="RemoveObject" returns="void" tokenMode="AutomaticNamed">
                        <Summary>Permanently removes one or more objects such as a Sensor, Device, Group or Probe from PRTG. This cannot be undone.</Summary>

                        <Parameter name="objectIds" type="params int[]" description="IDs of the objects to remove."/>

                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new DeleteParameters(objectIds)"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
                <Region name="Rename Object" groupOverloads="true">
                    <InlineMethodDef name="RenameObject" returns="void" tokenMode="AutomaticNamed">
                        <Summary>Renames an object such as a Sensor, Device, Group or Probe within PRTG.</Summary>

                        <Parameter name="objectOrId" type="Either&lt;IPrtgObject, int&gt;" description="The object or ID of the object to rename."/>
                        <Parameter name="name" type="string" description="New name to give the object."/>

                        <Body expression="true">
                            <Call name="RenameObject" args="new[] {objectOrId.GetId()}, name"/>
                        </Body>
                    </InlineMethodDef>
                    <InlineMethodDef name="RenameObject" returns="void" tokenMode="AutomaticNamed">
                        <Summary>Renames one or more Sensors, Devices, Groups or Probes within PRTG.</Summary>

                        <Parameter name="objectIds" type="int[]" description="IDs of the objects to rename."/>
                        <Parameter name="name" type="string" description="New name to give the objects."/>

                        <Body expression="true">
                            <Call name="RequestEngine.ExecuteRequest" args="new RenameParameters(objectIds, name)"/>
                        </Body>
                    </InlineMethodDef>
                </Region>
            </Region>
        </Region>
        
        <!--<InlineMethodDef name="" returns="">
                    <Summary></Summary>
                    <ReturnDescription></ReturnDescription>

                    <Parameter name="" type="" description=""/>
                    <Parameter name="" type="" description=""/>
                    <Parameter name="" type="" description=""/>

                    <Body expression="true">
                        <Call name="" args=""/>
                    </Body>
                </InlineMethodDef>-->
    </Methods>
</Document>