/********************************************************************************************
 * This code was generated by a tool.                                                       *
 * Please do not modify this file directly - modify PrtgClient.Methods.Generated.tt instead *
 ********************************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using PrtgAPI.Linq;
using PrtgAPI.Linq.Expressions;
using PrtgAPI.Parameters;
using PrtgAPI.Request;
using PrtgAPI.Tree;
using PrtgAPI.Tree.Converters.Tree;
using PrtgAPI.Tree.Progress;

namespace PrtgAPI
{
    public partial class PrtgClient
    {
    #region Object Data
        #region Objects
            #region Single

        /// <summary>
        /// Retrieves an object of an unspecified type based on its object ID.<para/>
        /// If an object with the specified object ID does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> exception is thrown.
        /// </summary>
        /// <param name="id">The ID of the object to retrieve.</param>
        /// <param name="resolve">Whether to resolve the resultant object to its most derived <see cref="PrtgObject"/> type. If the object type
        /// is not supported by PrtgAPI, the original <see cref="PrtgObject"/> is returned.</param>
        /// <exception cref="InvalidOperationException">The specified object does not exist or multiple objects were resolved with the specified ID.</exception>
        /// <returns>The object with the specified ID.</returns>
        public PrtgObject GetObject(int id, bool resolve = false) =>
            GetObjectInternal(id, resolve);

        /// <summary>
        /// Asynchronously retrieves an object of an unspecified type based on its object ID.<para/>
        /// If an object with the specified object ID does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> exception is thrown.
        /// </summary>
        /// <param name="id">The ID of the object to retrieve.</param>
        /// <param name="resolve">Whether to resolve the resultant object to its most derived <see cref="PrtgObject"/> type. If the object type
        /// is not supported by PrtgAPI, the original <see cref="PrtgObject"/> is returned.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified object does not exist or multiple objects were resolved with the specified ID.</exception>
        /// <returns>The object with the specified ID.</returns>
        public async Task<PrtgObject> GetObjectAsync(int id, bool resolve = false, CancellationToken token = default(CancellationToken)) =>
            await GetObjectInternalAsync(id, resolve, token).ConfigureAwait(false);

            #endregion
            #region Multiple

        /// <summary>
        /// Retrieves all uniquely identifiable objects from a PRTG Server.
        /// </summary>
        /// <returns>A list of all objects on a PRTG Server.</returns>
        public List<PrtgObject> GetObjects() => GetObjects(new PrtgObjectParameters());

        /// <summary>
        /// Asynchronously retrieves all uniquely identifiable objects from a PRTG Server.
        /// </summary>
        /// <returns>A list of all objects on a PRTG Server.</returns>
        public async Task<List<PrtgObject>> GetObjectsAsync() =>
            await GetObjectsAsync(CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all uniquely identifiable objects from a PRTG Server with a specified cancellation token.
        /// </summary>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of all objects on a PRTG Server.</returns>
        public async Task<List<PrtgObject>> GetObjectsAsync(CancellationToken token) =>
            await GetObjectsAsync(new PrtgObjectParameters(), token).ConfigureAwait(false);

        /// <summary>
        /// Streams all uniquely identifiable objects from a PRTG Server.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<PrtgObject> StreamObjects(bool serial = false) => StreamObjects(new PrtgObjectParameters(), serial);

            #endregion
            #region Filter (Property, Value)

        /// <summary>
        /// Retrieves uniquely identifiable objects from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of objects that match the specified search criteria.</returns>
        public List<PrtgObject> GetObjects(Property property, object value) =>
            GetObjects(new SearchFilter(property, value));

        /// <summary>
        /// Asynchronously retrieves uniquely identifiable objects from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of objects that match the specified search criteria.</returns>
        public async Task<List<PrtgObject>> GetObjectsAsync(Property property, object value) =>
            await GetObjectsAsync(property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves uniquely identifiable objects from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of objects that match the specified search criteria.</returns>
        public async Task<List<PrtgObject>> GetObjectsAsync(Property property, object value, CancellationToken token) =>
            await GetObjectsAsync(new[]{new SearchFilter(property, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Streams uniquely identifiable objects from a PRTG Server based on the value of a certain property.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<PrtgObject> StreamObjects(Property property, object value) =>
            StreamObjects(new SearchFilter(property, value));

            #endregion
            #region Filter (Property, Operator, Value)

        /// <summary>
        /// Retrieves uniquely identifiable objects from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of objects that match the specified search criteria.</returns>
        public List<PrtgObject> GetObjects(Property property, FilterOperator @operator, object value) =>
            GetObjects(new SearchFilter(property, @operator, value));

        /// <summary>
        /// Asynchronously retrieves uniquely identifiable objects from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of objects that match the specified search criteria.</returns>
        public async Task<List<PrtgObject>> GetObjectsAsync(Property property, FilterOperator @operator, object value) =>
            await GetObjectsAsync(property, @operator, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves uniquely identifiable objects from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of objects that match the specified search criteria.</returns>
        public async Task<List<PrtgObject>> GetObjectsAsync(Property property, FilterOperator @operator, object value, CancellationToken token) =>
            await GetObjectsAsync(new[]{new SearchFilter(property, @operator, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Streams uniquely identifiable objects from a PRTG Server based on the value of a certain property.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<PrtgObject> StreamObjects(Property property, FilterOperator @operator, object value) =>
            StreamObjects(new SearchFilter(property, @operator, value));

            #endregion
            #region Filter (Array)

        /// <summary>
        /// Retrieves uniquely identifiable objects from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of objects that match the specified search criteria.</returns>
        public List<PrtgObject> GetObjects(params SearchFilter[] filters) =>
            GetObjects(new PrtgObjectParameters(filters));

        /// <summary>
        /// Asynchronously retrieves uniquely identifiable objects from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of objects that match the specified search criteria.</returns>
        public async Task<List<PrtgObject>> GetObjectsAsync(params SearchFilter[] filters) =>
            await GetObjectsAsync(filters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves uniquely identifiable objects from a PRTG Server, filtering for objects based on one or more conditions with a specified cancellation token.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of objects that match the specified search criteria.</returns>
        public async Task<List<PrtgObject>> GetObjectsAsync(SearchFilter[] filters, CancellationToken token) =>
            await GetObjectsAsync(new PrtgObjectParameters(filters), token).ConfigureAwait(false);

        /// <summary>
        /// Streams uniquely identifiable objects from a PRTG Server, filtering for objects based on one or more conditions.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<PrtgObject> StreamObjects(params SearchFilter[] filters) =>
            StreamObjects(new PrtgObjectParameters(filters));

            #endregion
            #region Parameters

        /// <summary>
        /// Retrieves uniquely identifiable objects from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Objects.</param>
        /// <returns>A list of objects that match the specified parameters.</returns>
        public List<PrtgObject> GetObjects(PrtgObjectParameters parameters) =>
            GetObjects(parameters, CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves uniquely identifiable objects from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Objects.</param>
        /// <returns>A list of objects that match the specified parameters.</returns>
        public async Task<List<PrtgObject>> GetObjectsAsync(PrtgObjectParameters parameters) =>
            await GetObjectsAsync(parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Streams uniquely identifiable objects from a PRTG Server using a custom set of parameters.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Objects.</param>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<PrtgObject> StreamObjects(PrtgObjectParameters parameters, bool serial = false) =>
            ObjectEngine.StreamObjects<PrtgObject, PrtgObjectParameters>(parameters, serial);

            #endregion
            #region Parameters (Cancellation Token)

        /// <summary>
        /// Retrieves uniquely identifiable objects from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Objects.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of objects that match the specified parameters.</returns>
        public List<PrtgObject> GetObjects(PrtgObjectParameters parameters, CancellationToken token) =>
            ObjectEngine.GetObjects<PrtgObject>(parameters, token: token).OrderBy(o => o.Id).ToList();

        /// <summary>
        /// Asynchronously retrieves uniquely identifiable objects from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Objects.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of objects that match the specified parameters.</returns>
        public async Task<List<PrtgObject>> GetObjectsAsync(PrtgObjectParameters parameters, CancellationToken token) =>
            (await ObjectEngine.GetObjectsAsync<PrtgObject>(parameters, token: token).ConfigureAwait(false)).OrderBy(o => o.Id).ToList();

            #endregion
        #endregion
        #region Sensors
            #region Single

        /// <summary>
        /// Retrieves a sensor with a specified ID from a PRTG Server.<para/>
        /// If the sensor does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the sensor to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified sensor does not exist or multiple sensors were resolved with the specified ID.</exception>
        /// <returns>The sensor with the specified ID.</returns>
        public Sensor GetSensor(int id) =>
            GetSensors(Property.Id, id).SingleObject(id);

        /// <summary>
        /// Asynchronously retrieves a sensor with a specified ID from a PRTG Server.<para/>
        /// If the sensor does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the sensor to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified sensor does not exist or multiple sensors were resolved with the specified ID.</exception>
        /// <returns>The sensor with the specified ID.</returns>
        public async Task<Sensor> GetSensorAsync(int id) =>
            await GetSensorAsync(id, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a sensor with a specified ID from a PRTG Server with a specified cancellation token.<para/>
        /// If the sensor does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the sensor to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified sensor does not exist or multiple sensors were resolved with the specified ID.</exception>
        /// <returns>The sensor with the specified ID.</returns>
        public async Task<Sensor> GetSensorAsync(int id, CancellationToken token) =>
            (await GetSensorsAsync(Property.Id, id, token).ConfigureAwait(false)).SingleObject(id);

            #endregion
            #region Multiple

        /// <summary>
        /// Retrieves all sensors from a PRTG Server.
        /// </summary>
        /// <returns>A list of all sensors on a PRTG Server.</returns>
        public List<Sensor> GetSensors() => GetSensors(new SensorParameters());

        /// <summary>
        /// Asynchronously retrieves all sensors from a PRTG Server.
        /// </summary>
        /// <returns>A list of all sensors on a PRTG Server.</returns>
        public async Task<List<Sensor>> GetSensorsAsync() =>
            await GetSensorsAsync(CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all sensors from a PRTG Server with a specified cancellation token.
        /// </summary>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of all sensors on a PRTG Server.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(CancellationToken token) =>
            await GetSensorsAsync(new SensorParameters(), token).ConfigureAwait(false);

        /// <summary>
        /// Streams all sensors from a PRTG Server.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<Sensor> StreamSensors(bool serial = false) => StreamSensors(new SensorParameters(), serial);

            #endregion
            #region Sensor Status

        /// <summary>
        /// Retrieves sensors from a PRTG Server of one or more statuses.
        /// </summary>
        /// <param name="statuses">A list of sensor statuses to filter for.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public List<Sensor> GetSensors(params Status[] statuses) =>
            GetSensors(new SensorParameters { Status = statuses });

        /// <summary>
        /// Asynchronously retrieves sensors from a PRTG Server of one or more statuses.
        /// </summary>
        /// <param name="statuses">A list of sensor statuses to filter for.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(params Status[] statuses) =>
            await GetSensorsAsync(statuses, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves sensors from a PRTG Server of one or more statuses with a specified cancellation token.
        /// </summary>
        /// <param name="statuses">A list of sensor statuses to filter for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(Status[] statuses, CancellationToken token) =>
            await GetSensorsAsync(new SensorParameters { Status = statuses }, token).ConfigureAwait(false);

        /// <summary>
        /// Streams sensors from a PRTG Server of one or more statuses.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="statuses">A list of sensor statuses to filter for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Sensor> StreamSensors(params Status[] statuses) =>
            StreamSensors(new SensorParameters { Status = statuses });

            #endregion
            #region Filter (Property, Value)

        /// <summary>
        /// Retrieves sensors from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public List<Sensor> GetSensors(Property property, object value) =>
            GetSensors(new SearchFilter(property, value));

        /// <summary>
        /// Asynchronously retrieves sensors from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(Property property, object value) =>
            await GetSensorsAsync(property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves sensors from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(Property property, object value, CancellationToken token) =>
            await GetSensorsAsync(new[]{new SearchFilter(property, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Streams sensors from a PRTG Server based on the value of a certain property.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Sensor> StreamSensors(Property property, object value) =>
            StreamSensors(new SearchFilter(property, value));

            #endregion
            #region Filter (Property, Operator, Value)

        /// <summary>
        /// Retrieves sensors from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public List<Sensor> GetSensors(Property property, FilterOperator @operator, object value) =>
            GetSensors(new SearchFilter(property, @operator, value));

        /// <summary>
        /// Asynchronously retrieves sensors from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(Property property, FilterOperator @operator, object value) =>
            await GetSensorsAsync(property, @operator, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves sensors from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(Property property, FilterOperator @operator, object value, CancellationToken token) =>
            await GetSensorsAsync(new[]{new SearchFilter(property, @operator, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Streams sensors from a PRTG Server based on the value of a certain property.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Sensor> StreamSensors(Property property, FilterOperator @operator, object value) =>
            StreamSensors(new SearchFilter(property, @operator, value));

            #endregion
            #region Filter (Array)

        /// <summary>
        /// Retrieves sensors from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public List<Sensor> GetSensors(params SearchFilter[] filters) =>
            GetSensors(new SensorParameters(filters));

        /// <summary>
        /// Asynchronously retrieves sensors from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(params SearchFilter[] filters) =>
            await GetSensorsAsync(filters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves sensors from a PRTG Server, filtering for objects based on one or more conditions with a specified cancellation token.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of sensors that match the specified search criteria.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(SearchFilter[] filters, CancellationToken token) =>
            await GetSensorsAsync(new SensorParameters(filters), token).ConfigureAwait(false);

        /// <summary>
        /// Streams sensors from a PRTG Server, filtering for objects based on one or more conditions.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Sensor> StreamSensors(params SearchFilter[] filters) =>
            StreamSensors(new SensorParameters(filters));

            #endregion
            #region Query

        /// <summary>
        /// Retrieves sensors from a PRTG Server based on one or more <see cref="Queryable"/> expressions.
        /// </summary>
        /// <returns>An <see cref="IQueryable{Sensor}"/> to be wrapped by <see cref="Queryable"/> LINQ Expressions.</returns>
        public IQueryable<Sensor> QuerySensors() => QuerySensors(null);

        /// <summary>
        /// Retrieves sensors from a PRTG Server based on one or more <see cref="Queryable"/> expressions, specifying whether to use strict parsing semantics.
        /// </summary>
        /// <param name="strict">Whether to use strict evaluation. If true, a <see cref="NotSupportedException"/> will be thrown
        /// if an expression is encountered that cannot be evaluated server side.<para/>If <paramref name="strict"/> is false,
        /// the maximal supported expression will be executed server side, with any remaining expressions executed client side.</param>
        /// <exception cref="NotSupportedException">An expression was specified that cannot be evaluated server side.</exception>
        /// <returns>An <see cref="IQueryable{Sensor}"/> to be wrapped by <see cref="Queryable"/> LINQ Expressions.</returns>
        public IQueryable<Sensor> QuerySensors(bool strict) => QuerySensors(null, strict);

        /// <summary>
        /// Retrieves sensors from a PRTG Server based on one or more <see cref="Queryable"/> expressions,
        /// starting with an expression to filter sensors according to a specified predicate.
        /// </summary>
        /// <param name="predicate">The predicate to initially filter sensors by.</param>
        /// <returns>An <see cref="IQueryable{Sensor}"/> representing the result of filtering the sensors.</returns>
        public IQueryable<Sensor> QuerySensors(Expression<Func<Sensor, bool>> predicate) => QuerySensors(predicate, false);

        /// <summary>
        /// Retrieves sensors from a PRTG Server based on one or more <see cref="Queryable"/> expressions,
        /// starting with an expression to filter sensors according to a specified predicate and specifying whether
        /// to use strict parsing semantics.
        /// </summary>
        /// <param name="predicate">The predicate to initially filter sensors by.</param>
        /// <param name="strict">Whether to use strict evaluation. If true, a <see cref="NotSupportedException"/> will be thrown
        /// if an expression is encountered that cannot be evaluated server side.<para/>If <paramref name="strict"/> is false,
        /// the maximal supported expression will be executed server side, with any remaining expressions executed client side.</param>
        /// <exception cref="NotSupportedException">An expression was specified that cannot be evaluated server side.</exception>
        /// <returns>An <see cref="IQueryable{Sensor}"/> representing the result of filtering the sensors.</returns>
        public IQueryable<Sensor> QuerySensors(Expression<Func<Sensor, bool>> predicate, bool strict) =>
            ObjectEngine.QueryObjects(predicate, strict, () => new SensorParameters());

            #endregion
            #region Parameters

        /// <summary>
        /// Retrieves sensors from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Sensors.</param>
        /// <returns>A list of sensors that match the specified parameters.</returns>
        public List<Sensor> GetSensors(SensorParameters parameters) =>
            GetSensors(parameters, CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves sensors from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Sensors.</param>
        /// <returns>A list of sensors that match the specified parameters.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(SensorParameters parameters) =>
            await GetSensorsAsync(parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Streams sensors from a PRTG Server using a custom set of parameters.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Sensors.</param>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<Sensor> StreamSensors(SensorParameters parameters, bool serial = false) =>
            ObjectEngine.StreamObjects<Sensor, SensorParameters>(parameters, serial);

            #endregion
            #region Parameters (Cancellation Token)

        /// <summary>
        /// Retrieves sensors from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Sensors.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of sensors that match the specified parameters.</returns>
        public List<Sensor> GetSensors(SensorParameters parameters, CancellationToken token) =>
            ObjectEngine.GetObjects<Sensor>(parameters, token: token);

        /// <summary>
        /// Asynchronously retrieves sensors from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Sensors.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of sensors that match the specified parameters.</returns>
        public async Task<List<Sensor>> GetSensorsAsync(SensorParameters parameters, CancellationToken token) =>
            await ObjectEngine.GetObjectsAsync<Sensor>(parameters, token: token).ConfigureAwait(false);

            #endregion
            #region Types

        /// <summary>
        /// Retrieves descriptions of all sensor types that can be created under a specified object. Actual supported types may differ based on current PRTG settings.<para/>
        /// If the specified object does not support querying sensor types, this method returns null.
        /// </summary>
        /// <param name="objectId">The ID of the object to retrieve supported types of.</param>
        /// <returns>If the specified object supports querying sensor types, a list descriptions of sensor types supported by the specified object. Otherwise, null.</returns>
        public List<SensorTypeDescriptor> GetSensorTypes(int objectId = WellKnownId.DefaultProbe) =>
            ResponseParser.ParseSensorTypes(ObjectEngine.GetObject<SensorTypeDescriptorInternal>(new SensorTypeParameters(objectId), ResponseParser.ValidateHasContent).Types);

        /// <summary>
        /// Asynchronously retrieves descriptions of all sensor types that can be created under a specified object. Actual supported types may differ based on current PRTG settings.<para/>
        /// If the specified object does not support querying sensor types, this method returns null.
        /// </summary>
        /// <param name="objectId">The ID of the object to retrieve supported types of.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If the specified object supports querying sensor types, a list descriptions of sensor types supported by the specified object. Otherwise, null.</returns>
        public async Task<List<SensorTypeDescriptor>> GetSensorTypesAsync(int objectId = WellKnownId.DefaultProbe, CancellationToken token = default(CancellationToken)) =>
            ResponseParser.ParseSensorTypes((await ObjectEngine.GetObjectAsync<SensorTypeDescriptorInternal>(new SensorTypeParameters(objectId), ResponseParser.ValidateHasContentAsync, token: token).ConfigureAwait(false)).Types);

            #endregion
            #region Totals

        /// <summary>
        /// Retrieves the number of sensors of each sensor type in the system.
        /// </summary>
        /// <returns>The total number of sensors of each <see cref="Status"/> type.</returns>
        public SensorTotals GetSensorTotals() =>
            ObjectEngine.GetObject<SensorTotals>(new XmlFunctionParameters(XmlFunction.GetTreeNodeStats));

        /// <summary>
        /// Asynchronously retrieves the number of sensors of each sensor type in the system.
        /// </summary>
        /// <returns>The total number of sensors of each <see cref="Status"/> type.</returns>
        public async Task<SensorTotals> GetSensorTotalsAsync() =>
            await GetSensorTotalsAsync(CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves the number of sensors of each sensor type in the system with a specified cancellation token.
        /// </summary>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The total number of sensors of each <see cref="Status"/> type.</returns>
        public async Task<SensorTotals> GetSensorTotalsAsync(CancellationToken token) =>
            await ObjectEngine.GetObjectAsync<SensorTotals>(new XmlFunctionParameters(XmlFunction.GetTreeNodeStats), token: token).ConfigureAwait(false);

            #endregion
        #endregion
        #region Devices
            #region Single

        /// <summary>
        /// Retrieves a device with a specified ID from a PRTG Server.<para/>
        /// If the device does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the device to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified device does not exist or multiple devices were resolved with the specified ID.</exception>
        /// <returns>The device with the specified ID.</returns>
        public Device GetDevice(int id) =>
            GetDevices(Property.Id, id).SingleObject(id);

        /// <summary>
        /// Asynchronously retrieves a device with a specified ID from a PRTG Server.<para/>
        /// If the device does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the device to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified device does not exist or multiple devices were resolved with the specified ID.</exception>
        /// <returns>The device with the specified ID.</returns>
        public async Task<Device> GetDeviceAsync(int id) =>
            await GetDeviceAsync(id, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a device with a specified ID from a PRTG Server with a specified cancellation token.<para/>
        /// If the device does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the device to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified device does not exist or multiple devices were resolved with the specified ID.</exception>
        /// <returns>The device with the specified ID.</returns>
        public async Task<Device> GetDeviceAsync(int id, CancellationToken token) =>
            (await GetDevicesAsync(Property.Id, id, token).ConfigureAwait(false)).SingleObject(id);

            #endregion
            #region Multiple

        /// <summary>
        /// Retrieves all devices from a PRTG Server.
        /// </summary>
        /// <returns>A list of all devices on a PRTG Server.</returns>
        public List<Device> GetDevices() => GetDevices(new DeviceParameters());

        /// <summary>
        /// Asynchronously retrieves all devices from a PRTG Server.
        /// </summary>
        /// <returns>A list of all devices on a PRTG Server.</returns>
        public async Task<List<Device>> GetDevicesAsync() =>
            await GetDevicesAsync(CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all devices from a PRTG Server with a specified cancellation token.
        /// </summary>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of all devices on a PRTG Server.</returns>
        public async Task<List<Device>> GetDevicesAsync(CancellationToken token) =>
            await GetDevicesAsync(new DeviceParameters(), token).ConfigureAwait(false);

        /// <summary>
        /// Streams all devices from a PRTG Server.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<Device> StreamDevices(bool serial = false) => StreamDevices(new DeviceParameters(), serial);

            #endregion
            #region Filter (Property, Value)

        /// <summary>
        /// Retrieves devices from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of devices that match the specified search criteria.</returns>
        public List<Device> GetDevices(Property property, object value) =>
            GetDevices(new SearchFilter(property, value));

        /// <summary>
        /// Asynchronously retrieves devices from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of devices that match the specified search criteria.</returns>
        public async Task<List<Device>> GetDevicesAsync(Property property, object value) =>
            await GetDevicesAsync(property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves devices from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of devices that match the specified search criteria.</returns>
        public async Task<List<Device>> GetDevicesAsync(Property property, object value, CancellationToken token) =>
            await GetDevicesAsync(new[]{new SearchFilter(property, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Streams devices from a PRTG Server based on the value of a certain property.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Device> StreamDevices(Property property, object value) =>
            StreamDevices(new SearchFilter(property, value));

            #endregion
            #region Filter (Property, Operator, Value)

        /// <summary>
        /// Retrieves devices from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of devices that match the specified search criteria.</returns>
        public List<Device> GetDevices(Property property, FilterOperator @operator, object value) =>
            GetDevices(new SearchFilter(property, @operator, value));

        /// <summary>
        /// Asynchronously retrieves devices from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of devices that match the specified search criteria.</returns>
        public async Task<List<Device>> GetDevicesAsync(Property property, FilterOperator @operator, object value) =>
            await GetDevicesAsync(property, @operator, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves devices from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of devices that match the specified search criteria.</returns>
        public async Task<List<Device>> GetDevicesAsync(Property property, FilterOperator @operator, object value, CancellationToken token) =>
            await GetDevicesAsync(new[]{new SearchFilter(property, @operator, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Streams devices from a PRTG Server based on the value of a certain property.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Device> StreamDevices(Property property, FilterOperator @operator, object value) =>
            StreamDevices(new SearchFilter(property, @operator, value));

            #endregion
            #region Filter (Array)

        /// <summary>
        /// Retrieves devices from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of devices that match the specified search criteria.</returns>
        public List<Device> GetDevices(params SearchFilter[] filters) =>
            GetDevices(new DeviceParameters(filters));

        /// <summary>
        /// Asynchronously retrieves devices from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of devices that match the specified search criteria.</returns>
        public async Task<List<Device>> GetDevicesAsync(params SearchFilter[] filters) =>
            await GetDevicesAsync(filters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves devices from a PRTG Server, filtering for objects based on one or more conditions with a specified cancellation token.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of devices that match the specified search criteria.</returns>
        public async Task<List<Device>> GetDevicesAsync(SearchFilter[] filters, CancellationToken token) =>
            await GetDevicesAsync(new DeviceParameters(filters), token).ConfigureAwait(false);

        /// <summary>
        /// Streams devices from a PRTG Server, filtering for objects based on one or more conditions.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Device> StreamDevices(params SearchFilter[] filters) =>
            StreamDevices(new DeviceParameters(filters));

            #endregion
            #region Query

        /// <summary>
        /// Retrieves devices from a PRTG Server based on one or more <see cref="Queryable"/> expressions.
        /// </summary>
        /// <returns>An <see cref="IQueryable{Device}"/> to be wrapped by <see cref="Queryable"/> LINQ Expressions.</returns>
        public IQueryable<Device> QueryDevices() => QueryDevices(null);

        /// <summary>
        /// Retrieves devices from a PRTG Server based on one or more <see cref="Queryable"/> expressions, specifying whether to use strict parsing semantics.
        /// </summary>
        /// <param name="strict">Whether to use strict evaluation. If true, a <see cref="NotSupportedException"/> will be thrown
        /// if an expression is encountered that cannot be evaluated server side.<para/>If <paramref name="strict"/> is false,
        /// the maximal supported expression will be executed server side, with any remaining expressions executed client side.</param>
        /// <exception cref="NotSupportedException">An expression was specified that cannot be evaluated server side.</exception>
        /// <returns>An <see cref="IQueryable{Device}"/> to be wrapped by <see cref="Queryable"/> LINQ Expressions.</returns>
        public IQueryable<Device> QueryDevices(bool strict) => QueryDevices(null, strict);

        /// <summary>
        /// Retrieves devices from a PRTG Server based on one or more <see cref="Queryable"/> expressions,
        /// starting with an expression to filter devices according to a specified predicate.
        /// </summary>
        /// <param name="predicate">The predicate to initially filter devices by.</param>
        /// <returns>An <see cref="IQueryable{Device}"/> representing the result of filtering the devices.</returns>
        public IQueryable<Device> QueryDevices(Expression<Func<Device, bool>> predicate) => QueryDevices(predicate, false);

        /// <summary>
        /// Retrieves devices from a PRTG Server based on one or more <see cref="Queryable"/> expressions,
        /// starting with an expression to filter devices according to a specified predicate and specifying whether
        /// to use strict parsing semantics.
        /// </summary>
        /// <param name="predicate">The predicate to initially filter devices by.</param>
        /// <param name="strict">Whether to use strict evaluation. If true, a <see cref="NotSupportedException"/> will be thrown
        /// if an expression is encountered that cannot be evaluated server side.<para/>If <paramref name="strict"/> is false,
        /// the maximal supported expression will be executed server side, with any remaining expressions executed client side.</param>
        /// <exception cref="NotSupportedException">An expression was specified that cannot be evaluated server side.</exception>
        /// <returns>An <see cref="IQueryable{Device}"/> representing the result of filtering the devices.</returns>
        public IQueryable<Device> QueryDevices(Expression<Func<Device, bool>> predicate, bool strict) =>
            ObjectEngine.QueryObjects(predicate, strict, () => new DeviceParameters());

            #endregion
            #region Parameters

        /// <summary>
        /// Retrieves devices from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Devices.</param>
        /// <returns>A list of devices that match the specified parameters.</returns>
        public List<Device> GetDevices(DeviceParameters parameters) =>
            GetDevices(parameters, CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves devices from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Devices.</param>
        /// <returns>A list of devices that match the specified parameters.</returns>
        public async Task<List<Device>> GetDevicesAsync(DeviceParameters parameters) =>
            await GetDevicesAsync(parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Streams devices from a PRTG Server using a custom set of parameters.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Devices.</param>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<Device> StreamDevices(DeviceParameters parameters, bool serial = false) =>
            ObjectEngine.StreamObjects<Device, DeviceParameters>(parameters, serial);

            #endregion
            #region Parameters (Cancellation Token)

        /// <summary>
        /// Retrieves devices from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Devices.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of devices that match the specified parameters.</returns>
        public List<Device> GetDevices(DeviceParameters parameters, CancellationToken token) =>
            ObjectEngine.GetObjects<Device>(parameters, token: token);

        /// <summary>
        /// Asynchronously retrieves devices from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Devices.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of devices that match the specified parameters.</returns>
        public async Task<List<Device>> GetDevicesAsync(DeviceParameters parameters, CancellationToken token) =>
            await ObjectEngine.GetObjectsAsync<Device>(parameters, token: token).ConfigureAwait(false);

            #endregion

        /// <summary>
        /// Retrieves all auto-discovery device templates supported by the specified object.
        /// </summary>
        /// <param name="deviceId">The ID of the device to retrieve supported device templates of. In practice all devices should support the same device templates.</param>
        /// <returns>A list of device templates supported by the specified object.</returns>
        public List<DeviceTemplate> GetDeviceTemplates(int deviceId = WellKnownId.DefaultProbeDevice) =>
            ResponseParser.GetTemplates(GetObjectPropertiesRawInternal(deviceId, ObjectType.Device).StringValue);

        /// <summary>
        /// Asynchronously retrieves all auto-discovery device templates supported by the specified object.
        /// </summary>
        /// <param name="deviceId">The ID of the device to retrieve supported device templates of. In practice all devices should support the same device templates.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of device templates supported by the specified object.</returns>
        public async Task<List<DeviceTemplate>> GetDeviceTemplatesAsync(int deviceId = WellKnownId.DefaultProbeDevice, CancellationToken token = default(CancellationToken)) =>
            ResponseParser.GetTemplates((await GetObjectPropertiesRawInternalAsync(deviceId, ObjectType.Device, token).ConfigureAwait(false)).StringValue);

        #endregion
        #region Groups
            #region Single

        /// <summary>
        /// Retrieves a group with a specified ID from a PRTG Server.<para/>
        /// If the group does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the group to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified group does not exist or multiple groups were resolved with the specified ID.</exception>
        /// <returns>The group with the specified ID.</returns>
        public Group GetGroup(int id) =>
            GetGroups(Property.Id, id).SingleObject(id);

        /// <summary>
        /// Asynchronously retrieves a group with a specified ID from a PRTG Server.<para/>
        /// If the group does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the group to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified group does not exist or multiple groups were resolved with the specified ID.</exception>
        /// <returns>The group with the specified ID.</returns>
        public async Task<Group> GetGroupAsync(int id) =>
            await GetGroupAsync(id, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a group with a specified ID from a PRTG Server with a specified cancellation token.<para/>
        /// If the group does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the group to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified group does not exist or multiple groups were resolved with the specified ID.</exception>
        /// <returns>The group with the specified ID.</returns>
        public async Task<Group> GetGroupAsync(int id, CancellationToken token) =>
            (await GetGroupsAsync(Property.Id, id, token).ConfigureAwait(false)).SingleObject(id);

            #endregion
            #region Multiple

        /// <summary>
        /// Retrieves all groups from a PRTG Server.
        /// </summary>
        /// <returns>A list of all groups on a PRTG Server.</returns>
        public List<Group> GetGroups() => GetGroups(new GroupParameters());

        /// <summary>
        /// Asynchronously retrieves all groups from a PRTG Server.
        /// </summary>
        /// <returns>A list of all groups on a PRTG Server.</returns>
        public async Task<List<Group>> GetGroupsAsync() =>
            await GetGroupsAsync(CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all groups from a PRTG Server with a specified cancellation token.
        /// </summary>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of all groups on a PRTG Server.</returns>
        public async Task<List<Group>> GetGroupsAsync(CancellationToken token) =>
            await GetGroupsAsync(new GroupParameters(), token).ConfigureAwait(false);

        /// <summary>
        /// Streams all groups from a PRTG Server.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<Group> StreamGroups(bool serial = false) => StreamGroups(new GroupParameters(), serial);

            #endregion
            #region Filter (Property, Value)

        /// <summary>
        /// Retrieves groups from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of groups that match the specified search criteria.</returns>
        public List<Group> GetGroups(Property property, object value) =>
            GetGroups(new SearchFilter(property, value));

        /// <summary>
        /// Asynchronously retrieves groups from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of groups that match the specified search criteria.</returns>
        public async Task<List<Group>> GetGroupsAsync(Property property, object value) =>
            await GetGroupsAsync(property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves groups from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of groups that match the specified search criteria.</returns>
        public async Task<List<Group>> GetGroupsAsync(Property property, object value, CancellationToken token) =>
            await GetGroupsAsync(new[]{new SearchFilter(property, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Streams groups from a PRTG Server based on the value of a certain property.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Group> StreamGroups(Property property, object value) =>
            StreamGroups(new SearchFilter(property, value));

            #endregion
            #region Filter (Property, Operator, Value)

        /// <summary>
        /// Retrieves groups from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of groups that match the specified search criteria.</returns>
        public List<Group> GetGroups(Property property, FilterOperator @operator, object value) =>
            GetGroups(new SearchFilter(property, @operator, value));

        /// <summary>
        /// Asynchronously retrieves groups from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of groups that match the specified search criteria.</returns>
        public async Task<List<Group>> GetGroupsAsync(Property property, FilterOperator @operator, object value) =>
            await GetGroupsAsync(property, @operator, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves groups from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of groups that match the specified search criteria.</returns>
        public async Task<List<Group>> GetGroupsAsync(Property property, FilterOperator @operator, object value, CancellationToken token) =>
            await GetGroupsAsync(new[]{new SearchFilter(property, @operator, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Streams groups from a PRTG Server based on the value of a certain property.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Group> StreamGroups(Property property, FilterOperator @operator, object value) =>
            StreamGroups(new SearchFilter(property, @operator, value));

            #endregion
            #region Filter (Array)

        /// <summary>
        /// Retrieves groups from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of groups that match the specified search criteria.</returns>
        public List<Group> GetGroups(params SearchFilter[] filters) =>
            GetGroups(new GroupParameters(filters));

        /// <summary>
        /// Asynchronously retrieves groups from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of groups that match the specified search criteria.</returns>
        public async Task<List<Group>> GetGroupsAsync(params SearchFilter[] filters) =>
            await GetGroupsAsync(filters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves groups from a PRTG Server, filtering for objects based on one or more conditions with a specified cancellation token.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of groups that match the specified search criteria.</returns>
        public async Task<List<Group>> GetGroupsAsync(SearchFilter[] filters, CancellationToken token) =>
            await GetGroupsAsync(new GroupParameters(filters), token).ConfigureAwait(false);

        /// <summary>
        /// Streams groups from a PRTG Server, filtering for objects based on one or more conditions.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Group> StreamGroups(params SearchFilter[] filters) =>
            StreamGroups(new GroupParameters(filters));

            #endregion
            #region Query

        /// <summary>
        /// Retrieves groups from a PRTG Server based on one or more <see cref="Queryable"/> expressions.
        /// </summary>
        /// <returns>An <see cref="IQueryable{Group}"/> to be wrapped by <see cref="Queryable"/> LINQ Expressions.</returns>
        public IQueryable<Group> QueryGroups() => QueryGroups(null);

        /// <summary>
        /// Retrieves groups from a PRTG Server based on one or more <see cref="Queryable"/> expressions, specifying whether to use strict parsing semantics.
        /// </summary>
        /// <param name="strict">Whether to use strict evaluation. If true, a <see cref="NotSupportedException"/> will be thrown
        /// if an expression is encountered that cannot be evaluated server side.<para/>If <paramref name="strict"/> is false,
        /// the maximal supported expression will be executed server side, with any remaining expressions executed client side.</param>
        /// <exception cref="NotSupportedException">An expression was specified that cannot be evaluated server side.</exception>
        /// <returns>An <see cref="IQueryable{Group}"/> to be wrapped by <see cref="Queryable"/> LINQ Expressions.</returns>
        public IQueryable<Group> QueryGroups(bool strict) => QueryGroups(null, strict);

        /// <summary>
        /// Retrieves groups from a PRTG Server based on one or more <see cref="Queryable"/> expressions,
        /// starting with an expression to filter groups according to a specified predicate.
        /// </summary>
        /// <param name="predicate">The predicate to initially filter groups by.</param>
        /// <returns>An <see cref="IQueryable{Group}"/> representing the result of filtering the groups.</returns>
        public IQueryable<Group> QueryGroups(Expression<Func<Group, bool>> predicate) => QueryGroups(predicate, false);

        /// <summary>
        /// Retrieves groups from a PRTG Server based on one or more <see cref="Queryable"/> expressions,
        /// starting with an expression to filter groups according to a specified predicate and specifying whether
        /// to use strict parsing semantics.
        /// </summary>
        /// <param name="predicate">The predicate to initially filter groups by.</param>
        /// <param name="strict">Whether to use strict evaluation. If true, a <see cref="NotSupportedException"/> will be thrown
        /// if an expression is encountered that cannot be evaluated server side.<para/>If <paramref name="strict"/> is false,
        /// the maximal supported expression will be executed server side, with any remaining expressions executed client side.</param>
        /// <exception cref="NotSupportedException">An expression was specified that cannot be evaluated server side.</exception>
        /// <returns>An <see cref="IQueryable{Group}"/> representing the result of filtering the groups.</returns>
        public IQueryable<Group> QueryGroups(Expression<Func<Group, bool>> predicate, bool strict) =>
            ObjectEngine.QueryObjects(predicate, strict, () => new GroupParameters());

            #endregion
            #region Parameters

        /// <summary>
        /// Retrieves groups from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Groups.</param>
        /// <returns>A list of groups that match the specified parameters.</returns>
        public List<Group> GetGroups(GroupParameters parameters) =>
            GetGroups(parameters, CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves groups from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Groups.</param>
        /// <returns>A list of groups that match the specified parameters.</returns>
        public async Task<List<Group>> GetGroupsAsync(GroupParameters parameters) =>
            await GetGroupsAsync(parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Streams groups from a PRTG Server using a custom set of parameters.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Groups.</param>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<Group> StreamGroups(GroupParameters parameters, bool serial = false) =>
            ObjectEngine.StreamObjects<Group, GroupParameters>(parameters, serial);

            #endregion
            #region Parameters (Cancellation Token)

        /// <summary>
        /// Retrieves groups from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Groups.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of groups that match the specified parameters.</returns>
        public List<Group> GetGroups(GroupParameters parameters, CancellationToken token) =>
            ObjectEngine.GetObjects<Group>(parameters, token: token);

        /// <summary>
        /// Asynchronously retrieves groups from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Groups.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of groups that match the specified parameters.</returns>
        public async Task<List<Group>> GetGroupsAsync(GroupParameters parameters, CancellationToken token) =>
            await ObjectEngine.GetObjectsAsync<Group>(parameters, token: token).ConfigureAwait(false);

            #endregion
        #endregion
        #region Probes
            #region Single

        /// <summary>
        /// Retrieves a probe with a specified ID from a PRTG Server.<para/>
        /// If the probe does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the probe to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified probe does not exist or multiple probes were resolved with the specified ID.</exception>
        /// <returns>The probe with the specified ID.</returns>
        public Probe GetProbe(int id) =>
            GetProbes(Property.Id, id).SingleObject(id);

        /// <summary>
        /// Asynchronously retrieves a probe with a specified ID from a PRTG Server.<para/>
        /// If the probe does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the probe to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified probe does not exist or multiple probes were resolved with the specified ID.</exception>
        /// <returns>The probe with the specified ID.</returns>
        public async Task<Probe> GetProbeAsync(int id) =>
            await GetProbeAsync(id, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a probe with a specified ID from a PRTG Server with a specified cancellation token.<para/>
        /// If the probe does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the probe to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified probe does not exist or multiple probes were resolved with the specified ID.</exception>
        /// <returns>The probe with the specified ID.</returns>
        public async Task<Probe> GetProbeAsync(int id, CancellationToken token) =>
            (await GetProbesAsync(Property.Id, id, token).ConfigureAwait(false)).SingleObject(id);

            #endregion
            #region Multiple

        /// <summary>
        /// Retrieves all probes from a PRTG Server.
        /// </summary>
        /// <returns>A list of all probes on a PRTG Server.</returns>
        public List<Probe> GetProbes() => GetProbes(new ProbeParameters());

        /// <summary>
        /// Asynchronously retrieves all probes from a PRTG Server.
        /// </summary>
        /// <returns>A list of all probes on a PRTG Server.</returns>
        public async Task<List<Probe>> GetProbesAsync() =>
            await GetProbesAsync(CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all probes from a PRTG Server with a specified cancellation token.
        /// </summary>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of all probes on a PRTG Server.</returns>
        public async Task<List<Probe>> GetProbesAsync(CancellationToken token) =>
            await GetProbesAsync(new ProbeParameters(), token).ConfigureAwait(false);

        /// <summary>
        /// Streams all probes from a PRTG Server.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<Probe> StreamProbes(bool serial = false) => StreamProbes(new ProbeParameters(), serial);

            #endregion
            #region Filter (Property, Value)

        /// <summary>
        /// Retrieves probes from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of probes that match the specified search criteria.</returns>
        public List<Probe> GetProbes(Property property, object value) =>
            GetProbes(new SearchFilter(property, value));

        /// <summary>
        /// Asynchronously retrieves probes from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of probes that match the specified search criteria.</returns>
        public async Task<List<Probe>> GetProbesAsync(Property property, object value) =>
            await GetProbesAsync(property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves probes from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of probes that match the specified search criteria.</returns>
        public async Task<List<Probe>> GetProbesAsync(Property property, object value, CancellationToken token) =>
            await GetProbesAsync(new[]{new SearchFilter(property, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Streams probes from a PRTG Server based on the value of a certain property.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Probe> StreamProbes(Property property, object value) =>
            StreamProbes(new SearchFilter(property, value));

            #endregion
            #region Filter (Property, Operator, Value)

        /// <summary>
        /// Retrieves probes from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of probes that match the specified search criteria.</returns>
        public List<Probe> GetProbes(Property property, FilterOperator @operator, object value) =>
            GetProbes(new SearchFilter(property, @operator, value));

        /// <summary>
        /// Asynchronously retrieves probes from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of probes that match the specified search criteria.</returns>
        public async Task<List<Probe>> GetProbesAsync(Property property, FilterOperator @operator, object value) =>
            await GetProbesAsync(property, @operator, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves probes from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of probes that match the specified search criteria.</returns>
        public async Task<List<Probe>> GetProbesAsync(Property property, FilterOperator @operator, object value, CancellationToken token) =>
            await GetProbesAsync(new[]{new SearchFilter(property, @operator, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Streams probes from a PRTG Server based on the value of a certain property.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="operator">Operator to compare value and property value with.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Probe> StreamProbes(Property property, FilterOperator @operator, object value) =>
            StreamProbes(new SearchFilter(property, @operator, value));

            #endregion
            #region Filter (Array)

        /// <summary>
        /// Retrieves probes from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of probes that match the specified search criteria.</returns>
        public List<Probe> GetProbes(params SearchFilter[] filters) =>
            GetProbes(new ProbeParameters(filters));

        /// <summary>
        /// Asynchronously retrieves probes from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of probes that match the specified search criteria.</returns>
        public async Task<List<Probe>> GetProbesAsync(params SearchFilter[] filters) =>
            await GetProbesAsync(filters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves probes from a PRTG Server, filtering for objects based on one or more conditions with a specified cancellation token.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of probes that match the specified search criteria.</returns>
        public async Task<List<Probe>> GetProbesAsync(SearchFilter[] filters, CancellationToken token) =>
            await GetProbesAsync(new ProbeParameters(filters), token).ConfigureAwait(false);

        /// <summary>
        /// Streams probes from a PRTG Server, filtering for objects based on one or more conditions.<para/>
        /// When this method's response is enumerated multiple parallel requests will be executed against the PRTG Server and yielded in the order they return.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<Probe> StreamProbes(params SearchFilter[] filters) =>
            StreamProbes(new ProbeParameters(filters));

            #endregion
            #region Query

        /// <summary>
        /// Retrieves probes from a PRTG Server based on one or more <see cref="Queryable"/> expressions.
        /// </summary>
        /// <returns>An <see cref="IQueryable{Probe}"/> to be wrapped by <see cref="Queryable"/> LINQ Expressions.</returns>
        public IQueryable<Probe> QueryProbes() => QueryProbes(null);

        /// <summary>
        /// Retrieves probes from a PRTG Server based on one or more <see cref="Queryable"/> expressions, specifying whether to use strict parsing semantics.
        /// </summary>
        /// <param name="strict">Whether to use strict evaluation. If true, a <see cref="NotSupportedException"/> will be thrown
        /// if an expression is encountered that cannot be evaluated server side.<para/>If <paramref name="strict"/> is false,
        /// the maximal supported expression will be executed server side, with any remaining expressions executed client side.</param>
        /// <exception cref="NotSupportedException">An expression was specified that cannot be evaluated server side.</exception>
        /// <returns>An <see cref="IQueryable{Probe}"/> to be wrapped by <see cref="Queryable"/> LINQ Expressions.</returns>
        public IQueryable<Probe> QueryProbes(bool strict) => QueryProbes(null, strict);

        /// <summary>
        /// Retrieves probes from a PRTG Server based on one or more <see cref="Queryable"/> expressions,
        /// starting with an expression to filter probes according to a specified predicate.
        /// </summary>
        /// <param name="predicate">The predicate to initially filter probes by.</param>
        /// <returns>An <see cref="IQueryable{Probe}"/> representing the result of filtering the probes.</returns>
        public IQueryable<Probe> QueryProbes(Expression<Func<Probe, bool>> predicate) => QueryProbes(predicate, false);

        /// <summary>
        /// Retrieves probes from a PRTG Server based on one or more <see cref="Queryable"/> expressions,
        /// starting with an expression to filter probes according to a specified predicate and specifying whether
        /// to use strict parsing semantics.
        /// </summary>
        /// <param name="predicate">The predicate to initially filter probes by.</param>
        /// <param name="strict">Whether to use strict evaluation. If true, a <see cref="NotSupportedException"/> will be thrown
        /// if an expression is encountered that cannot be evaluated server side.<para/>If <paramref name="strict"/> is false,
        /// the maximal supported expression will be executed server side, with any remaining expressions executed client side.</param>
        /// <exception cref="NotSupportedException">An expression was specified that cannot be evaluated server side.</exception>
        /// <returns>An <see cref="IQueryable{Probe}"/> representing the result of filtering the probes.</returns>
        public IQueryable<Probe> QueryProbes(Expression<Func<Probe, bool>> predicate, bool strict) =>
            ObjectEngine.QueryObjects(predicate, strict, () => new ProbeParameters());

            #endregion
            #region Parameters

        /// <summary>
        /// Retrieves probes from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Probes.</param>
        /// <returns>A list of probes that match the specified parameters.</returns>
        public List<Probe> GetProbes(ProbeParameters parameters) =>
            GetProbes(parameters, CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves probes from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Probes.</param>
        /// <returns>A list of probes that match the specified parameters.</returns>
        public async Task<List<Probe>> GetProbesAsync(ProbeParameters parameters) =>
            await GetProbesAsync(parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Streams probes from a PRTG Server using a custom set of parameters.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Probes.</param>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<Probe> StreamProbes(ProbeParameters parameters, bool serial = false) =>
            ObjectEngine.StreamObjects<Probe, ProbeParameters>(parameters, serial);

            #endregion
            #region Parameters (Cancellation Token)

        /// <summary>
        /// Retrieves probes from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Probes.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of probes that match the specified parameters.</returns>
        public List<Probe> GetProbes(ProbeParameters parameters, CancellationToken token) =>
            ObjectEngine.GetObjects<Probe>(parameters, token: token);

        /// <summary>
        /// Asynchronously retrieves probes from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Probes.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of probes that match the specified parameters.</returns>
        public async Task<List<Probe>> GetProbesAsync(ProbeParameters parameters, CancellationToken token) =>
            await ObjectEngine.GetObjectsAsync<Probe>(parameters, token: token).ConfigureAwait(false);

            #endregion
        #endregion
        #region Channels
            #region Single

        /// <summary>
        /// Retrieves a channel with a specified ID from a PRTG Server. If the channel does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor containing the channel.</param>
        /// <param name="id">The ID of the channel to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified channel does not exist or multiple channels were resolved with the specified ID.</exception>
        /// <returns>The channel with the specified ID.</returns>
        public Channel GetChannel(Either<Sensor, int> sensorOrId, int id) =>
            GetChannelsInternal(sensorOrId, null, i => i == id).SingleObject(id);

        /// <summary>
        /// Asynchronously retrieves a channel with a specified ID from a PRTG Server. If the channel does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor containing the channel.</param>
        /// <param name="id">The ID of the channel to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified channel does not exist or multiple channels were resolved with the specified ID.</exception>
        /// <returns>The channel with the specified ID.</returns>
        public async Task<Channel> GetChannelAsync(Either<Sensor, int> sensorOrId, int id) =>
            await GetChannelAsync(sensorOrId, id, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a channel with a specified ID from a PRTG Server with a specified cancellation token. If the channel does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor containing the channel.</param>
        /// <param name="id">The ID of the channel to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified channel does not exist or multiple channels were resolved with the specified ID.</exception>
        /// <returns>The channel with the specified ID.</returns>
        public async Task<Channel> GetChannelAsync(Either<Sensor, int> sensorOrId, int id, CancellationToken token) =>
            (await GetChannelsInternalAsync(sensorOrId, null, i => i == id, token).ConfigureAwait(false)).SingleObject(id);

        /// <summary>
        /// Retrieves a channel with a specified name from a PRTG Server. If the channel does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor containing the channel.</param>
        /// <param name="name">The name of the channel to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified channel does not exist or multiple channels were resolved with the specified name.</exception>
        /// <returns>The channel with the specified name.</returns>
        public Channel GetChannel(Either<Sensor, int> sensorOrId, string name)
        {
            AssertHasValue(name, nameof(name));

            var channels = GetChannelsInternal(sensorOrId, n => n == name);

            return channels.SingleObject(name, "name");
        }

        /// <summary>
        /// Asynchronously retrieves a channel with a specified name from a PRTG Server. If the channel does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor containing the channel.</param>
        /// <param name="name">The name of the channel to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified channel does not exist or multiple channels were resolved with the specified name.</exception>
        /// <returns>The channel with the specified name.</returns>
        public async Task<Channel> GetChannelAsync(Either<Sensor, int> sensorOrId, string name) =>
            await GetChannelAsync(sensorOrId, name, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a channel with a specified name from a PRTG Server with a specified cancellation token. If the channel does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor containing the channel.</param>
        /// <param name="name">The name of the channel to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified channel does not exist or multiple channels were resolved with the specified name.</exception>
        /// <returns>The channel with the specified name.</returns>
        public async Task<Channel> GetChannelAsync(Either<Sensor, int> sensorOrId, string name, CancellationToken token)
        {
            AssertHasValue(name, nameof(name));

            var channels = await GetChannelsInternalAsync(sensorOrId, n => n == name, token: token).ConfigureAwait(false);

            return channels.SingleObject(name, "name");
        }

            #endregion

        /// <summary>
        /// Retrieves all channels of a sensor.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve channels for.</param>
        /// <returns>A list of channels on the specified sensor.</returns>
        public List<Channel> GetChannels(Either<Sensor, int> sensorOrId) =>
            GetChannelsInternal(sensorOrId);

        /// <summary>
        /// Asynchronously retrieves all channels of a sensor.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve channels for.</param>
        /// <returns>A list of channels on the specified sensor.</returns>
        public async Task<List<Channel>> GetChannelsAsync(Either<Sensor, int> sensorOrId) =>
            await GetChannelsAsync(sensorOrId, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all channels of a sensor with a specified cancellation token.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve channels for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of channels on the specified sensor.</returns>
        public async Task<List<Channel>> GetChannelsAsync(Either<Sensor, int> sensorOrId, CancellationToken token) =>
            await GetChannelsInternalAsync(sensorOrId, token: token).ConfigureAwait(false);

        /// <summary>
        /// Retrieves all channels of a sensor that match the specified name.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve channels for.</param>
        /// <param name="name">The name of the channel to retrieve.</param>
        /// <returns>A list of channels on the specified sensor.</returns>
        public List<Channel> GetChannels(Either<Sensor, int> sensorOrId, string name)
        {
            AssertHasValue(name, nameof(name));

            return GetChannelsInternal(sensorOrId, n => n == name);
        }

        /// <summary>
        /// Asynchronously retrieves all channels of a sensor that match the specified name.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve channels for.</param>
        /// <param name="name">The name of the channel to retrieve.</param>
        /// <returns>A list of channels on the specified sensor.</returns>
        public async Task<List<Channel>> GetChannelsAsync(Either<Sensor, int> sensorOrId, string name) =>
            await GetChannelsAsync(sensorOrId, name, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all channels of a sensor that match the specified name with a specified cancellation token.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve channels for.</param>
        /// <param name="name">The name of the channel to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of channels on the specified sensor.</returns>
        public async Task<List<Channel>> GetChannelsAsync(Either<Sensor, int> sensorOrId, string name, CancellationToken token)
        {
            AssertHasValue(name, nameof(name));

            return await GetChannelsInternalAsync(sensorOrId, n => n == name, token: token).ConfigureAwait(false);
        }

        #endregion
        #region Logs
            #region DateTime Root

        /// <summary>
        /// Retrieves logs between two time periods from a PRTG Server. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="startDate">Start date to retrieve logs from. If this value is null, logs will be retrieved from the current date and time.</param>
        /// <param name="endDate">End date to retrieve logs to. If this value is null, logs will be retrieved until the beginning of all logs.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public List<Log> GetLogs(DateTime? startDate, DateTime? endDate = null, int? count = 500, params LogStatus[] status) =>
            GetLogs(new LogParameters(null, startDate, endDate, count, status));

        /// <summary>
        /// Asynchronously retrieves logs between two time periods from a PRTG Server. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="startDate">Start date to retrieve logs from. If this value is null, logs will be retrieved from the current date and time.</param>
        /// <param name="endDate">End date to retrieve logs to. If this value is null, logs will be retrieved until the beginning of all logs.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public async Task<List<Log>> GetLogsAsync(DateTime? startDate, DateTime? endDate = null, int? count = 500, params LogStatus[] status) =>
            await GetLogsAsync(startDate, endDate, count, status, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves logs between two time periods from a PRTG Server with a specified cancellation token. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="startDate">Start date to retrieve logs from. If this value is null, logs will be retrieved from the current date and time.</param>
        /// <param name="endDate">End date to retrieve logs to. If this value is null, logs will be retrieved until the beginning of all logs.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public async Task<List<Log>> GetLogsAsync(DateTime? startDate, DateTime? endDate, int? count, LogStatus[] status, CancellationToken token) =>
            await GetLogsAsync(new LogParameters(null, startDate, endDate, count, status), token).ConfigureAwait(false);

        /// <summary>
        /// Streams logs between two time periods from a PRTG Server. If <paramref name="serial"/> is true, logs are guaranteed to be ordered from newest to oldest.
        /// </summary>
        /// <param name="startDate">Start date to retrieve logs from. If this value is null, logs will be retrieved from the current date and time.</param>
        /// <param name="endDate">End date to retrieve logs to. If this value is null, logs will be retrieved until the beginning of all logs.</param>
        /// <param name="count">Number of logs to retrieve. If this value is null, all logs will be retrieved within the specified timespan.</param>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public IEnumerable<Log> StreamLogs(DateTime? startDate, DateTime? endDate = null, int? count = null, bool serial = false, params LogStatus[] status) =>
            StreamLogs(new LogParameters(null, startDate, endDate, count, status), serial);

            #endregion
            #region DateTime Object

        /// <summary>
        /// Retrieves logs between two time periods from a PRTG Server for a specified object. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="objectId">ID of the object to retrieve logs from. If this value is 0, logs will be retrieved from the root group.</param>
        /// <param name="startDate">Start date to retrieve logs from. If this value is null, logs will be retrieved from the current date and time.</param>
        /// <param name="endDate">End date to retrieve logs to. If this value is null, logs will be retrieved until the beginning of all logs.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public List<Log> GetLogs(int objectId, DateTime? startDate = null, DateTime? endDate = null, int? count = 500, params LogStatus[] status) =>
            GetLogs(new LogParameters(objectId, startDate, endDate, count, status));

        /// <summary>
        /// Asynchronously retrieves logs between two time periods from a PRTG Server for a specified object. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="objectId">ID of the object to retrieve logs from. If this value is 0, logs will be retrieved from the root group.</param>
        /// <param name="startDate">Start date to retrieve logs from. If this value is null, logs will be retrieved from the current date and time.</param>
        /// <param name="endDate">End date to retrieve logs to. If this value is null, logs will be retrieved until the beginning of all logs.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public async Task<List<Log>> GetLogsAsync(int objectId, DateTime? startDate = null, DateTime? endDate = null, int? count = 500, params LogStatus[] status) =>
            await GetLogsAsync(objectId, startDate, endDate, count, status, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves logs between two time periods from a PRTG Server for a specified object with a specified cancellation token. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="objectId">ID of the object to retrieve logs from. If this value is 0, logs will be retrieved from the root group.</param>
        /// <param name="startDate">Start date to retrieve logs from. If this value is null, logs will be retrieved from the current date and time.</param>
        /// <param name="endDate">End date to retrieve logs to. If this value is null, logs will be retrieved until the beginning of all logs.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public async Task<List<Log>> GetLogsAsync(int objectId, DateTime? startDate, DateTime? endDate, int? count, LogStatus[] status, CancellationToken token) =>
            await GetLogsAsync(new LogParameters(objectId, startDate, endDate, count, status), token).ConfigureAwait(false);

        /// <summary>
        /// Streams logs between two time periods from a PRTG Server for a specified object. If <paramref name="serial"/> is true, logs are guaranteed to be ordered from newest to oldest.
        /// </summary>
        /// <param name="objectId">ID of the object to retrieve logs from. If this value is 0, logs will be retrieved from the root group.</param>
        /// <param name="startDate">Start date to retrieve logs from. If this value is null, logs will be retrieved from the current date and time.</param>
        /// <param name="endDate">End date to retrieve logs to. If this value is null, logs will be retrieved until the beginning of all logs.</param>
        /// <param name="count">Number of logs to retrieve. If this value is null, all logs will be retrieved within the specified timespan.</param>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public IEnumerable<Log> StreamLogs(int objectId, DateTime? startDate = null, DateTime? endDate = null, int? count = null, bool serial = false, params LogStatus[] status) =>
            StreamLogs(new LogParameters(objectId, startDate, endDate, count, status), serial);

            #endregion
            #region RecordAge Root

        /// <summary>
        /// Retrieves logs for a standard time period from a PRTG Server. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="recordAge">Time period to retrieve logs from. Logs will be retrieved from the beginning of this period until the current date and time, ordered newest to oldest.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public List<Log> GetLogs(RecordAge recordAge = RecordAge.LastWeek, int? count = 500, params LogStatus[] status) =>
            GetLogs(new LogParameters(null, recordAge, count, status));

        /// <summary>
        /// Asynchronously retrieves logs for a standard time period from a PRTG Server. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="recordAge">Time period to retrieve logs from. Logs will be retrieved from the beginning of this period until the current date and time, ordered newest to oldest.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public async Task<List<Log>> GetLogsAsync(RecordAge recordAge = RecordAge.LastWeek, int? count = 500, params LogStatus[] status) =>
            await GetLogsAsync(recordAge, count, status, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves logs for a standard time period from a PRTG Server with a specified cancellation token. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="recordAge">Time period to retrieve logs from. Logs will be retrieved from the beginning of this period until the current date and time, ordered newest to oldest.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public async Task<List<Log>> GetLogsAsync(RecordAge recordAge, int? count, LogStatus[] status, CancellationToken token) =>
            await GetLogsAsync(new LogParameters(null, recordAge, count, status), token).ConfigureAwait(false);

        /// <summary>
        /// Streams logs for a standard time period from a PRTG Server. If <paramref name="serial"/> is true, logs are guaranteed to be ordered from newest to oldest.
        /// </summary>
        /// <param name="recordAge">Time period to retrieve logs from. Logs will be retrieved from the beginning of this period until the current date and time, ordered newest to oldest.</param>
        /// <param name="count">Number of logs to retrieve. If this value is null, all logs will be retrieved within the specified timespan.</param>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public IEnumerable<Log> StreamLogs(RecordAge recordAge = RecordAge.LastWeek, int? count = null, bool serial = false, params LogStatus[] status) =>
            StreamLogs(new LogParameters(null, recordAge, count, status), serial);

            #endregion
            #region RecordAge Object

        /// <summary>
        /// Retrieves logs from a standard time period from a PRTG Server for a specified object. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="objectId">ID of the object to retrieve logs from. If this value is 0, logs will be retrieved from the root group.</param>
        /// <param name="recordAge">Time period to retrieve logs from. Logs will be retrieved from the beginning of this period until the current date and time, ordered newest to oldest.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public List<Log> GetLogs(int objectId, RecordAge recordAge, int? count = 500, params LogStatus[] status) =>
            GetLogs(new LogParameters(objectId, recordAge, count, status));

        /// <summary>
        /// Asynchronously retrieves logs from a standard time period from a PRTG Server for a specified object. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="objectId">ID of the object to retrieve logs from. If this value is 0, logs will be retrieved from the root group.</param>
        /// <param name="recordAge">Time period to retrieve logs from. Logs will be retrieved from the beginning of this period until the current date and time, ordered newest to oldest.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public async Task<List<Log>> GetLogsAsync(int objectId, RecordAge recordAge, int? count = 500, params LogStatus[] status) =>
            await GetLogsAsync(objectId, recordAge, count, status, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves logs from a standard time period from a PRTG Server for a specified object with a specified cancellation token. Logs are ordered from newest to oldest.
        /// </summary>
        /// <param name="objectId">ID of the object to retrieve logs from. If this value is 0, logs will be retrieved from the root group.</param>
        /// <param name="recordAge">Time period to retrieve logs from. Logs will be retrieved from the beginning of this period until the current date and time, ordered newest to oldest.</param>
        /// <param name="count">Number of logs to retrieve. Depending on the number of logs stored in the system, specifying a high number may cause the request to timeout.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public async Task<List<Log>> GetLogsAsync(int objectId, RecordAge recordAge, int? count, LogStatus[] status, CancellationToken token) =>
            await GetLogsAsync(new LogParameters(objectId, recordAge, count, status), token).ConfigureAwait(false);

        /// <summary>
        /// Streams logs from a standard time period from a PRTG Server for a specified object. If <paramref name="serial"/> is true, logs are guaranteed to be ordered from newest to oldest.
        /// </summary>
        /// <param name="objectId">ID of the object to retrieve logs from. If this value is 0, logs will be retrieved from the root group.</param>
        /// <param name="recordAge">Time period to retrieve logs from. Logs will be retrieved from the beginning of this period until the current date and time, ordered newest to oldest.</param>
        /// <param name="count">Number of logs to retrieve. If this value is null, all logs will be retrieved within the specified timespan.</param>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <returns>All logs that meet the specified criteria.</returns>
        public IEnumerable<Log> StreamLogs(int objectId, RecordAge recordAge, int? count = null, bool serial = false, params LogStatus[] status) =>
            StreamLogs(new LogParameters(objectId, recordAge, count, status), serial);

            #endregion
            #region Query

        /// <summary>
        /// Retrieves logs from a PRTG Server based on one or more <see cref="Queryable"/> expressions.<para/>
        /// If a lower date range is not specified, logs will be retrieved between the upper range and the beginning of all logs.
        /// If an upper range is not specified, logs will be retrieved from the current date and time. If an Id is not specified,
        /// logs will be retrieved for all objects.
        /// </summary>
        /// <returns>An <see cref="IQueryable{Log}"/> to be wrapped by <see cref="Queryable"/> LINQ Expressions.</returns>
        public IQueryable<Log> QueryLogs() => QueryLogs(null);

        /// <summary>
        /// Retrieves logs from a PRTG Server based on one or more <see cref="Queryable"/> expressions using strict parsing semantics.<para/>
        /// If a lower date range is not specified, logs will be retrieved between the upper range and the beginning of all logs.
        /// If an upper range is not specified, logs will be retrieved from the current date and time. If an Id is not specified,
        /// logs will be retrieved for all objects.
        /// </summary>
        /// <param name="strict">Whether to use strict evaluation. If true, a <see cref="NotSupportedException"/> will be thrown
        /// if an expression is encountered that cannot be evaluated server side.<para/>If <paramref name="strict"/> is false,
        /// the maximal supported expression will be executed server side, with any remaining expressions executed client side.</param>
        /// <exception cref="NotSupportedException">An expression was specified that cannot be evaluated server side.</exception>
        /// <returns>An <see cref="IQueryable{Log}"/> to be wrapped by <see cref="Queryable"/> LINQ Expressions.</returns>
        public IQueryable<Log> QueryLogs(bool strict) => QueryLogs(null, strict);

        /// <summary>
        /// Retrieves logs from a PRTG Server based on one or more <see cref="Queryable"/> expressions,
        /// starting with an expression to filter logs according to a specified predicate.<para/>
        /// If a lower date range is not specified in any predicate, logs will be retrieved between the upper range and the beginning of all logs.
        /// If an upper range is not specified, logs will be retrieved from the current date and time. If an Id is not specified,
        /// logs will be retrieved for all objects.
        /// </summary>
        /// <param name="predicate">The predicate to initially filter logs by.</param>
        /// <returns>An <see cref="IQueryable{Log}"/> representing the result of filtering the logs.</returns>
        public IQueryable<Log> QueryLogs(Expression<Func<Log, bool>> predicate) => QueryLogs(predicate, false);

        /// <summary>
        /// Retrieves logs from a PRTG Server based on one or more <see cref="Queryable"/> expressions,
        /// starting with an expression to filter logs according to a specified predicate and specifying
        /// whether to use strict parsing semantics.<para/>
        /// If a lower date range is not specified in any predicate, logs will be retrieved between the upper range and the beginning of all logs.
        /// If an upper range is not specified, logs will be retrieved from the current date and time. If an Id is not specified,
        /// logs will be retrieved for all objects.
        /// </summary>
        /// <param name="predicate">The predicate to initially filter logs by.</param>
        /// <param name="strict">Whether to use strict evaluation. If true, a <see cref="NotSupportedException"/> will be thrown
        /// if an expression is encountered that cannot be evaluated server side.<para/>If <paramref name="strict"/> is false,
        /// the maximal supported expression will be executed server side, with any remaining expressions executed client side.</param>
        /// <exception cref="NotSupportedException">An expression was specified that cannot be evaluated server side.</exception>
        /// <returns>An <see cref="IQueryable{Log}"/> representing the result of filtering the logs.</returns>
        public IQueryable<Log> QueryLogs(Expression<Func<Log, bool>> predicate, bool strict) =>
            ObjectEngine.QueryObjects(predicate, strict, () => new LogParameters(null), new QueryLogHelper(strict));

            #endregion
            #region Watch

        /// <summary>
        /// Continuously streams logs from a PRTG Server. This method will not end until you stop requesting items from it,
        /// <paramref name="progressCallback"/> returns false or the specified <see cref="CancellationToken"/> is cancelled.<para/>
        /// Logs are ordered from oldest to newest.
        /// </summary>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <param name="interval">Interval (in seconds) with which PrtgAPI should poll for new logs.</param>
        /// <param name="startDate">Start date closest to now to begin streaming logs from. Specifying a value before now will show earlier logs that have already occurred. If this value is null, logs will be retrieved from the current date and time.</param>
        /// <param name="progressCallback">Callback used to indicate how many records have been retrieved and whether to abort retrieving records.
        /// Called between each polling attempt. Takes the number of records retrieved so far as an argument. If this method returns false, streaming will abort.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>All logs that meet the specified criteria between the first log retrieved and when streaming is ended.</returns>
        public IEnumerable<Log> WatchLogs(LogStatus[] status = null, int interval = 1, DateTime? startDate = null, Func<int, bool> progressCallback = null, CancellationToken token = default(CancellationToken)) =>
            new InfiniteLogGenerator(GetLogs, null, status, interval, startDate, progressCallback, token);

        /// <summary>
        /// Continuously streams logs for a specified object from a PRTG Server. This method will not end until you stop requesting items from it,
        /// <paramref name="progressCallback"/> returns false or the specified <see cref="CancellationToken"/> is cancelled.<para/>
        /// Logs are ordered from oldest to newest.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve logs for.</param>
        /// <param name="status">Log event types to retrieve records for. If no types are specified, all record types will be retrieved.</param>
        /// <param name="interval">Interval (in seconds) with which PrtgAPI should poll for new logs.</param>
        /// <param name="startDate">Start date closest to now to begin streaming logs from. Specifying a value before now will show earlier logs that have already occurred. If this value is null, logs will be retrieved from the current date and time.</param>
        /// <param name="progressCallback">Callback used to indicate how many records have been retrieved and whether to abort retrieving records.
        /// Called between each polling attempt. Takes the number of records retrieved so far as an argument. If this method returns false, streaming will abort.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>All logs that meet the specified criteria between the first log retrieved and when streaming is ended.</returns>
        public IEnumerable<Log> WatchLogs(Either<IPrtgObject, int> objectOrId, LogStatus[] status = null, int interval = 1, DateTime? startDate = null, Func<int, bool> progressCallback = null, CancellationToken token = default(CancellationToken)) =>
            new InfiniteLogGenerator(GetLogs, objectOrId.GetId(), status, interval, startDate, progressCallback, token);

            #endregion
            #region Parameters

        /// <summary>
        /// Retrieves logs from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Logs.</param>
        /// <returns>A list of logs that match the specified parameters.</returns>
        public List<Log> GetLogs(LogParameters parameters) =>
            GetLogs(parameters, CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves logs from a PRTG Server using a custom set of parameters.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Logs.</param>
        /// <returns>A list of logs that match the specified parameters.</returns>
        public async Task<List<Log>> GetLogsAsync(LogParameters parameters) =>
            await GetLogsAsync(parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Streams logs from a PRTG Server using a custom set of parameters.<para/>
        /// If <paramref name="serial"/> is false, when this method's response is enumerated multiple parallel requests will be executed against the PRTG Server
        /// and yielded in the order they return.<para/>
        /// Otherwise, requests will be serially executed as the response is enumerated.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Logs.</param>
        /// <param name="serial">Specifies whether PrtgAPI should execute all requests one at a time rather than all at once.</param>
        /// <returns>If <paramref name="serial"/> is false, a generator encapsulating a series of <see cref="Task"/> objects capable of streaming a response from a PRTG Server. Otherwise, an enumeration that when iterated retrieves the specified objects.</returns>
        public IEnumerable<Log> StreamLogs(LogParameters parameters, bool serial = false) =>
            ObjectEngine.StreamObjects<Log, LogParameters>(parameters, serial);

            #endregion
            #region Parameters (Cancellation Token)

        /// <summary>
        /// Retrieves logs from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Logs.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of logs that match the specified parameters.</returns>
        public List<Log> GetLogs(LogParameters parameters, CancellationToken token) =>
            ObjectEngine.GetObjects<Log>(parameters, token: token);

        /// <summary>
        /// Asynchronously retrieves logs from a PRTG Server using a custom set of parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A custom set of parameters used to retrieve PRTG Logs.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of logs that match the specified parameters.</returns>
        public async Task<List<Log>> GetLogsAsync(LogParameters parameters, CancellationToken token) =>
            await ObjectEngine.GetObjectsAsync<Log>(parameters, token: token).ConfigureAwait(false);

            #endregion
        #endregion
        #region Notification Actions

        /// <summary>
        /// Retrieves a notification action with a specified ID from a PRTG Server.<para/>
        /// If the notification action does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the notification action to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified notification action does not exist or multiple notification actions were resolved with the specified ID.</exception>
        /// <returns>The notification action with the specified ID.</returns>
        public NotificationAction GetNotificationAction(int id) =>
            GetNotificationActions(Property.Id, id).SingleObject(id);

        /// <summary>
        /// Asynchronously retrieves a notification action with a specified ID from a PRTG Server.<para/>
        /// If the notification action does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the notification action to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified notification action does not exist or multiple notification actions were resolved with the specified ID.</exception>
        /// <returns>The notification action with the specified ID.</returns>
        public async Task<NotificationAction> GetNotificationActionAsync(int id) =>
            await GetNotificationActionAsync(id, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a notification action with a specified ID from a PRTG Server with a specified cancellation token.<para/>
        /// If the notification action does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the notification action to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified notification action does not exist or multiple notification actions were resolved with the specified ID.</exception>
        /// <returns>The notification action with the specified ID.</returns>
        public async Task<NotificationAction> GetNotificationActionAsync(int id, CancellationToken token) =>
            (await GetNotificationActionsAsync(Property.Id, id, token).ConfigureAwait(false)).SingleObject(id);

        /// <summary>
        /// Retrieves a notification action with a specified name from a PRTG Server. If the notification action does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="name">The name of the notification action to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified notification action does not exist or multiple notification actions were resolved with the specified name.</exception>
        /// <returns>The notification action with the specified name.</returns>
        public NotificationAction GetNotificationAction(string name) =>
            GetNotificationActions(Property.Name, AssertHasValue(name, nameof(name))).SingleObject(name, "name");

        /// <summary>
        /// Asynchronously retrieves a notification action with a specified name from a PRTG Server. If the notification action does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="name">The name of the notification action to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified notification action does not exist or multiple notification actions were resolved with the specified name.</exception>
        /// <returns>The notification action with the specified name.</returns>
        public async Task<NotificationAction> GetNotificationActionAsync(string name) =>
            await GetNotificationActionAsync(name, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a notification action with a specified name from a PRTG Server with a specified cancellation token. If the notification action does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="name">The name of the notification action to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified notification action does not exist or multiple notification actions were resolved with the specified name.</exception>
        /// <returns>The notification action with the specified name.</returns>
        public async Task<NotificationAction> GetNotificationActionAsync(string name, CancellationToken token) =>
            (await GetNotificationActionsAsync(Property.Name, AssertHasValue(name, nameof(name)), token).ConfigureAwait(false)).SingleObject(name, "name");

        /// <summary>
        /// Retrieves all notification actions from a PRTG Server.
        /// </summary>
        /// <returns>A list of all notification actions on a PRTG Server.</returns>
        public List<NotificationAction> GetNotificationActions() =>
            GetNotificationActionsInternal(new NotificationActionParameters(), CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves all notification actions from a PRTG Server.
        /// </summary>
        /// <returns>A list of all notification actions on a PRTG Server.</returns>
        public async Task<List<NotificationAction>> GetNotificationActionsAsync() =>
            await GetNotificationActionsAsync(CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all notification actions from a PRTG Server with a specified cancellation token.
        /// </summary>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of all notification actions on a PRTG Server.</returns>
        public async Task<List<NotificationAction>> GetNotificationActionsAsync(CancellationToken token) =>
            await GetNotificationActionsInternalAsync(new NotificationActionParameters(), token).ConfigureAwait(false);

        /// <summary>
        /// Retrieves notification actions from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of notification actions that match the specified search criteria.</returns>
        public List<NotificationAction> GetNotificationActions(Property property, object value) =>
            GetNotificationActions(new SearchFilter(property, value));

        /// <summary>
        /// Asynchronously retrieves notification actions from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of notification actions that match the specified search criteria.</returns>
        public async Task<List<NotificationAction>> GetNotificationActionsAsync(Property property, object value) =>
            await GetNotificationActionsAsync(property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves notification actions from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of notification actions that match the specified search criteria.</returns>
        public async Task<List<NotificationAction>> GetNotificationActionsAsync(Property property, object value, CancellationToken token) =>
            await GetNotificationActionsAsync(new[]{new SearchFilter(property, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Retrieves notification actions from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of notification actions that match the specified search criteria.</returns>
        public List<NotificationAction> GetNotificationActions(params SearchFilter[] filters) =>
            GetNotificationActionsInternal(new NotificationActionParameters(filters), CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves notification actions from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of notification actions that match the specified search criteria.</returns>
        public async Task<List<NotificationAction>> GetNotificationActionsAsync(params SearchFilter[] filters) =>
            await GetNotificationActionsAsync(filters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves notification actions from a PRTG Server, filtering for objects based on one or more conditions with a specified cancellation token.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of notification actions that match the specified search criteria.</returns>
        public async Task<List<NotificationAction>> GetNotificationActionsAsync(SearchFilter[] filters, CancellationToken token) =>
            await GetNotificationActionsInternalAsync(new NotificationActionParameters(filters), token).ConfigureAwait(false);

        #endregion
        #region Notification Triggers

        /// <summary>
        /// Retrieves all notification triggers of a PRTG Object.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve triggers for.</param>
        /// <returns>A list of notification triggers that apply to the specified object.</returns>
        public List<NotificationTrigger> GetNotificationTriggers(Either<IPrtgObject, int> objectOrId) =>
            GetNotificationTriggersInternal(objectOrId, CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves all notification triggers of a PRTG Object.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve triggers for.</param>
        /// <returns>A list of notification triggers that apply to the specified object.</returns>
        public async Task<List<NotificationTrigger>> GetNotificationTriggersAsync(Either<IPrtgObject, int> objectOrId) =>
            await GetNotificationTriggersAsync(objectOrId, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all notification triggers of a PRTG Object with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve triggers for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of notification triggers that apply to the specified object.</returns>
        public async Task<List<NotificationTrigger>> GetNotificationTriggersAsync(Either<IPrtgObject, int> objectOrId, CancellationToken token) =>
            await GetNotificationTriggersInternalAsync(objectOrId, token).ConfigureAwait(false);

        /// <summary>
        /// Retrieves all notification trigger types supported by a PRTG Object.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve supported trigger types for.</param>
        /// <returns>The trigger types supported by the object.</returns>
        public List<TriggerType> GetNotificationTriggerTypes(Either<IPrtgObject, int> objectOrId) =>
            GetNotificationTriggerData(objectOrId, CancellationToken.None).SupportedTypes.ToList();

        /// <summary>
        /// Asynchronously retrieves all notification trigger types supported by a PRTG Object.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve supported trigger types for.</param>
        /// <returns>The trigger types supported by the object.</returns>
        public async Task<List<TriggerType>> GetNotificationTriggerTypesAsync(Either<IPrtgObject, int> objectOrId) =>
            await GetNotificationTriggerTypesAsync(objectOrId, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all notification trigger types supported by a PRTG Object with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve supported trigger types for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The trigger types supported by the object.</returns>
        public async Task<List<TriggerType>> GetNotificationTriggerTypesAsync(Either<IPrtgObject, int> objectOrId, CancellationToken token) =>
            (await GetNotificationTriggerDataAsync(objectOrId, token).ConfigureAwait(false)).SupportedTypes.ToList();

        #endregion
        #region Schedules

        /// <summary>
        /// Retrieves a monitoring schedule with a specified ID from a PRTG Server.<para/>
        /// If the schedule does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the schedule to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified schedule does not exist or multiple schedules were resolved with the specified ID.</exception>
        /// <returns>The schedule with the specified ID.</returns>
        public Schedule GetSchedule(int id) =>
            GetSchedules(Property.Id, id).SingleObject(id);

        /// <summary>
        /// Asynchronously retrieves a monitoring schedule with a specified ID from a PRTG Server.<para/>
        /// If the schedule does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the schedule to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified schedule does not exist or multiple schedules were resolved with the specified ID.</exception>
        /// <returns>The schedule with the specified ID.</returns>
        public async Task<Schedule> GetScheduleAsync(int id) =>
            await GetScheduleAsync(id, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a monitoring schedule with a specified ID from a PRTG Server with a specified cancellation token.<para/>
        /// If the schedule does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="id">The ID of the schedule to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified schedule does not exist or multiple schedules were resolved with the specified ID.</exception>
        /// <returns>The schedule with the specified ID.</returns>
        public async Task<Schedule> GetScheduleAsync(int id, CancellationToken token) =>
            (await GetSchedulesAsync(Property.Id, id, token).ConfigureAwait(false)).SingleObject(id);

        /// <summary>
        /// Retrieves a monitoring schedule with a specified name from a PRTG Server.<para/>
        /// If the schedule does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="name">The name of the schedule to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified schedule does not exist or multiple schedules were resolved with the specified name.</exception>
        /// <returns>The schedule with the specified name.</returns>
        public Schedule GetSchedule(string name) =>
            GetSchedules(Property.Name, AssertHasValue(name, nameof(name))).SingleObject(name, "name");

        /// <summary>
        /// Asynchronously retrieves a monitoring schedule with a specified name from a PRTG Server.<para/>
        /// If the schedule does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="name">The name of the schedule to retrieve.</param>
        /// <exception cref="InvalidOperationException">The specified schedule does not exist or multiple schedules were resolved with the specified name.</exception>
        /// <returns>The schedule with the specified name.</returns>
        public async Task<Schedule> GetScheduleAsync(string name) =>
            await GetScheduleAsync(name, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a monitoring schedule with a specified name from a PRTG Server with a specified cancellation token.<para/>
        /// If the schedule does not exist or an ambiguous match is found, an <see cref="InvalidOperationException"/> is thrown.
        /// </summary>
        /// <param name="name">The name of the schedule to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified schedule does not exist or multiple schedules were resolved with the specified name.</exception>
        /// <returns>The schedule with the specified name.</returns>
        public async Task<Schedule> GetScheduleAsync(string name, CancellationToken token) =>
            (await GetSchedulesAsync(Property.Name, AssertHasValue(name, nameof(name)), token).ConfigureAwait(false)).SingleObject(name, "name");

        /// <summary>
        /// Retrieves all monitoring schedules from a PRTG Server.
        /// </summary>
        /// <returns>A list of all monitoring schedules supported by a PRTG Server.</returns>
        public List<Schedule> GetSchedules() =>
            GetSchedulesInternal(new ScheduleParameters(), CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves all monitoring schedules from a PRTG Server.
        /// </summary>
        /// <returns>A list of all monitoring schedules supported by a PRTG Server.</returns>
        public async Task<List<Schedule>> GetSchedulesAsync() =>
            await GetSchedulesAsync(CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all monitoring schedules from a PRTG Server with a specified cancellation token.
        /// </summary>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of all monitoring schedules supported by a PRTG Server.</returns>
        public async Task<List<Schedule>> GetSchedulesAsync(CancellationToken token) =>
            await GetSchedulesInternalAsync(new ScheduleParameters(), token).ConfigureAwait(false);

        /// <summary>
        /// Retrieves monitoring schedules from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of schedules that match the specified search criteria.</returns>
        public List<Schedule> GetSchedules(Property property, object value) =>
            GetSchedules(new SearchFilter(property, value));

        /// <summary>
        /// Asynchronously retrieves monitoring schedules from a PRTG Server based on the value of a certain property.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <returns>A list of schedules that match the specified search criteria.</returns>
        public async Task<List<Schedule>> GetSchedulesAsync(Property property, object value) =>
            await GetSchedulesAsync(property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves monitoring schedules from a PRTG Server based on the value of a certain property with a specified cancellation token.
        /// </summary>
        /// <param name="property">Property to search against.</param>
        /// <param name="value">Value to search for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of schedules that match the specified search criteria.</returns>
        public async Task<List<Schedule>> GetSchedulesAsync(Property property, object value, CancellationToken token) =>
            await GetSchedulesAsync(new[]{new SearchFilter(property, value)}, token).ConfigureAwait(false);

        /// <summary>
        /// Retrieves monitoring schedules from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of schedules that match the specified search criteria.</returns>
        public List<Schedule> GetSchedules(params SearchFilter[] filters) =>
            GetSchedulesInternal(new ScheduleParameters(filters), CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves monitoring schedules from a PRTG Server, filtering for objects based on one or more conditions.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>A list of schedules that match the specified search criteria.</returns>
        public async Task<List<Schedule>> GetSchedulesAsync(params SearchFilter[] filters) =>
            await GetSchedulesAsync(filters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves monitoring schedules from a PRTG Server, filtering for objects based on one or more conditions with a specified cancellation token.
        /// </summary>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of schedules that match the specified search criteria.</returns>
        public async Task<List<Schedule>> GetSchedulesAsync(SearchFilter[] filters, CancellationToken token) =>
            await GetSchedulesInternalAsync(new ScheduleParameters(filters), token).ConfigureAwait(false);

        #endregion
        #region Sensor History

        /// <summary>
        /// Retrieves the historical values of a sensor's channels from within a specified time period.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve historical data for.</param>
        /// <param name="average">The time span (in seconds) to average results up to. For example, a value of 300 shows the average of results every 5 minutes. If a value of 0
        /// is used, PRTG will use the true interval of the sensor.<para/>
        /// Note: due to limitations of the PRTG API, value lookup labels can only be retrieved when the average is 0, while downtime information
        /// can only be retrieved when the average is not 0.</param>
        /// <param name="startDate">The start date and time to retrieve data from. If this value is null, records will be retrieved from the current date and time.</param>
        /// <param name="endDate">The end date and time to retrieve data to. If this value is null, records will be retrieved from one day prior to <paramref name="startDate"/>.</param>
        /// <param name="count">Limit results to the specified number of items within the specified time period.</param>
        /// <returns>Historical data for the specified sensor within the desired date range.</returns>
        public List<SensorHistoryRecord> GetSensorHistory(Either<Sensor, int> sensorOrId, int average = 300, DateTime? startDate = null, DateTime? endDate = null, int? count = null)
        {
            var parameters = new SensorHistoryParameters(sensorOrId, average, startDate, endDate, count);

            return GetSensorHistoryInternal(parameters).Item1;
        }

        /// <summary>
        /// Asynchronously retrieves the historical values of a sensor's channels from within a specified time period.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve historical data for.</param>
        /// <param name="average">The time span (in seconds) to average results up to. For example, a value of 300 shows the average of results every 5 minutes. If a value of 0
        /// is used, PRTG will use the true interval of the sensor.<para/>
        /// Note: due to limitations of the PRTG API, value lookup labels can only be retrieved when the average is 0, while downtime information
        /// can only be retrieved when the average is not 0.</param>
        /// <param name="startDate">The start date and time to retrieve data from. If this value is null, records will be retrieved from the current date and time.</param>
        /// <param name="endDate">The end date and time to retrieve data to. If this value is null, records will be retrieved from one day prior to <paramref name="startDate"/>.</param>
        /// <param name="count">Limit results to the specified number of items within the specified time period.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Historical data for the specified sensor within the desired date range.</returns>
        public async Task<List<SensorHistoryRecord>> GetSensorHistoryAsync(Either<Sensor, int> sensorOrId, int average = 300, DateTime? startDate = null, DateTime? endDate = null, int? count = null, CancellationToken token = default(CancellationToken))
        {
            var parameters = new SensorHistoryParameters(sensorOrId, average, startDate, endDate, count);

            return await GetSensorHistoryInternalAsync(parameters, token).ConfigureAwait(false);
        }

        /// <summary>
        /// Streams the historical values of a sensor's channels from within a specified time period. When this method's response is enumerated,
        /// requests will be sent to PRTG as required in order to retrieve additional items.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve historical data for.</param>
        /// <param name="average">The time span (in seconds) to average results up to. For example, a value of 300 shows the average of results every 5 minutes. If a value of 0
        /// is used, PRTG will use the true interval of the sensor.<para/>
        /// Note: due to limitations of the PRTG API, value lookup labels can only be retrieved when the average is 0, while downtime information
        /// can only be retrieved when the average is not 0.</param>
        /// <param name="startDate">The start date and time to retrieve data from. If this value is null, records will be retrieved from the current date and time.</param>
        /// <param name="endDate">The end date and time to retrieve data to. If this value is null, records will be retrieved from one day prior to <paramref name="startDate"/>.</param>
        /// <returns>A generator encapsulating a series of requests capable of streaming a response from a PRTG Server.</returns>
        public IEnumerable<SensorHistoryRecord> StreamSensorHistory(Either<Sensor, int> sensorOrId, int average = 300, DateTime? startDate = null, DateTime? endDate = null)
        {
            var parameters = new SensorHistoryParameters(sensorOrId, average, startDate, endDate, null);

            return StreamSensorHistoryInternal(parameters, true);
        }

        /// <summary>
        /// Retrieves a report of <see cref="Status"/> changes of a sensor from within a specified time period.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve historical data for.</param>
        /// <param name="startDate">The start date and time to retrieve data from. If this value is null, records will be retrieved from the current date and time.</param>
        /// <param name="endDate">The end date and time to retrieve data to. If this value is null, records will be retrieved from one day prior to <paramref name="startDate"/>.</param>
        /// <returns>A report of the <see cref="Status"/> changes of the specified sensor within the desired date range.</returns>
        public List<SensorHistoryReportItem> GetSensorHistoryReport(Either<Sensor, int> sensorOrId, DateTime? startDate = null, DateTime? endDate = null)
        {
            var response = RequestEngine.ExecuteRequest(new SensorHistoryReportParameters(sensorOrId, startDate, endDate));

            return GetSensorHistoryReportInternal(sensorOrId, response);
        }

        /// <summary>
        /// Asynchronously retrieves a report of <see cref="Status"/> changes of a sensor from within a specified time period.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to retrieve historical data for.</param>
        /// <param name="startDate">The start date and time to retrieve data from. If this value is null, records will be retrieved from the current date and time.</param>
        /// <param name="endDate">The end date and time to retrieve data to. If this value is null, records will be retrieved from one day prior to <paramref name="startDate"/>.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A report of the <see cref="Status"/> changes of the specified sensor within the desired date range.</returns>
        public async Task<List<SensorHistoryReportItem>> GetSensorHistoryReportAsync(Either<Sensor, int> sensorOrId, DateTime? startDate = null, DateTime? endDate = null, CancellationToken token = default(CancellationToken))
        {
            var response = await RequestEngine.ExecuteRequestAsync(new SensorHistoryReportParameters(sensorOrId, startDate, endDate), token: token).ConfigureAwait(false);

            return GetSensorHistoryReportInternal(sensorOrId, response);
        }

        #endregion
        #region Modification History

        /// <summary>
        /// Retrieves the setting/state modification history of a PRTG Object.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve historical records for.</param>
        /// <returns>A list of all setting/state modifications to the specified object.</returns>
        public List<ModificationEvent> GetModificationHistory(Either<IPrtgObject, int> objectOrId) =>
            ResponseParser.Amend(ObjectEngine.GetObjects<ModificationEvent>(new ModificationHistoryParameters(objectOrId)), e => e.ObjectId = objectOrId.GetId());

        /// <summary>
        /// Asynchronously retrieves the setting/state modification history of a PRTG Object.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve historical records for.</param>
        /// <returns>A list of all setting/state modifications to the specified object.</returns>
        public async Task<List<ModificationEvent>> GetModificationHistoryAsync(Either<IPrtgObject, int> objectOrId) =>
            await GetModificationHistoryAsync(objectOrId, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves the setting/state modification history of a PRTG Object with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve historical records for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A list of all setting/state modifications to the specified object.</returns>
        public async Task<List<ModificationEvent>> GetModificationHistoryAsync(Either<IPrtgObject, int> objectOrId, CancellationToken token) =>
            ResponseParser.Amend(await ObjectEngine.GetObjectsAsync<ModificationEvent>(new ModificationHistoryParameters(objectOrId), token: token).ConfigureAwait(false), e => e.ObjectId = objectOrId.GetId());

        #endregion
        #region Server Status

        /// <summary>
        /// Retrieves configuration, status and version details of the PRTG Server.
        /// </summary>
        /// <returns>Status details of a PRTG Server.</returns>
        public ServerStatus GetStatus() =>
            ObjectEngine.GetObject<ServerStatus>(new ServerStatusParameters());

        /// <summary>
        /// Asynchronously retrieves configuration, status and version details of the PRTG Server.
        /// </summary>
        /// <returns>Status details of a PRTG Server.</returns>
        public async Task<ServerStatus> GetStatusAsync() =>
            await GetStatusAsync(CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves configuration, status and version details of the PRTG Server with a specified cancellation token.
        /// </summary>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Status details of a PRTG Server.</returns>
        public async Task<ServerStatus> GetStatusAsync(CancellationToken token) =>
            await ObjectEngine.GetObjectAsync<ServerStatus>(new ServerStatusParameters(), token: token).ConfigureAwait(false);

        #endregion
        #region System Informations
            #region Full

        /// <summary>
        /// Retrieves System Information including hardware, software, process, service and user information for a specified device.<para/>
        /// System Information is automatically refreshed by PRTG once every 24 hours. Devices are not guaranteed to support all system information types.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to retrieve information for.</param>
        /// <returns>A complete summary of System Information known to PRTG for the specified device.</returns>
        public SystemInfo GetSystemInfo(Either<Device, int> deviceOrId) =>
            GetSystemInfoInternal(deviceOrId);

        /// <summary>
        /// Asynchronously retrieves System Information including hardware, software, process, service and user information for a specified device.<para/>
        /// System Information is automatically refreshed by PRTG once every 24 hours. Devices are not guaranteed to support all system information types.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to retrieve information for.</param>
        /// <returns>A complete summary of System Information known to PRTG for the specified device.</returns>
        public async Task<SystemInfo> GetSystemInfoAsync(Either<Device, int> deviceOrId) =>
            await GetSystemInfoAsync(deviceOrId, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves System Information including hardware, software, process, service and user information for a specified device with a specified cancellation token.<para/>
        /// System Information is automatically refreshed by PRTG once every 24 hours. Devices are not guaranteed to support all system information types.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to retrieve information for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A complete summary of System Information known to PRTG for the specified device.</returns>
        public async Task<SystemInfo> GetSystemInfoAsync(Either<Device, int> deviceOrId, CancellationToken token) =>
            await GetSystemInfoInternalAsync(deviceOrId, token).ConfigureAwait(false);

            #endregion
            #region Generic

        /// <summary>
        /// Retrieves a specific type of system information for a specified device based on the resulting object type.
        /// </summary>
        /// <typeparam name="T">Type of System Information to retrieve.</typeparam>
        /// <param name="deviceOrId">The device or ID of the device to retrieve information for.</param>
        /// <returns>System Information known to PRTG for the specified information type for the specified device.</returns>
        public List<T> GetSystemInfo<T>(Either<Device, int> deviceOrId) where T : IDeviceInfo =>
            GetSystemInfoInternal<T>(deviceOrId, CancellationToken.None);

        /// <summary>
        /// Asynchronously retrieves a specific type of system information for a specified device based on the resulting object type.
        /// </summary>
        /// <typeparam name="T">Type of System Information to retrieve.</typeparam>
        /// <param name="deviceOrId">The device or ID of the device to retrieve information for.</param>
        /// <returns>System Information known to PRTG for the specified information type for the specified device.</returns>
        public async Task<List<T>> GetSystemInfoAsync<T>(Either<Device, int> deviceOrId) where T : IDeviceInfo =>
            await GetSystemInfoAsync<T>(deviceOrId, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a specific type of system information for a specified device based on the resulting object type with a specified cancellation token.
        /// </summary>
        /// <typeparam name="T">Type of System Information to retrieve.</typeparam>
        /// <param name="deviceOrId">The device or ID of the device to retrieve information for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>System Information known to PRTG for the specified information type for the specified device.</returns>
        public async Task<List<T>> GetSystemInfoAsync<T>(Either<Device, int> deviceOrId, CancellationToken token) where T : IDeviceInfo =>
            await GetSystemInfoInternalAsync<T>(deviceOrId, token).ConfigureAwait(false);

            #endregion
            #region Type

        /// <summary>
        /// Retrieves a specific type of system information for a specified device based on a <see cref="SystemInfoType"/>.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to retrieve information for.</param>
        /// <param name="type">Type of information to retrieve.</param>
        /// <returns>System Information known to PRTG for the specified information type for the specified device.</returns>
        public List<IDeviceInfo> GetSystemInfo(Either<Device, int> deviceOrId, SystemInfoType type) =>
            GetSystemInfoInternal(deviceOrId, type);

        /// <summary>
        /// Asynchronously retrieves a specific type of system information for a specified device based on a <see cref="SystemInfoType"/>.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to retrieve information for.</param>
        /// <param name="type">Type of information to retrieve.</param>
        /// <returns>System Information known to PRTG for the specified information type for the specified device.</returns>
        public async Task<List<IDeviceInfo>> GetSystemInfoAsync(Either<Device, int> deviceOrId, SystemInfoType type) =>
            await GetSystemInfoAsync(deviceOrId, type, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a specific type of system information for a specified device based on a <see cref="SystemInfoType"/> with a specified cancellation token.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to retrieve information for.</param>
        /// <param name="type">Type of information to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>System Information known to PRTG for the specified information type for the specified device.</returns>
        public async Task<List<IDeviceInfo>> GetSystemInfoAsync(Either<Device, int> deviceOrId, SystemInfoType type, CancellationToken token) =>
            await GetSystemInfoInternalAsync(deviceOrId, type, token).ConfigureAwait(false);

            #endregion
            #region Refresh

        /// <summary>
        /// Refreshes one or more types of system information on a specified device.<para/>
        /// If no types are specified, all information types will be refreshed.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to refresh system information for.</param>
        /// <param name="types">Types to refresh. If no types are specified, all types will be refreshed.</param>
        public void RefreshSystemInfo(Either<Device, int> deviceOrId, params SystemInfoType[] types) =>
            RefreshSystemInfoInternal(deviceOrId, types, CancellationToken.None);

        /// <summary>
        /// Asynchronously refreshes one or more types of system information on a specified device.<para/>
        /// If no types are specified, all information types will be refreshed.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to refresh system information for.</param>
        /// <param name="types">Types to refresh. If no types are specified, all types will be refreshed.</param>
        public async Task RefreshSystemInfoAsync(Either<Device, int> deviceOrId, params SystemInfoType[] types) =>
            await RefreshSystemInfoAsync(deviceOrId, types, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously refreshes one or more types of system information on a specified device with a specified cancellation token.<para/>
        /// If no types are specified, all information types will be refreshed.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to refresh system information for.</param>
        /// <param name="types">Types to refresh. If no types are specified, all types will be refreshed.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task RefreshSystemInfoAsync(Either<Device, int> deviceOrId, SystemInfoType[] types, CancellationToken token) =>
            await RefreshSystemInfoInternalAsync(deviceOrId, types, token).ConfigureAwait(false);

            #endregion
        #endregion
        #region Total Objects

        /// <summary>
        /// Calculates the total number of objects of a given type present on a PRTG Server.
        /// </summary>
        /// <param name="content">The type of object to total.</param>
        /// <returns>The total number of objects of the given type.</returns>
        public int GetTotalObjects(Content content) =>
            ObjectEngine.GetObjectsRaw<object>(new TotalObjectParameters(content)).TotalCount;

        /// <summary>
        /// Asynchronously calculates the total number of objects of a given type present on a PRTG Server.
        /// </summary>
        /// <param name="content">The type of object to total.</param>
        /// <returns>The total number of objects of the given type.</returns>
        public async Task<int> GetTotalObjectsAsync(Content content) =>
            await GetTotalObjectsAsync(content, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously calculates the total number of objects of a given type present on a PRTG Server with a specified cancellation token.
        /// </summary>
        /// <param name="content">The type of object to total.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The total number of objects of the given type.</returns>
        public async Task<int> GetTotalObjectsAsync(Content content, CancellationToken token) =>
            (await ObjectEngine.GetObjectsRawAsync<object>(new TotalObjectParameters(content), token: token).ConfigureAwait(false)).TotalCount;

        /// <summary>
        /// Calculates the total number of objects of a given type present on a PRTG Server that match one or more search criteria.
        /// </summary>
        /// <param name="content">The type of object to total.</param>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>The total number of objects of the given type.</returns>
        public int GetTotalObjects(Content content, params SearchFilter[] filters) =>
            ObjectEngine.GetObjectsRaw<object>(new TotalObjectParameters(content, filters)).TotalCount;

        /// <summary>
        /// Asynchronously calculates the total number of objects of a given type present on a PRTG Server that match one or more search criteria.
        /// </summary>
        /// <param name="content">The type of object to total.</param>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <returns>The total number of objects of the given type.</returns>
        public async Task<int> GetTotalObjectsAsync(Content content, params SearchFilter[] filters) =>
            await GetTotalObjectsAsync(content, filters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously calculates the total number of objects of a given type present on a PRTG Server that match one or more search criteria with a specified cancellation token.
        /// </summary>
        /// <param name="content">The type of object to total.</param>
        /// <param name="filters">One or more filters used to limit search results.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The total number of objects of the given type.</returns>
        public async Task<int> GetTotalObjectsAsync(Content content, SearchFilter[] filters, CancellationToken token) =>
            (await ObjectEngine.GetObjectsRawAsync<object>(new TotalObjectParameters(content, filters), token: token).ConfigureAwait(false)).TotalCount;

        #endregion
        #region Tree

        /// <summary>
        /// Retrieves a <see cref="PrtgNode"/> tree for a specified object. If no object is specified, the Root node will be used.
        /// </summary>
        /// <param name="value">The object at the root of the tree.</param>
        /// <param name="options">Specifies the types of descendants to include in the tree. If no value is specified, <see cref="TreeParseOption.Common" /> will be used.</param>
        /// <param name="progressCallback">A callback used to receive progress notifications.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A <see cref="PrtgNode"/> encapsulating the specified <paramref name="value"/> and all its descendants.</returns>
        public PrtgNode GetTree(PrtgObject value = null, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken))
        {
            if (value != null)
                return GetTree((Either<PrtgObject, int>) value, options, progressCallback, token);

            return GetTree(WellKnownId.Root, options, progressCallback, token);
        }

        /// <summary>
        /// Asynchronously retrieves a <see cref="PrtgNode"/> tree for a specified object. If no object is specified, the Root node will be used.
        /// </summary>
        /// <param name="value">The object at the root of the tree.</param>
        /// <param name="options">Specifies the types of descendants to include in the tree. If no value is specified, <see cref="TreeParseOption.Common" /> will be used.</param>
        /// <param name="progressCallback">A callback used to receive progress notifications.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A <see cref="PrtgNode"/> encapsulating the specified <paramref name="value"/> and all its descendants.</returns>
        public async Task<PrtgNode> GetTreeAsync(PrtgObject value = null, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken))
        {
            if (value != null)
                return await GetTreeAsync((Either<PrtgObject, int>) value, options, progressCallback, token).ConfigureAwait(false);

            return await GetTreeAsync(WellKnownId.Root, options, progressCallback, token).ConfigureAwait(false);
        }

        /// <summary>
        /// Retrieves a <see cref="PrtgNode"/> tree for a specified object or ID.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object at the root of the tree.</param>
        /// <param name="options">Specifies the types of descendants to include in the tree. If no value is specified, <see cref="TreeParseOption.Common" /> will be used.</param>
        /// <param name="progressCallback">A callback used to receive progress notifications.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A <see cref="PrtgNode"/> encapsulating the specified object and all its descendants.</returns>
        public PrtgNode GetTree(Either<PrtgObject, int> objectOrId, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken))
        {
            var builder = new TreeBuilder(this, options, progressCallback, TreeRequestType.Synchronous, token);

            return builder.GetTree(objectOrId).ToStandaloneNode<PrtgNode>();
        }

        /// <summary>
        /// Asynchronously retrieves a <see cref="PrtgNode"/> tree for a specified object or ID.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object at the root of the tree.</param>
        /// <param name="options">Specifies the types of descendants to include in the tree. If no value is specified, <see cref="TreeParseOption.Common" /> will be used.</param>
        /// <param name="progressCallback">A callback used to receive progress notifications.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A <see cref="PrtgNode"/> encapsulating the specified object and all its descendants.</returns>
        public async Task<PrtgNode> GetTreeAsync(Either<PrtgObject, int> objectOrId, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken))
        {
            var builder = new TreeBuilder(this, options, progressCallback, TreeRequestType.Asynchronous, token);

            return (await builder.GetTreeAsync(objectOrId).ConfigureAwait(false)).ToStandaloneNode<PrtgNode>();
        }

        /// <summary>
        /// Lazily retrieves a <see cref="PrtgNode"/> tree for a specified object. If no object is specified, the Root node will be used.<para/>
        /// Children of the root object will be retrieved on demand upon being accessed.
        /// </summary>
        /// <param name="value">The object at the root of the tree.</param>
        /// <param name="options">Specifies the types of descendants to include in the tree. If no value is specified, <see cref="TreeParseOption.Common" /> will be used.</param>
        /// <param name="progressCallback">A callback used to retrieve progress notifications when children are lazily resolved.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A <see cref="PrtgNode"/> encapsulating the specified <paramref name="value"/> that lazily calculates its descendants.</returns>
        public PrtgNode GetTreeLazy(PrtgObject value = null, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken))
        {
            if (value != null)
                return GetTreeLazy((Either<PrtgObject, int>) value, options, progressCallback, token);

            return GetTreeLazy(WellKnownId.Root, options, progressCallback, token);
        }

        /// <summary>
        /// Lazily retrieves a <see cref="PrtgNode"/> tree for a specified object or ID.<para/>
        /// Children of the root object will be retrieved on demand upon being accessed.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object at the root of the tree.</param>
        /// <param name="options">Specifies the types of descendants to include in the tree. If no value is specified, <see cref="TreeParseOption.Common" /> will be used.</param>
        /// <param name="progressCallback">A callback used to retrieve progress notifications when children are lazily resolved.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A <see cref="PrtgNode"/> encapsulating the specified object that lazily calculates its descendants.</returns>
        public PrtgNode GetTreeLazy(Either<PrtgObject, int> objectOrId, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken))
        {
            var builder = new TreeBuilder(this, options, progressCallback, TreeRequestType.Synchronous | TreeRequestType.Lazy, token);

            return builder.GetTree(objectOrId).ToStandaloneNode<PrtgNode>();
        }

        #endregion
    #endregion
    #region Object Manipulation
        #region Add Objects

        /// <summary>
        /// Adds a new sensor to a PRTG device. Based on the specified sensor parameters, multiple new sensors may be created.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device the sensor will apply to.</param>
        /// <param name="parameters">A set of parameters describing the properties of the sensor to create.
        /// Depending on the type of sensor parameters specified, this may result in the creation of several new sensors.</param>
        /// <param name="resolve">Whether to resolve the new sensors to their resultant <see cref="Sensor"/> objects.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, all new sensors that were created from the sensor <paramref name="parameters"/>. Otherwise, null.</returns>
        public List<Sensor> AddSensor(Either<Device, int> deviceOrId, NewSensorParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            AddObject(deviceOrId.ToPrtgObject(), parameters, (f, t) => GetSensors(new SensorParameters(f), t), resolve, allowMultiple: true, token: token);

        /// <summary>
        /// Asynchronously adds a new sensor to a PRTG device. Based on the specified sensor parameters, multiple new sensors may be created.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device the sensor will apply to.</param>
        /// <param name="parameters">A set of parameters describing the properties of the sensor to create.
        /// Depending on the type of sensor parameters specified, this may result in the creation of several new sensors.</param>
        /// <param name="resolve">Whether to resolve the new sensors to their resultant <see cref="Sensor"/> objects.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, all new sensors that were created from the sensor <paramref name="parameters"/>. Otherwise, null.</returns>
        public async Task<List<Sensor>> AddSensorAsync(Either<Device, int> deviceOrId, NewSensorParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            await AddObjectAsync(deviceOrId.ToPrtgObject(), parameters, async (f, t) => await GetSensorsAsync(new SensorParameters(f), t).ConfigureAwait(false), resolve, allowMultiple: true, token: token).ConfigureAwait(false);

        /// <summary>
        /// Adds a new device to a PRTG group or probe.
        /// </summary>
        /// <param name="parent">The group or probe the device will apply to.</param>
        /// <param name="name">The name to use for the new device.</param>
        /// <param name="host">The hostname or IP Address PRTG should use to communicate with the device. If this value is null, the <paramref name="name"/> will be used.</param>
        /// <param name="discoveryMode">Whether an auto-discovery should be automatically performed after device creation.</param>
        /// <param name="resolve">Whether to resolve the new device to its resultant <see cref="Device"/> object.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, the device that was created from this method's device parameters. Otherwise, null.</returns>
        public Device AddDevice(Either<GroupOrProbe, int> parent, string name, string host = null, AutoDiscoveryMode discoveryMode = AutoDiscoveryMode.Manual, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            AddDevice(parent, new NewDeviceParameters(name, host) { AutoDiscoveryMode = discoveryMode }, resolve, token: token);

        /// <summary>
        /// Asynchronously adds a new device to a PRTG group or probe.
        /// </summary>
        /// <param name="parent">The group or probe the device will apply to.</param>
        /// <param name="name">The name to use for the new device.</param>
        /// <param name="host">The hostname or IP Address PRTG should use to communicate with the device. If this value is null, the <paramref name="name"/> will be used.</param>
        /// <param name="discoveryMode">Whether an auto-discovery should be automatically performed after device creation.</param>
        /// <param name="resolve">Whether to resolve the new device to its resultant <see cref="Device"/> object.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, the device that was created from this method's device parameters. Otherwise, null.</returns>
        public async Task<Device> AddDeviceAsync(Either<GroupOrProbe, int> parent, string name, string host = null, AutoDiscoveryMode discoveryMode = AutoDiscoveryMode.Manual, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            await AddDeviceAsync(parent, new NewDeviceParameters(name, host) { AutoDiscoveryMode = discoveryMode }, resolve, token: token).ConfigureAwait(false);

        /// <summary>
        /// Adds a new device to a PRTG group or probe with a complex set of parameters.
        /// </summary>
        /// <param name="parent">The group or probe the device will apply to.</param>
        /// <param name="parameters">A set of parameters describing the properties of the device to create.</param>
        /// <param name="resolve">Whether to resolve the new device to its resultant <see cref="Device"/> object.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, the device that was created from this method's device <paramref name="parameters"/>. Otherwise, null.</returns>
        public Device AddDevice(Either<GroupOrProbe, int> parent, NewDeviceParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            AddObject(parent.ToPrtgObject(), parameters, (f, t) => GetDevices(new DeviceParameters(f), t), resolve, token: token)?.Single();

        /// <summary>
        /// Asynchronously adds a new device to a PRTG group or probe with a complex set of parameters.
        /// </summary>
        /// <param name="parent">The group or probe the device will apply to.</param>
        /// <param name="parameters">A set of parameters describing the properties of the device to create.</param>
        /// <param name="resolve">Whether to resolve the new device to its resultant <see cref="Device"/> object.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, the device that was created from this method's device <paramref name="parameters"/>. Otherwise, null.</returns>
        public async Task<Device> AddDeviceAsync(Either<GroupOrProbe, int> parent, NewDeviceParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            (await AddObjectAsync(parent.ToPrtgObject(), parameters, async (f, t) => await GetDevicesAsync(new DeviceParameters(f), t).ConfigureAwait(false), resolve, token: token).ConfigureAwait(false))?.Single();

        /// <summary>
        /// Adds a new group to a PRTG group or probe.
        /// </summary>
        /// <param name="parent">The group or probe the new group will apply to.</param>
        /// <param name="name">The name to use for the new group.</param>
        /// <param name="resolve">Whether to resolve the new group to its resultant <see cref="Group"/> object.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, the group that was created from this method's group parameters. Otherwise, null.</returns>
        public Group AddGroup(Either<GroupOrProbe, int> parent, string name, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            AddGroup(parent, new NewGroupParameters(name), resolve, token: token);

        /// <summary>
        /// Asynchronously adds a new group to a PRTG group or probe.
        /// </summary>
        /// <param name="parent">The group or probe the new group will apply to.</param>
        /// <param name="name">The name to use for the new group.</param>
        /// <param name="resolve">Whether to resolve the new group to its resultant <see cref="Group"/> object.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, the group that was created from this method's group parameters. Otherwise, null.</returns>
        public async Task<Group> AddGroupAsync(Either<GroupOrProbe, int> parent, string name, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            await AddGroupAsync(parent, new NewGroupParameters(name), resolve, token: token).ConfigureAwait(false);

        /// <summary>
        /// Adds a new group to a PRTG group or probe with a complex set of parameters.
        /// </summary>
        /// <param name="parent">The group or probe the new group will apply to.</param>
        /// <param name="parameters">A set of parameters describing the properties of the group to create.</param>
        /// <param name="resolve">Whether to resolve the new group to its resultant <see cref="Group"/> object.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, the group that was created from this method's group <paramref name="parameters"/>. Otherwise, null.</returns>
        public Group AddGroup(Either<GroupOrProbe, int> parent, NewGroupParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            AddObject(parent.ToPrtgObject(), parameters, (f, t) => GetGroups(new GroupParameters(f), t), resolve, token: token)?.Single();

        /// <summary>
        /// Asynchronously adds a new group to a PRTG group or probe with a complex set of parameters.
        /// </summary>
        /// <param name="parent">The group or probe the new group will apply to.</param>
        /// <param name="parameters">A set of parameters describing the properties of the group to create.</param>
        /// <param name="resolve">Whether to resolve the new group to its resultant <see cref="Group"/> object.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, the group that was created from this method's group <paramref name="parameters"/>. Otherwise, null.</returns>
        public async Task<Group> AddGroupAsync(Either<GroupOrProbe, int> parent, NewGroupParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            (await AddObjectAsync(parent.ToPrtgObject(), parameters, async (f, t) => await GetGroupsAsync(new GroupParameters(f), t).ConfigureAwait(false), resolve, token: token).ConfigureAwait(false))?.Single();

        /// <summary>
        /// Creates a set of dynamic sensor parameters for creating a new sensor of a specified type.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of a device that supports the specified sensor type.</param>
        /// <param name="sensorType">The type of sensor to create sensor paramters for.</param>
        /// <param name="progressCallback">A callback function used to monitor the progress of the request. If this function returns false, the request is aborted and this method returns null.</param>
        /// <param name="timeout">Duration (in seconds) to wait for sensor parameters to resolve.</param>
        /// <param name="queryParameters">A <see cref="SensorQueryTarget"/>, <see cref="SensorQueryTargetParameters"/> or <see cref="SensorMultiQueryTargetParameters"/> value specifying the parameters that must be known prior to interrogating a sensor's dynamic parameters (such as the SNMP Library file to use or IPMI UserName and Password).</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="TimeoutException">Sensor parameters failed to resolve within the specified timespan.</exception>
        /// <returns>A dynamic set of sensor parameters that store the the parameters required to create a sensor of a specified type.</returns>
        public DynamicSensorParameters GetDynamicSensorParameters(Either<Device, int> deviceOrId, string sensorType, Func<int, bool> progressCallback = null, int timeout = 60, ISensorQueryTargetParameters queryParameters = null, CancellationToken token = default(CancellationToken)) =>
            new DynamicSensorParameters(GetAddSensorQueryResponse(deviceOrId, sensorType, progressCallback, timeout, queryParameters, token), sensorType, queryParameters);

        /// <summary>
        /// Asynchronously creates a set of dynamic sensor parameters for creating a new sensor of a specified type.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of a device that supports the specified sensor type.</param>
        /// <param name="sensorType">The type of sensor to create sensor paramters for.</param>
        /// <param name="progressCallback">A callback function used to monitor the progress of the request. If this function returns false, the request is aborted and this method returns null.</param>
        /// <param name="timeout">Duration (in seconds) to wait for sensor parameters to resolve.</param>
        /// <param name="queryParameters">A <see cref="SensorQueryTarget"/>, <see cref="SensorQueryTargetParameters"/> or <see cref="SensorMultiQueryTargetParameters"/> value specifying the parameters that must be known prior to interrogating a sensor's dynamic parameters (such as the SNMP Library file to use or IPMI UserName and Password).</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="TimeoutException">Sensor parameters failed to resolve within the specified timespan.</exception>
        /// <returns>A dynamic set of sensor parameters that store the the parameters required to create a sensor of a specified type.</returns>
        public async Task<DynamicSensorParameters> GetDynamicSensorParametersAsync(Either<Device, int> deviceOrId, string sensorType, Func<int, bool> progressCallback = null, int timeout = 60, ISensorQueryTargetParameters queryParameters = null, CancellationToken token = default(CancellationToken)) =>
            new DynamicSensorParameters(await GetAddSensorQueryResponseAsync(deviceOrId, sensorType, progressCallback, timeout, queryParameters, token).ConfigureAwait(false), sensorType, queryParameters);

        /// <summary>
        /// Automatically creates sensors under an object based on the object's (or it's children's) device type.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to run Auto-Discovery for (such as a device or group).</param>
        /// <param name="templates">An optional list of device templates to use for performing the auto-discovery.</param>
        public void AutoDiscover(Either<IPrtgObject, int> objectOrId, params DeviceTemplate[] templates) =>
            RequestEngine.ExecuteRequest(new AutoDiscoverParameters(objectOrId, templates));

        /// <summary>
        /// Asynchronously automatically creates sensors under an object based on the object's (or it's children's) device type.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to run Auto-Discovery for (such as a device or group).</param>
        /// <param name="templates">An optional list of device templates to use for performing the auto-discovery.</param>
        public async Task AutoDiscoverAsync(Either<IPrtgObject, int> objectOrId, params DeviceTemplate[] templates) =>
            await AutoDiscoverAsync(objectOrId, templates, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously automatically creates sensors under an object based on the object's (or it's children's) device type with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to run Auto-Discovery for (such as a device or group).</param>
        /// <param name="templates">An optional list of device templates to use for performing the auto-discovery.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task AutoDiscoverAsync(Either<IPrtgObject, int> objectOrId, DeviceTemplate[] templates, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new AutoDiscoverParameters(objectOrId, templates), token: token).ConfigureAwait(false);

        #endregion
        #region Sensor State
            #region Acknowledge

        /// <summary>
        /// Marks a <see cref="Status.Down"/> sensor as <see cref="Status.DownAcknowledged"/>. If an acknowledged sensor returns to <see cref="Status.Up"/>, it will not be acknowledged when it goes down again.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to acknowledge.</param>
        /// <param name="duration">Duration (in minutes) to acknowledge the sensor for. If null, sensor will be acknowledged indefinitely.</param>
        /// <param name="message">Message to display on the acknowledged sensor.</param>
        public void AcknowledgeSensor(Either<Sensor, int> sensorOrId, int? duration = null, string message = null) =>
            AcknowledgeSensor(new[] {sensorOrId.GetId()}, duration, message);

        /// <summary>
        /// Marks one or more <see cref="Status.Down"/> sensors as <see cref="Status.DownAcknowledged"/>. If an acknowledged sensor returns to <see cref="Status.Up"/>, it will not be acknowledged when it goes down again.
        /// </summary>
        /// <param name="sensorIds">IDs of the sensors to acknowledge.</param>
        /// <param name="duration">Duration (in minutes) to acknowledge the sensors for. If null, sensors will be acknowledged indefinitely.</param>
        /// <param name="message">Message to display on the acknowledged sensors.</param>
        public void AcknowledgeSensor(int[] sensorIds, int? duration = null, string message = null) =>
            RequestEngine.ExecuteRequest(new AcknowledgeSensorParameters(sensorIds, duration, message));

        /// <summary>
        /// Asynchronously marks a <see cref="Status.Down"/> sensor as <see cref="Status.DownAcknowledged"/>. If an acknowledged sensor returns to <see cref="Status.Up"/>, it will not be acknowledged when it goes down again.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor to acknowledge.</param>
        /// <param name="duration">Duration (in minutes) to acknowledge the sensor for. If null, sensor will be acknowledged indefinitely.</param>
        /// <param name="message">Message to display on the acknowledged sensor.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task AcknowledgeSensorAsync(Either<Sensor, int> sensorOrId, int? duration = null, string message = null, CancellationToken token = default(CancellationToken)) =>
            await AcknowledgeSensorAsync(new[] {sensorOrId.GetId()}, duration, message, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously marks one or more <see cref="Status.Down"/> sensors as <see cref="Status.DownAcknowledged"/>. If an acknowledged sensor returns to <see cref="Status.Up"/>, it will not be acknowledged when it goes down again.
        /// </summary>
        /// <param name="sensorIds">IDs of the sensors to acknowledge.</param>
        /// <param name="duration">Duration (in minutes) to acknowledge the sensors for. If null, sensors will be acknowledged indefinitely.</param>
        /// <param name="message">Message to display on the acknowledged sensors.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task AcknowledgeSensorAsync(int[] sensorIds, int? duration = null, string message = null, CancellationToken token = default(CancellationToken)) =>
            await RequestEngine.ExecuteRequestAsync(new AcknowledgeSensorParameters(sensorIds, duration, message), token: token).ConfigureAwait(false);

            #endregion
            #region Pause

        /// <summary>
        /// Pauses monitoring on a PRTG Object and all child objects.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to pause.</param>
        /// <param name="duration">Duration (in minutes) to pause the object for. If null, object will be paused indefinitely.</param>
        /// <param name="message">Message to display on the paused object.</param>
        public void PauseObject(Either<IPrtgObject, int> objectOrId, int? duration = null, string message = null) =>
            PauseObject(new[] {objectOrId.GetId()}, duration, message);

        /// <summary>
        /// Pauses monitoring on one or more PRTG Objects and all child objects.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to pause.</param>
        /// <param name="duration">Duration (in minutes) to pause the object for. If null, object will be paused indefinitely.</param>
        /// <param name="message">Message to display on the paused objects.</param>
        public void PauseObject(int[] objectIds, int? duration = null, string message = null) =>
            RequestEngine.ExecuteRequest(new PauseParameters(objectIds, duration, message));

        /// <summary>
        /// Asynchronously pauses monitoring on a PRTG Object and all child objects.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to pause.</param>
        /// <param name="duration">Duration (in minutes) to pause the object for. If null, object will be paused indefinitely.</param>
        /// <param name="message">Message to display on the paused object.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task PauseObjectAsync(Either<IPrtgObject, int> objectOrId, int? duration = null, string message = null, CancellationToken token = default(CancellationToken)) =>
            await PauseObjectAsync(new[] {objectOrId.GetId()}, duration, message, token: token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously pauses monitoring on one or more PRTG Objects and all child objects.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to pause.</param>
        /// <param name="duration">Duration (in minutes) to pause the object for. If null, object will be paused indefinitely.</param>
        /// <param name="message">Message to display on the paused objects.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task PauseObjectAsync(int[] objectIds, int? duration = null, string message = null, CancellationToken token = default(CancellationToken)) =>
            await RequestEngine.ExecuteRequestAsync(new PauseParameters(objectIds, duration, message), token: token).ConfigureAwait(false);

            #endregion
            #region Resume

        /// <summary>
        /// Resumes monitoring on one or more PRTG Objects (including sensors, devices, groups and probes) from a Paused or Simulated Error state.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to resume.</param>
        public void ResumeObject(params int[] objectIds) =>
            RequestEngine.ExecuteRequest(new PauseParameters(objectIds, PauseAction.Resume));

        /// <summary>
        /// Asynchronously resumes monitoring on one or more PRTG Objects (including sensors, devices, groups and probes) from a Paused or Simulated Error state.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to resume.</param>
        public async Task ResumeObjectAsync(params int[] objectIds) =>
            await ResumeObjectAsync(objectIds, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously resumes monitoring on one or more PRTG Objects (including sensors, devices, groups and probes) from a Paused or Simulated Error state with a specified cancellation token.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to resume.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task ResumeObjectAsync(int[] objectIds, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new PauseParameters(objectIds, PauseAction.Resume), token: token).ConfigureAwait(false);

            #endregion
            #region Simulate Error

        /// <summary>
        /// Simulates a <see cref="Status.Down"/> state for one or more sensors.
        /// </summary>
        /// <param name="sensorIds">IDs of the sensors to simulate an error for.</param>
        public void SimulateError(params int[] sensorIds) =>
            RequestEngine.ExecuteRequest(new SimulateErrorParameters(sensorIds));

        /// <summary>
        /// Asynchronously simulates a <see cref="Status.Down"/> state for one or more sensors.
        /// </summary>
        /// <param name="sensorIds">IDs of the sensors to simulate an error for.</param>
        public async Task SimulateErrorAsync(params int[] sensorIds) =>
            await SimulateErrorAsync(sensorIds, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously simulates a <see cref="Status.Down"/> state for one or more sensors with a specified cancellation token.
        /// </summary>
        /// <param name="sensorIds">IDs of the sensors to simulate an error for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SimulateErrorAsync(int[] sensorIds, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new SimulateErrorParameters(sensorIds), token: token).ConfigureAwait(false);

            #endregion
        #endregion
        #region Notifications

        /// <summary>
        /// Adds a notification trigger to an object specified by a set of trigger parameters.
        /// </summary>
        /// <param name="parameters">A set of parameters describing the type of notification trigger to create and the object to apply it to.</param>
        /// <param name="resolve">Whether to resolve the new trigger to its resultant <see cref="NotificationTrigger"/> object.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, the trigger that was created from this method's trigger parameters. Otherwise, null.</returns>
        public NotificationTrigger AddNotificationTrigger(TriggerParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            AddNotificationTriggerInternal(parameters, resolve, token)?.Single();

        /// <summary>
        /// Asynchronously adds a notification trigger to an object specified by a set of trigger parameters.
        /// </summary>
        /// <param name="parameters">A set of parameters describing the type of notification trigger to create and the object to apply it to.</param>
        /// <param name="resolve">Whether to resolve the new trigger to its resultant <see cref="NotificationTrigger"/> object.
        /// If this value is false, this method will return null.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>If <paramref name="resolve"/> is true, the trigger that was created from this method's trigger parameters. Otherwise, null.</returns>
        public async Task<NotificationTrigger> AddNotificationTriggerAsync(TriggerParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) =>
            (await AddNotificationTriggerInternalAsync(parameters, resolve, token).ConfigureAwait(false))?.Single();

        /// <summary>
        /// Adds or edits a notification trigger on an object specified by a set of trigger parameters.
        /// </summary>
        /// <param name="parameters">A set of parameters describing the type of notification trigger and how to manipulate it.</param>
        public void SetNotificationTrigger(TriggerParameters parameters) =>
            SetNotificationTriggerInternal(parameters, CancellationToken.None);

        /// <summary>
        /// Asynchronously adds or edits a notification trigger on an object specified by a set of trigger parameters.
        /// </summary>
        /// <param name="parameters">A set of parameters describing the type of notification trigger and how to manipulate it.</param>
        public async Task SetNotificationTriggerAsync(TriggerParameters parameters) =>
            await SetNotificationTriggerAsync(parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously adds or edits a notification trigger on an object specified by a set of trigger parameters with a specified cancellation token.
        /// </summary>
        /// <param name="parameters">A set of parameters describing the type of notification trigger and how to manipulate it.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetNotificationTriggerAsync(TriggerParameters parameters, CancellationToken token) =>
            await SetNotificationTriggerInternalAsync(parameters, token).ConfigureAwait(false);

        /// <summary>
        /// Removes a notification trigger from an object.<para/>
        /// Triggers can only be removed from their parent objects, and cannot be removed from objects that have inherited them.
        /// </summary>
        /// <param name="trigger">The notification trigger to remove.</param>
        /// <exception cref="InvalidOperationException">The <paramref name="trigger"/> was inherited from another object.</exception>
        public void RemoveNotificationTrigger(NotificationTrigger trigger) =>
            RequestEngine.ExecuteRequest(new RemoveTriggerParameters(trigger));

        /// <summary>
        /// Asynchronously removes a notification trigger from an object.<para/>
        /// Triggers can only be removed from their parent objects, and cannot be removed from objects that have inherited them.
        /// </summary>
        /// <param name="trigger">The notification trigger to remove.</param>
        /// <exception cref="InvalidOperationException">The <paramref name="trigger"/> was inherited from another object.</exception>
        public async Task RemoveNotificationTriggerAsync(NotificationTrigger trigger) =>
            await RemoveNotificationTriggerAsync(trigger, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously removes a notification trigger from an object with a specified cancellation token.<para/>
        /// Triggers can only be removed from their parent objects, and cannot be removed from objects that have inherited them.
        /// </summary>
        /// <param name="trigger">The notification trigger to remove.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The <paramref name="trigger"/> was inherited from another object.</exception>
        public async Task RemoveNotificationTriggerAsync(NotificationTrigger trigger, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new RemoveTriggerParameters(trigger), token: token).ConfigureAwait(false);

        #endregion
        #region Clone Object

        /// <summary>
        /// Clones a sensor or group to another device or group.
        /// </summary>
        /// <param name="objectOrId">The sensor or group to clone.</param>
        /// <param name="cloneName">The name that should be given to the cloned object.</param>
        /// <param name="destinationObjectOrId">If this is a sensor, the device or ID of the device to clone to. If this is a group, the object or ID of the group or probe to clone to.</param>
        /// <returns>The ID of the object that was created.</returns>
        public int CloneObject(Either<IPrtgObject, int> objectOrId, string cloneName, Either<DeviceOrGroupOrProbe, int> destinationObjectOrId) =>
            CloneObject(new CloneParameters(objectOrId.ToPrtgObject(), cloneName, destinationObjectOrId.ToPrtgObject()), CancellationToken.None);

        /// <summary>
        /// Clones a device to another group or probe.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to clone.</param>
        /// <param name="cloneName">The name that should be given to the cloned device.</param>
        /// <param name="host">The hostname or IP Address that should be assigned to the new device.</param>
        /// <param name="destinationObjectOrId">The group or probe the device should be cloned to.</param>
        /// <returns>The ID of the object that was created.</returns>
        public int CloneObject(Either<Device, int> deviceOrId, string cloneName, string host, Either<GroupOrProbe, int> destinationObjectOrId) =>
            CloneObject(new CloneParameters(deviceOrId, cloneName, destinationObjectOrId, host), CancellationToken.None);

        /// <summary>
        /// Asynchronously clones a sensor or group to another device or group.
        /// </summary>
        /// <param name="objectOrId">The sensor or group to clone.</param>
        /// <param name="cloneName">The name that should be given to the cloned object.</param>
        /// <param name="destinationObjectOrId">If this is a sensor, the device or ID of the device to clone to. If this is a group, the object or ID of the group or probe to clone to.</param>
        /// <returns>The ID of the object that was created.</returns>
        public async Task<int> CloneObjectAsync(Either<IPrtgObject, int> objectOrId, string cloneName, Either<DeviceOrGroupOrProbe, int> destinationObjectOrId) =>
            await CloneObjectAsync(objectOrId, cloneName, destinationObjectOrId, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously clones a sensor or group to another device or group with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The sensor or group to clone.</param>
        /// <param name="cloneName">The name that should be given to the cloned object.</param>
        /// <param name="destinationObjectOrId">If this is a sensor, the device or ID of the device to clone to. If this is a group, the object or ID of the group or probe to clone to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The ID of the object that was created.</returns>
        public async Task<int> CloneObjectAsync(Either<IPrtgObject, int> objectOrId, string cloneName, Either<DeviceOrGroupOrProbe, int> destinationObjectOrId, CancellationToken token) =>
            await CloneObjectAsync(new CloneParameters(objectOrId.ToPrtgObject(), cloneName, destinationObjectOrId.ToPrtgObject()), token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously clones a device to another group or probe.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to clone.</param>
        /// <param name="cloneName">The name that should be given to the cloned device.</param>
        /// <param name="host">The hostname or IP Address that should be assigned to the new device.</param>
        /// <param name="destinationObjectOrId">The group or probe the device should be cloned to.</param>
        /// <returns>The ID of the object that was created.</returns>
        public async Task<int> CloneObjectAsync(Either<Device, int> deviceOrId, string cloneName, string host, Either<GroupOrProbe, int> destinationObjectOrId) =>
            await CloneObjectAsync(deviceOrId, cloneName, host, destinationObjectOrId, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously clones a device to another group or probe with a specified cancellation token.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to clone.</param>
        /// <param name="cloneName">The name that should be given to the cloned device.</param>
        /// <param name="host">The hostname or IP Address that should be assigned to the new device.</param>
        /// <param name="destinationObjectOrId">The group or probe the device should be cloned to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The ID of the object that was created.</returns>
        public async Task<int> CloneObjectAsync(Either<Device, int> deviceOrId, string cloneName, string host, Either<GroupOrProbe, int> destinationObjectOrId, CancellationToken token) =>
            await CloneObjectAsync(new CloneParameters(deviceOrId, cloneName, destinationObjectOrId, host), token).ConfigureAwait(false);

        #endregion
        #region Get Object Properties
            #region Get Typed Properties
                #region Sensors

        /// <summary>
        /// Retrieves properties and settings of a PRTG Sensor.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="sensor">The sensor or ID of the sensor to retrieve settings for.</param>
        /// <exception cref="InvalidOperationException">The specified sensor is read only. To retrieve properties from read only sensors, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified sensor.</returns>
        public SensorSettings GetSensorProperties(Either<Sensor, int> sensor) =>
            GetObjectProperties<SensorSettings>(sensor.ToPrtgObject(), ObjectType.Sensor, ObjectProperty.Name);

        /// <summary>
        /// Asynchronously retrieves properties and settings of a PRTG Sensor.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="sensor">The sensor or ID of the sensor to retrieve settings for.</param>
        /// <exception cref="InvalidOperationException">The specified sensor is read only. To retrieve properties from read only sensors, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified sensor.</returns>
        public async Task<SensorSettings> GetSensorPropertiesAsync(Either<Sensor, int> sensor) =>
            await GetSensorPropertiesAsync(sensor, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves properties and settings of a PRTG Sensor with a specified cancellation token.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="sensor">The sensor or ID of the sensor to retrieve settings for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified sensor is read only. To retrieve properties from read only sensors, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified sensor.</returns>
        public async Task<SensorSettings> GetSensorPropertiesAsync(Either<Sensor, int> sensor, CancellationToken token) =>
            await GetObjectPropertiesAsync<SensorSettings>(sensor.ToPrtgObject(), ObjectType.Sensor, ObjectProperty.Name, token).ConfigureAwait(false);

                #endregion
                #region Devices

        /// <summary>
        /// Retrieves properties and settings of a PRTG Device.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="device">The device or ID of the device to retrieve settings for.</param>
        /// <exception cref="InvalidOperationException">The specified device is read only. To retrieve properties from read only devices, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified device.</returns>
        public DeviceSettings GetDeviceProperties(Either<Device, int> device) =>
            GetObjectProperties<DeviceSettings>(device.ToPrtgObject(), ObjectType.Device, ObjectProperty.Name);

        /// <summary>
        /// Asynchronously retrieves properties and settings of a PRTG Device.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="device">The device or ID of the device to retrieve settings for.</param>
        /// <exception cref="InvalidOperationException">The specified device is read only. To retrieve properties from read only devices, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified device.</returns>
        public async Task<DeviceSettings> GetDevicePropertiesAsync(Either<Device, int> device) =>
            await GetDevicePropertiesAsync(device, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves properties and settings of a PRTG Device with a specified cancellation token.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="device">The device or ID of the device to retrieve settings for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified device is read only. To retrieve properties from read only devices, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified device.</returns>
        public async Task<DeviceSettings> GetDevicePropertiesAsync(Either<Device, int> device, CancellationToken token) =>
            await GetObjectPropertiesAsync<DeviceSettings>(device.ToPrtgObject(), ObjectType.Device, ObjectProperty.Name, token).ConfigureAwait(false);

                #endregion
                #region Groups

        /// <summary>
        /// Retrieves properties and settings of a PRTG Group.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="group">The group or ID of the group to retrieve settings for.</param>
        /// <exception cref="InvalidOperationException">The specified group is read only. To retrieve properties from read only groups, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified group.</returns>
        public GroupSettings GetGroupProperties(Either<Group, int> group) =>
            GetObjectProperties<GroupSettings>(group.ToPrtgObject(), ObjectType.Group, ObjectProperty.Name);

        /// <summary>
        /// Asynchronously retrieves properties and settings of a PRTG Group.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="group">The group or ID of the group to retrieve settings for.</param>
        /// <exception cref="InvalidOperationException">The specified group is read only. To retrieve properties from read only groups, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified group.</returns>
        public async Task<GroupSettings> GetGroupPropertiesAsync(Either<Group, int> group) =>
            await GetGroupPropertiesAsync(group, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves properties and settings of a PRTG Group with a specified cancellation token.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="group">The group or ID of the group to retrieve settings for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified group is read only. To retrieve properties from read only groups, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified group.</returns>
        public async Task<GroupSettings> GetGroupPropertiesAsync(Either<Group, int> group, CancellationToken token) =>
            await GetObjectPropertiesAsync<GroupSettings>(group.ToPrtgObject(), ObjectType.Group, ObjectProperty.Name, token).ConfigureAwait(false);

                #endregion
                #region Probes

        /// <summary>
        /// Retrieves properties and settings of a PRTG Probe.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="probe">The probe or ID of the probe to retrieve settings for.</param>
        /// <exception cref="InvalidOperationException">The specified probe is read only. To retrieve properties from read only probes, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified probe.</returns>
        public ProbeSettings GetProbeProperties(Either<Probe, int> probe) =>
            GetObjectProperties<ProbeSettings>(probe.ToPrtgObject(), ObjectType.Probe, ObjectProperty.Name);

        /// <summary>
        /// Asynchronously retrieves properties and settings of a PRTG Probe.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="probe">The probe or ID of the probe to retrieve settings for.</param>
        /// <exception cref="InvalidOperationException">The specified probe is read only. To retrieve properties from read only probes, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified probe.</returns>
        public async Task<ProbeSettings> GetProbePropertiesAsync(Either<Probe, int> probe) =>
            await GetProbePropertiesAsync(probe, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves properties and settings of a PRTG Probe with a specified cancellation token.<para/>
        /// If the current user does not have write access to the specified object, an <see cref="InvalidOperationException"/> will be thrown.
        /// </summary>
        /// <param name="probe">The probe or ID of the probe to retrieve settings for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified probe is read only. To retrieve properties from read only probes, use <see cref="GetObjectProperty(Either{IPrtgObject, int}, ObjectProperty)"/>.</exception>
        /// <returns>All settings of the specified probe.</returns>
        public async Task<ProbeSettings> GetProbePropertiesAsync(Either<Probe, int> probe, CancellationToken token) =>
            await GetObjectPropertiesAsync<ProbeSettings>(probe.ToPrtgObject(), ObjectType.Probe, ObjectProperty.Name, token).ConfigureAwait(false);

                #endregion
            #endregion
            #region Get Multiple Raw Properties

        /// <summary>
        /// Retrieves all raw properties and settings of a PRTG Object. Note: objects may have additional properties
        /// that cannot be retrieved via this method.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve settings and properties for.</param>
        /// <param name="objectType">The type of object to retrieve settings and properties for.</param>
        /// <returns>A dictionary mapping all discoverable properties to raw values.</returns>
        public Dictionary<string, string> GetObjectPropertiesRaw(Either<IPrtgObject, int> objectOrId, ObjectType objectType) =>
            GetObjectPropertiesRawDictionary(objectOrId, objectType);

        /// <summary>
        /// Retrieves all raw properties and settings of an unsupported object type. Note: objects may have additional properties
        /// that cannot be retrieved via this method.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve settings and properties for.</param>
        /// <param name="objectType">The type of object to retrieve settings and properties for.
        /// If this value is null, PRTG will attempt to guess the object type based on the specified <paramref name="objectOrId"/>.</param>
        /// <returns>A dictionary mapping all discoverable properties to raw values.</returns>
        public Dictionary<string, string> GetObjectPropertiesRaw(Either<IPrtgObject, int> objectOrId, string objectType = null) =>
            GetObjectPropertiesRawDictionary(objectOrId, objectType);

        /// <summary>
        /// Asynchronously retrieves all raw properties and settings of a PRTG Object. Note: objects may have additional properties
        /// that cannot be retrieved via this method.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve settings and properties for.</param>
        /// <param name="objectType">The type of object to retrieve settings and properties for.</param>
        /// <returns>A dictionary mapping all discoverable properties to raw values.</returns>
        public async Task<Dictionary<string, string>> GetObjectPropertiesRawAsync(Either<IPrtgObject, int> objectOrId, ObjectType objectType) =>
            await GetObjectPropertiesRawAsync(objectOrId, objectType, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all raw properties and settings of a PRTG Object with a specified cancellation token. Note: objects may have additional properties
        /// that cannot be retrieved via this method.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve settings and properties for.</param>
        /// <param name="objectType">The type of object to retrieve settings and properties for.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A dictionary mapping all discoverable properties to raw values.</returns>
        public async Task<Dictionary<string, string>> GetObjectPropertiesRawAsync(Either<IPrtgObject, int> objectOrId, ObjectType objectType, CancellationToken token) =>
            await GetObjectPropertiesRawDictionaryAsync(objectOrId, objectType, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves all raw properties and settings of an unsupported object type. Note: objects may have additional properties
        /// that cannot be retrieved via this method.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve settings and properties for.</param>
        /// <param name="objectType">The type of object to retrieve settings and properties for.
        /// If this value is null, PRTG will attempt to guess the object type based on the specified <paramref name="objectOrId"/>.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A dictionary mapping all discoverable properties to raw values.</returns>
        public async Task<Dictionary<string, string>> GetObjectPropertiesRawAsync(Either<IPrtgObject, int> objectOrId, string objectType = null, CancellationToken token = default(CancellationToken)) =>
            await GetObjectPropertiesRawDictionaryAsync(objectOrId, objectType, token).ConfigureAwait(false);

            #endregion
            #region Get Single Typed Property

        /// <summary>
        /// Retrieves a type safe property from a PRTG Server.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve the property from.</param>
        /// <param name="property">The well known property to retrieve.</param>
        /// <returns>A type safe representation of the specified property.</returns>
        public object GetObjectProperty(Either<IPrtgObject, int> objectOrId, ObjectProperty property) =>
            GetObjectPropertyInternal(objectOrId, property);

        /// <summary>
        /// Asynchronously retrieves a type safe property from a PRTG Server.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve the property from.</param>
        /// <param name="property">The well known property to retrieve.</param>
        /// <returns>A type safe representation of the specified property.</returns>
        public async Task<object> GetObjectPropertyAsync(Either<IPrtgObject, int> objectOrId, ObjectProperty property) =>
            await GetObjectPropertyAsync(objectOrId, property, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a type safe property from a PRTG Server with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to retrieve the property from.</param>
        /// <param name="property">The well known property to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>A type safe representation of the specified property.</returns>
        public async Task<object> GetObjectPropertyAsync(Either<IPrtgObject, int> objectOrId, ObjectProperty property, CancellationToken token) =>
            await GetObjectPropertyInternalAsync(objectOrId, property, token).ConfigureAwait(false);

        /// <summary>
        /// Retrieves a type safe property from a PRTG Server, cast to its actual type. If the deserialized value is not of the type specified,
        /// an <see cref="InvalidCastException"/> will be thrown.
        /// </summary>
        /// <typeparam name="T">The type to cast the object to.</typeparam>
        /// <param name="objectOrId">The object or ID of the object to retrieve the property from.</param>
        /// <param name="property">The well known property to retrieve.</param>
        /// <exception cref="InvalidCastException">The deserialized value could not be cast to the specified type.</exception>
        /// <returns>A type safe representation of the specified property, cast to its actual type.</returns>
        public T GetObjectProperty<T>(Either<IPrtgObject, int> objectOrId, ObjectProperty property) =>
            ResponseParser.GetTypedProperty<T>(GetObjectProperty(objectOrId, property));

        /// <summary>
        /// Asynchronously retrieves a type safe property from a PRTG Server, cast to its actual type. If the deserialized value is not of the type specified,
        /// an <see cref="InvalidCastException"/> will be thrown.
        /// </summary>
        /// <typeparam name="T">The type to cast the object to.</typeparam>
        /// <param name="objectOrId">The object or ID of the object to retrieve the property from.</param>
        /// <param name="property">The well known property to retrieve.</param>
        /// <exception cref="InvalidCastException">The deserialized value could not be cast to the specified type.</exception>
        /// <returns>A type safe representation of the specified property, cast to its actual type.</returns>
        public async Task<T> GetObjectPropertyAsync<T>(Either<IPrtgObject, int> objectOrId, ObjectProperty property) =>
            await GetObjectPropertyAsync<T>(objectOrId, property, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously retrieves a type safe property from a PRTG Server, cast to its actual type with a specified cancellation token. If the deserialized value is not of the type specified,
        /// an <see cref="InvalidCastException"/> will be thrown.
        /// </summary>
        /// <typeparam name="T">The type to cast the object to.</typeparam>
        /// <param name="objectOrId">The object or ID of the object to retrieve the property from.</param>
        /// <param name="property">The well known property to retrieve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidCastException">The deserialized value could not be cast to the specified type.</exception>
        /// <returns>A type safe representation of the specified property, cast to its actual type.</returns>
        public async Task<T> GetObjectPropertyAsync<T>(Either<IPrtgObject, int> objectOrId, ObjectProperty property, CancellationToken token) =>
            ResponseParser.GetTypedProperty<T>(await GetObjectPropertyAsync(objectOrId, property, token).ConfigureAwait(false));

            #endregion
            #region Get Single Raw Property

        /// <summary>
        /// Retrieves unsupported properties and settings of a PRTG Object.<para/>
        /// If the specified property does not exist, a <see cref="PrtgRequestException"/> will be thrown, unless
        /// the PRTG Server is not in English, in which case "(Property not found)" will be returned in your server's native language.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose property should be retrieved.</param>
        /// <param name="property">The property of the object to retrieve. This can be typically discovered by inspecting the "name" attribute of the properties' &lt;input/&gt; tag on the Settings page of PRTG.<para/>
        /// If the properties name ends in an underscore, this must be included.</param>
        /// <param name="text">If true, displays option properties using their label names instead of their internal numeric values.</param>
        /// <exception cref="PrtgRequestException">The specified property does not exist and the PRTG Server's language is English.</exception>
        /// <returns>The raw value of the object's property.</returns>
        public string GetObjectPropertyRaw(Either<IPrtgObject, int> objectOrId, string property, bool text = false) =>
            GetObjectPropertyRawInternal(new GetObjectPropertyRawParameters(objectOrId, property, text), property);

        /// <summary>
        /// Asynchronously retrieves unsupported properties and settings of a PRTG Object.<para/>
        /// If the specified property does not exist, a <see cref="PrtgRequestException"/> will be thrown, unless
        /// the PRTG Server is not in English, in which case "(Property not found)" will be returned in your server's native language.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose property should be retrieved.</param>
        /// <param name="property">The property of the object to retrieve. This can be typically discovered by inspecting the "name" attribute of the properties' &lt;input/&gt; tag on the Settings page of PRTG.<para/>
        /// If the properties name ends in an underscore, this must be included.</param>
        /// <param name="text">If true, displays option properties using their label names instead of their internal numeric values.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="PrtgRequestException">The specified property does not exist and the PRTG Server's language is English.</exception>
        /// <returns>The raw value of the object's property.</returns>
        public async Task<string> GetObjectPropertyRawAsync(Either<IPrtgObject, int> objectOrId, string property, bool text = false, CancellationToken token = default(CancellationToken)) =>
            await GetObjectPropertyRawInternalAsync(new GetObjectPropertyRawParameters(objectOrId, property, text), property, token).ConfigureAwait(false);

            #endregion
            #region Get Single Sub Raw Property

        /// <summary>
        /// Retrieves unsupported properties and settings of a PRTG <see cref="ISubObject"/> such as Channels and Notification Triggers.<para/>
        /// If the specified property does not exist, a <see cref="PrtgRequestException"/> will be thrown, unless
        /// the PRTG Server is not in English, in which case "(Property not found)" will be returned in your server's native language.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose property should be retrieved.</param>
        /// <param name="subId">The ID of the sub object whose property should be retrieved.</param>
        /// <param name="subType">The type of sub object to retrieve the property from.</param>
        /// <param name="property">The property of the object to retrieve. This can be typically discovered by inspecting the "name" attribute of the properties' &lt;input/&gt; tag on the Settings page of PRTG.<para/>
        /// If the properties name ends in an underscore, this must be included.</param>
        /// <param name="text">If true, displays option properties using their label names instead of their internal numeric values.</param>
        /// <exception cref="PrtgRequestException">The specified property does not exist and the PRTG Server's language is English.</exception>
        /// <returns>The raw value of the sub object's property.</returns>
        public string GetObjectPropertyRaw(Either<IPrtgObject, int> objectOrId, int subId, string subType, string property, bool text = false) =>
            GetObjectPropertyRawInternal(new GetObjectPropertyRawParameters(objectOrId, subId, subType, property, text), property);

        /// <summary>
        /// Asynchronously retrieves unsupported properties and settings of a PRTG <see cref="ISubObject"/> such as Channels and Notification Triggers.<para/>
        /// If the specified property does not exist, a <see cref="PrtgRequestException"/> will be thrown, unless
        /// the PRTG Server is not in English, in which case "(Property not found)" will be returned in your server's native language.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose property should be retrieved.</param>
        /// <param name="subId">The ID of the sub object whose property should be retrieved.</param>
        /// <param name="subType">The type of sub object to retrieve the property from.</param>
        /// <param name="property">The property of the object to retrieve. This can be typically discovered by inspecting the "name" attribute of the properties' &lt;input/&gt; tag on the Settings page of PRTG.<para/>
        /// If the properties name ends in an underscore, this must be included.</param>
        /// <param name="text">If true, displays option properties using their label names instead of their internal numeric values.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="PrtgRequestException">The specified property does not exist and the PRTG Server's language is English.</exception>
        /// <returns>The raw value of the sub object's property.</returns>
        public async Task<string> GetObjectPropertyRawAsync(Either<IPrtgObject, int> objectOrId, int subId, string subType, string property, bool text = false, CancellationToken token = default(CancellationToken)) =>
            await GetObjectPropertyRawInternalAsync(new GetObjectPropertyRawParameters(objectOrId, subId, subType, property, text), property, token).ConfigureAwait(false);

            #endregion
        #endregion
        #region Set Object Properties
            #region Normal
                #region Single

        /// <summary>
        /// Modifies properties and settings of a PRTG Object.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="property">The property of the object to modify.</param>
        /// <param name="value">The value to set the object's property to.</param>
        public void SetObjectProperty(Either<IPrtgObject, int> objectOrId, ObjectProperty property, object value) =>
            SetObjectProperty(new[] {objectOrId.GetId()}, property, value);

        /// <summary>
        /// Modifies properties and settings of one or more PRTG Objects.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="property">The property of each object to modify.</param>
        /// <param name="value">The value to set each object's property to.</param>
        public void SetObjectProperty(int[] objectIds, ObjectProperty property, object value) =>
            SetObjectProperty(objectIds, new PropertyParameter(property, value));

        /// <summary>
        /// Asynchronously modifies properties and settings of a PRTG Object.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="property">The property of the object to modify.</param>
        /// <param name="value">The value to set the object's property to.</param>
        public async Task SetObjectPropertyAsync(Either<IPrtgObject, int> objectOrId, ObjectProperty property, object value) =>
            await SetObjectPropertyAsync(objectOrId, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies properties and settings of a PRTG Object with a specified cancellation token.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="property">The property of the object to modify.</param>
        /// <param name="value">The value to set the object's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetObjectPropertyAsync(Either<IPrtgObject, int> objectOrId, ObjectProperty property, object value, CancellationToken token) =>
            await SetObjectPropertyAsync(new[] {objectOrId.GetId()}, property, value, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies properties and settings of one or more PRTG Objects.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="property">The property of each object to modify.</param>
        /// <param name="value">The value to set each object's property to.</param>
        public async Task SetObjectPropertyAsync(int[] objectIds, ObjectProperty property, object value) =>
            await SetObjectPropertyAsync(objectIds, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies properties and settings of one or more PRTG Objects with a specified cancellation token.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="property">The property of each object to modify.</param>
        /// <param name="value">The value to set each object's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetObjectPropertyAsync(int[] objectIds, ObjectProperty property, object value, CancellationToken token) =>
            await SetObjectPropertyAsync(objectIds, new[]{new PropertyParameter(property, value)}, token).ConfigureAwait(false);

                #endregion
                #region Multiple

        /// <summary>
        /// Modifies multiple properties of a PRTG Object.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetObjectProperty(Either<IPrtgObject, int> objectOrId, params PropertyParameter[] parameters) =>
            SetObjectProperty(new[] {objectOrId.GetId()}, parameters);

        /// <summary>
        /// Modifies multiple properties of one or more PRTG Objects.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetObjectProperty(int[] objectIds, params PropertyParameter[] parameters) =>
            SetObjectProperty(CreateSetObjectPropertyParameters(objectIds, parameters, CancellationToken.None), objectIds.Length, CancellationToken.None);

        /// <summary>
        /// Asynchronously modifies multiple properties of a PRTG Object.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetObjectPropertyAsync(Either<IPrtgObject, int> objectOrId, params PropertyParameter[] parameters) =>
            await SetObjectPropertyAsync(objectOrId, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple properties of a PRTG Object with a specified cancellation token.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetObjectPropertyAsync(Either<IPrtgObject, int> objectOrId, PropertyParameter[] parameters, CancellationToken token) =>
            await SetObjectPropertyAsync(new[] {objectOrId.GetId()}, parameters, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple properties of one or more PRTG Objects.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetObjectPropertyAsync(int[] objectIds, params PropertyParameter[] parameters) =>
            await SetObjectPropertyAsync(objectIds, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple properties of one or more PRTG Objects with a specified cancellation token.<para/>
        /// Each <see cref="ObjectProperty"/> corresponds with a Property of a type derived from <see cref="ObjectSettings"/>.<para/>
        /// If PrtgAPI cannot convert the specified value to the type required by the property, PrtgAPI will throw an exception indicating the type that was expected.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetObjectPropertyAsync(int[] objectIds, PropertyParameter[] parameters, CancellationToken token) =>
            await SetObjectPropertyAsync(await CreateSetObjectPropertyParametersAsync(objectIds, parameters, token).ConfigureAwait(false), objectIds.Length, token).ConfigureAwait(false);

                #endregion
            #endregion
            #region Channel
                #region Single

        /// <summary>
        /// Modifies a property of a PRTG Channel.
        /// </summary>
        /// <param name="channel">The channel to modify.</param>
        /// <param name="property">The property whose value should be modified.</param>
        /// <param name="value">The value to set the property to.</param>
        public void SetChannelProperty(Channel channel, ChannelProperty property, object value) =>
            SetChannelProperty(channel, property, value, CancellationToken.None);

        /// <summary>
        /// Modifies a property of a PRTG Channel with a specified cancellation token.
        /// </summary>
        /// <param name="channel">The channel to modify.</param>
        /// <param name="property">The property whose value should be modified.</param>
        /// <param name="value">The value to set the property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetChannelProperty(Channel channel, ChannelProperty property, object value, CancellationToken token) =>
            SetChannelProperty(new[] {AssertHasValue(channel, nameof(channel))}, property, value, token);

        /// <summary>
        /// Modifies a property of one or more PRTG Channels.
        /// </summary>
        /// <param name="channels">The channels to modify.</param>
        /// <param name="property">The property of each channel to modify.</param>
        /// <param name="value">The value to set each channel's property to.</param>
        public void SetChannelProperty(IEnumerable<Channel> channels, ChannelProperty property, object value) =>
            SetChannelProperty(channels, property, value, CancellationToken.None);

        /// <summary>
        /// Modifies a property of one or more PRTG Channels with a specified cancellation token.
        /// </summary>
        /// <param name="channels">The channels to modify.</param>
        /// <param name="property">The property of each channel to modify.</param>
        /// <param name="value">The value to set each channel's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetChannelProperty(IEnumerable<Channel> channels, ChannelProperty property, object value, CancellationToken token) =>
            SetChannelProperty(AssertHasValue(channels, nameof(channels)), new[]{new ChannelParameter(property, value)}, token);

        /// <summary>
        /// Asynchronously modifies a property of a PRTG Channel.
        /// </summary>
        /// <param name="channel">The channel to modify.</param>
        /// <param name="property">The property whose value should be modified.</param>
        /// <param name="value">The value to set the property to.</param>
        public async Task SetChannelPropertyAsync(Channel channel, ChannelProperty property, object value) =>
            await SetChannelPropertyAsync(channel, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies a property of a PRTG Channel with a specified cancellation token.
        /// </summary>
        /// <param name="channel">The channel to modify.</param>
        /// <param name="property">The property whose value should be modified.</param>
        /// <param name="value">The value to set the property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetChannelPropertyAsync(Channel channel, ChannelProperty property, object value, CancellationToken token) =>
            await SetChannelPropertyAsync(new[] {AssertHasValue(channel, nameof(channel))}, property, value, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies a property of one or more PRTG Channels.
        /// </summary>
        /// <param name="channels">The channels to modify.</param>
        /// <param name="property">The property of each channel to modify.</param>
        /// <param name="value">The value to set each channel's property to.</param>
        public async Task SetChannelPropertyAsync(IEnumerable<Channel> channels, ChannelProperty property, object value) =>
            await SetChannelPropertyAsync(channels, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies a property of one or more PRTG Channels with a specified cancellation token.
        /// </summary>
        /// <param name="channels">The channels to modify.</param>
        /// <param name="property">The property of each channel to modify.</param>
        /// <param name="value">The value to set each channel's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetChannelPropertyAsync(IEnumerable<Channel> channels, ChannelProperty property, object value, CancellationToken token) =>
            await SetChannelPropertyAsync(AssertHasValue(channels, nameof(channels)), new[]{new ChannelParameter(property, value)}, token).ConfigureAwait(false);

                #endregion
                #region Multiple

        /// <summary>
        /// Modifies one or more properties of a PRTG Channel.
        /// </summary>
        /// <param name="channel">The channel to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetChannelProperty(Channel channel, params ChannelParameter[] parameters) =>
            SetChannelProperty(channel, parameters, CancellationToken.None);

        /// <summary>
        /// Modifies one or more properties of a PRTG Channel with a specified cancellation token.
        /// </summary>
        /// <param name="channel">The channel to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetChannelProperty(Channel channel, ChannelParameter[] parameters, CancellationToken token) =>
            SetChannelProperty(new[] {AssertHasValue(channel, nameof(channel))}, parameters, token);

        /// <summary>
        /// Modifies multiple properties of one or more PRTG Channels.
        /// </summary>
        /// <param name="channels">The channels to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetChannelProperty(IEnumerable<Channel> channels, params ChannelParameter[] parameters) =>
            SetChannelProperty(channels, parameters, CancellationToken.None);

        /// <summary>
        /// Modifies multiple properties of one or more PRTG Channels with a specified cancellation token.
        /// </summary>
        /// <param name="channels">The channels to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetChannelProperty(IEnumerable<Channel> channels, ChannelParameter[] parameters, CancellationToken token) =>
            SetChannelPropertyInternal(AssertHasValue(channels, nameof(channels)), null, null, parameters, token);

        /// <summary>
        /// Asynchronously modifies one or more properties of a PRTG Channel.
        /// </summary>
        /// <param name="channel">The channel to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetChannelPropertyAsync(Channel channel, params ChannelParameter[] parameters) =>
            await SetChannelPropertyAsync(channel, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies one or more properties of a PRTG Channel with a specified cancellation token.
        /// </summary>
        /// <param name="channel">The channel to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetChannelPropertyAsync(Channel channel, ChannelParameter[] parameters, CancellationToken token) =>
            await SetChannelPropertyAsync(new[] {AssertHasValue(channel, nameof(channel))}, parameters, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple properties of one or more PRTG Channels.
        /// </summary>
        /// <param name="channels">The channels to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetChannelPropertyAsync(IEnumerable<Channel> channels, params ChannelParameter[] parameters) =>
            await SetChannelPropertyAsync(channels, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple properties of one or more PRTG Channels with a specified cancellation token.
        /// </summary>
        /// <param name="channels">The channels to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetChannelPropertyAsync(IEnumerable<Channel> channels, ChannelParameter[] parameters, CancellationToken token) =>
            await SetChannelPropertyInternalAsync(AssertHasValue(channels, nameof(channels)), null, null, parameters, token).ConfigureAwait(false);

                #endregion
                #region Manual

        /// <summary>
        /// Modifies a property of a PRTG Channel based on its Sensor ID and Channel ID.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel to modify.</param>
        /// <param name="property">The property of the channel to modify.</param>
        /// <param name="value">The value to set the channel's property to.</param>
        public void SetChannelProperty(Either<Sensor, int> sensorOrId, int channelId, ChannelProperty property, object value) =>
            SetChannelProperty(sensorOrId, channelId, property, value, CancellationToken.None);

        /// <summary>
        /// Modifies a property of a PRTG Channel based on its Sensor ID and Channel ID with a specified cancellation token.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel to modify.</param>
        /// <param name="property">The property of the channel to modify.</param>
        /// <param name="value">The value to set the channel's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetChannelProperty(Either<Sensor, int> sensorOrId, int channelId, ChannelProperty property, object value, CancellationToken token) =>
            SetChannelProperty(new[] {sensorOrId.GetId()}, channelId, property, value, token);

        /// <summary>
        /// Modifies a property of PRTG Channels with a given Channel ID across one or more PRTG Sensors.
        /// </summary>
        /// <param name="sensorIds">The IDs of the sensors whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel of each sensor to modify.</param>
        /// <param name="property">The property of each channel to modify.</param>
        /// <param name="value">The value to set each channel's property to.</param>
        public void SetChannelProperty(int[] sensorIds, int channelId, ChannelProperty property, object value) =>
            SetChannelProperty(sensorIds, channelId, property, value, CancellationToken.None);

        /// <summary>
        /// Modifies a property of PRTG Channels with a given Channel ID across one or more PRTG Sensors with a specified cancellation token.
        /// </summary>
        /// <param name="sensorIds">The IDs of the sensors whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel of each sensor to modify.</param>
        /// <param name="property">The property of each channel to modify.</param>
        /// <param name="value">The value to set each channel's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetChannelProperty(int[] sensorIds, int channelId, ChannelProperty property, object value, CancellationToken token) =>
            SetChannelProperty(sensorIds, channelId, new[]{new ChannelParameter(property, value)}, token);

        /// <summary>
        /// Asynchronously modifies a property of a PRTG Channel based on its Sensor ID and Channel ID.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel to modify.</param>
        /// <param name="property">The property of the channel to modify.</param>
        /// <param name="value">The value to set the channel's property to.</param>
        public async Task SetChannelPropertyAsync(Either<Sensor, int> sensorOrId, int channelId, ChannelProperty property, object value) =>
            await SetChannelPropertyAsync(sensorOrId, channelId, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies a property of a PRTG Channel based on its Sensor ID and Channel ID with a specified cancellation token.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel to modify.</param>
        /// <param name="property">The property of the channel to modify.</param>
        /// <param name="value">The value to set the channel's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetChannelPropertyAsync(Either<Sensor, int> sensorOrId, int channelId, ChannelProperty property, object value, CancellationToken token) =>
            await SetChannelPropertyAsync(new[] {sensorOrId.GetId()}, channelId, property, value, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies a property of PRTG Channels with a given Channel ID across one or more PRTG Sensors.
        /// </summary>
        /// <param name="sensorIds">The IDs of the sensors whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel of each sensor to modify.</param>
        /// <param name="property">The property of each channel to modify.</param>
        /// <param name="value">The value to set each channel's property to.</param>
        public async Task SetChannelPropertyAsync(int[] sensorIds, int channelId, ChannelProperty property, object value) =>
            await SetChannelPropertyAsync(sensorIds, channelId, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies a property of PRTG Channels with a given Channel ID across one or more PRTG Sensors with a specified cancellation token.
        /// </summary>
        /// <param name="sensorIds">The IDs of the sensors whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel of each sensor to modify.</param>
        /// <param name="property">The property of each channel to modify.</param>
        /// <param name="value">The value to set each channel's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetChannelPropertyAsync(int[] sensorIds, int channelId, ChannelProperty property, object value, CancellationToken token) =>
            await SetChannelPropertyAsync(sensorIds, channelId, new[]{new ChannelParameter(property, value)}, token).ConfigureAwait(false);

                #endregion
                #region Manual: Multiple

        /// <summary>
        /// Modifies one or more properties of a PRTG Channel based on its Sensor ID and Channel ID.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetChannelProperty(Either<Sensor, int> sensorOrId, int channelId, params ChannelParameter[] parameters) =>
            SetChannelProperty(sensorOrId, channelId, parameters, CancellationToken.None);

        /// <summary>
        /// Modifies one or more properties of a PRTG Channel based on its Sensor ID and Channel ID with a specified cancellation token.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetChannelProperty(Either<Sensor, int> sensorOrId, int channelId, ChannelParameter[] parameters, CancellationToken token) =>
            SetChannelProperty(new[] {sensorOrId.GetId()}, channelId, parameters, token);

        /// <summary>
        /// Modifies multiple properties of PRTG Channels with a given Channel ID across one or more PRTG Sensors.
        /// </summary>
        /// <param name="sensorIds">The IDs of the sensors whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel of each sensor to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetChannelProperty(int[] sensorIds, int channelId, params ChannelParameter[] parameters) =>
            SetChannelProperty(sensorIds, channelId, parameters, CancellationToken.None);

        /// <summary>
        /// Modifies multiple properties of PRTG Channels with a given Channel ID across one or more PRTG Sensors with a specified cancellation token.
        /// </summary>
        /// <param name="sensorIds">The IDs of the sensors whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel of each sensor to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetChannelProperty(int[] sensorIds, int channelId, ChannelParameter[] parameters, CancellationToken token) =>
            SetChannelPropertyInternal(null, sensorIds, channelId, parameters, token);

        /// <summary>
        /// Asynchronously modifies one or more properties of a PRTG Channel based on its Sensor ID and Channel ID.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetChannelPropertyAsync(Either<Sensor, int> sensorOrId, int channelId, params ChannelParameter[] parameters) =>
            await SetChannelPropertyAsync(sensorOrId, channelId, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies one or more properties of a PRTG Channel based on its Sensor ID and Channel ID with a specified cancellation token.
        /// </summary>
        /// <param name="sensorOrId">The sensor or ID of the sensor whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetChannelPropertyAsync(Either<Sensor, int> sensorOrId, int channelId, ChannelParameter[] parameters, CancellationToken token) =>
            await SetChannelPropertyAsync(new[] {sensorOrId.GetId()}, channelId, parameters, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple properties of PRTG Channels with a given Channel ID across one or more PRTG Sensors.
        /// </summary>
        /// <param name="sensorIds">The IDs of the sensors whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel of each sensor to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetChannelPropertyAsync(int[] sensorIds, int channelId, params ChannelParameter[] parameters) =>
            await SetChannelPropertyAsync(sensorIds, channelId, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple properties of PRTG Channels with a given Channel ID across one or more PRTG Sensors with a specified cancellation token.
        /// </summary>
        /// <param name="sensorIds">The IDs of the sensors whose channels should be modified.</param>
        /// <param name="channelId">The ID of the channel of each sensor to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetChannelPropertyAsync(int[] sensorIds, int channelId, ChannelParameter[] parameters, CancellationToken token) =>
            await SetChannelPropertyInternalAsync(null, sensorIds, channelId, parameters, token).ConfigureAwait(false);

                #endregion
            #endregion
            #region Trigger
                #region Single

        /// <summary>
        /// Modifies a property of a PRTG Notification Trigger.
        /// </summary>
        /// <param name="trigger">The notification trigger to modify.</param>
        /// <param name="property">The property whose value should be modified.</param>
        /// <param name="value">The value to set the property to.</param>
        public void SetTriggerProperty(NotificationTrigger trigger, TriggerProperty property, object value) =>
            SetTriggerProperty(trigger, property, value, CancellationToken.None);

        /// <summary>
        /// Modifies a property of a PRTG Notification Trigger with a specified cancellation token.
        /// </summary>
        /// <param name="trigger">The notification trigger to modify.</param>
        /// <param name="property">The property whose value should be modified.</param>
        /// <param name="value">The value to set the property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetTriggerProperty(NotificationTrigger trigger, TriggerProperty property, object value, CancellationToken token) =>
            SetTriggerProperty(new[] {AssertHasValue(trigger, nameof(trigger))}, property, value, token);

        /// <summary>
        /// Modifies a property of one or more PRTG Notification Triggers.
        /// </summary>
        /// <param name="triggers">The notification triggers to modify.</param>
        /// <param name="property">The property of each trigger to modify.</param>
        /// <param name="value">The value to set each trigger's property to.</param>
        public void SetTriggerProperty(IEnumerable<NotificationTrigger> triggers, TriggerProperty property, object value) =>
            SetTriggerProperty(triggers, property, value, CancellationToken.None);

        /// <summary>
        /// Modifies a property of one or more PRTG Notification Triggers with a specified cancellation token.
        /// </summary>
        /// <param name="triggers">The notification triggers to modify.</param>
        /// <param name="property">The property of each trigger to modify.</param>
        /// <param name="value">The value to set each trigger's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetTriggerProperty(IEnumerable<NotificationTrigger> triggers, TriggerProperty property, object value, CancellationToken token) =>
            SetTriggerPropertyInternal(AssertHasValue(triggers, nameof(triggers)), new[]{new TriggerParameter(property, value)}, token);

        /// <summary>
        /// Asynchronously modifies a property of a PRTG Notification Trigger.
        /// </summary>
        /// <param name="trigger">The notification trigger to modify.</param>
        /// <param name="property">The property whose value should be modified.</param>
        /// <param name="value">The value to set the property to.</param>
        public async Task SetTriggerPropertyAsync(NotificationTrigger trigger, TriggerProperty property, object value) =>
            await SetTriggerPropertyAsync(trigger, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies a property of a PRTG Notification Trigger with a specified cancellation token.
        /// </summary>
        /// <param name="trigger">The notification trigger to modify.</param>
        /// <param name="property">The property whose value should be modified.</param>
        /// <param name="value">The value to set the property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetTriggerPropertyAsync(NotificationTrigger trigger, TriggerProperty property, object value, CancellationToken token) =>
            await SetTriggerPropertyAsync(new[] {AssertHasValue(trigger, nameof(trigger))}, property, value, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies a property of one or more PRTG Notification Triggers.
        /// </summary>
        /// <param name="triggers">The notification triggers to modify.</param>
        /// <param name="property">The property of each trigger to modify.</param>
        /// <param name="value">The value to set each trigger's property to.</param>
        public async Task SetTriggerPropertyAsync(IEnumerable<NotificationTrigger> triggers, TriggerProperty property, object value) =>
            await SetTriggerPropertyAsync(triggers, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies a property of one or more PRTG Notification Triggers with a specified cancellation token.
        /// </summary>
        /// <param name="triggers">The notification triggers to modify.</param>
        /// <param name="property">The property of each trigger to modify.</param>
        /// <param name="value">The value to set each trigger's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetTriggerPropertyAsync(IEnumerable<NotificationTrigger> triggers, TriggerProperty property, object value, CancellationToken token) =>
            await SetTriggerPropertyInternalAsync(AssertHasValue(triggers, nameof(triggers)), new[]{new TriggerParameter(property, value)}, token).ConfigureAwait(false);

                #endregion
                #region Multiple

        /// <summary>
        /// Modifies one or more properties of a PRTG Notification Trigger.
        /// </summary>
        /// <param name="trigger">The notification trigger to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetTriggerProperty(NotificationTrigger trigger, params TriggerParameter[] parameters) =>
            SetTriggerProperty(trigger, parameters, CancellationToken.None);

        /// <summary>
        /// Modifies one or more properties of a PRTG Notification Trigger with a specified cancellation token.
        /// </summary>
        /// <param name="trigger">The notification trigger to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetTriggerProperty(NotificationTrigger trigger, TriggerParameter[] parameters, CancellationToken token) =>
            SetTriggerProperty(new[] {AssertHasValue(trigger, nameof(trigger))}, parameters, token);

        /// <summary>
        /// Modifies multiple properties of one or more PRTG Notification Triggers.
        /// </summary>
        /// <param name="triggers">The notification triggers to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetTriggerProperty(IEnumerable<NotificationTrigger> triggers, params TriggerParameter[] parameters) =>
            SetTriggerProperty(triggers, parameters, CancellationToken.None);

        /// <summary>
        /// Modifies multiple properties of one or more PRTG Notification Triggers with a specified cancellation token.
        /// </summary>
        /// <param name="triggers">The notification triggers to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public void SetTriggerProperty(IEnumerable<NotificationTrigger> triggers, TriggerParameter[] parameters, CancellationToken token) =>
            SetTriggerPropertyInternal(AssertHasValue(triggers, nameof(triggers)), parameters, token);

        /// <summary>
        /// Asynchronously modifies one or more properties of a PRTG Notification Trigger.
        /// </summary>
        /// <param name="trigger">The notification trigger to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetTriggerPropertyAsync(NotificationTrigger trigger, params TriggerParameter[] parameters) =>
            await SetTriggerPropertyAsync(trigger, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies one or more properties of a PRTG Notification Trigger with a specified cancellation token.
        /// </summary>
        /// <param name="trigger">The notification trigger to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetTriggerPropertyAsync(NotificationTrigger trigger, TriggerParameter[] parameters, CancellationToken token) =>
            await SetTriggerPropertyAsync(new[] {AssertHasValue(trigger, nameof(trigger))}, parameters, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple properties of one or more PRTG Notification Triggers.
        /// </summary>
        /// <param name="triggers">The notification triggers to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetTriggerPropertyAsync(IEnumerable<NotificationTrigger> triggers, params TriggerParameter[] parameters) =>
            await SetTriggerPropertyAsync(triggers, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple properties of one or more PRTG Notification Triggers with a specified cancellation token.
        /// </summary>
        /// <param name="triggers">The notification triggers to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetTriggerPropertyAsync(IEnumerable<NotificationTrigger> triggers, TriggerParameter[] parameters, CancellationToken token) =>
            await SetTriggerPropertyInternalAsync(AssertHasValue(triggers, nameof(triggers)), parameters, token).ConfigureAwait(false);

                #endregion
                #region Manual

        /// <summary>
        /// Modifies a property of a PRTG Notification Trigger based on its Object ID and Sub ID.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose notification triggers should be modified.</param>
        /// <param name="triggerId">The Sub ID of the notification trigger to modify.</param>
        /// <param name="property">The property of the notification trigger to modify.</param>
        /// <param name="value">The value to set the notification trigger's property to.</param>
        public void SetTriggerProperty(Either<IPrtgObject, int> objectOrId, int triggerId, TriggerProperty property, object value) =>
            SetTriggerProperty(objectOrId, triggerId, new[]{new TriggerParameter(property, value)});

        /// <summary>
        /// Asynchronously modifies a property of a PRTG Notification Trigger based on its Object ID and Sub ID.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose notification triggers should be modified.</param>
        /// <param name="triggerId">The Sub ID of the notification trigger to modify.</param>
        /// <param name="property">The property of the notification trigger to modify.</param>
        /// <param name="value">The value to set the notification trigger's property to.</param>
        public async Task SetTriggerPropertyAsync(Either<IPrtgObject, int> objectOrId, int triggerId, TriggerProperty property, object value) =>
            await SetTriggerPropertyAsync(objectOrId, triggerId, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies a property of a PRTG Notification Trigger based on its Object ID and Sub ID with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose notification triggers should be modified.</param>
        /// <param name="triggerId">The Sub ID of the notification trigger to modify.</param>
        /// <param name="property">The property of the notification trigger to modify.</param>
        /// <param name="value">The value to set the notification trigger's property to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetTriggerPropertyAsync(Either<IPrtgObject, int> objectOrId, int triggerId, TriggerProperty property, object value, CancellationToken token) =>
            await SetTriggerPropertyAsync(objectOrId, triggerId, new[]{new TriggerParameter(property, value)}, token).ConfigureAwait(false);

                #endregion
                #region Manual: Multiple

        /// <summary>
        /// Modifies one or more properties of a PRTG Notification Trigger based on its Object ID and Sub ID.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose notification triggers should be modified.</param>
        /// <param name="triggerId">The ID of the notification trigger to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetTriggerProperty(Either<IPrtgObject, int> objectOrId, int triggerId, params TriggerParameter[] parameters)
        {
            var triggers = GetNotificationTriggers(objectOrId.GetId());
            var trigger = triggers.Where(t => t.SubId == triggerId && !t.Inherited).ToList().SingleObject(triggerId, "SubId");

            SetTriggerProperty(trigger, parameters);
        }

        /// <summary>
        /// Asynchronously modifies one or more properties of a PRTG Notification Trigger based on its Object ID and Sub ID.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose notification triggers should be modified.</param>
        /// <param name="triggerId">The ID of the notification trigger to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetTriggerPropertyAsync(Either<IPrtgObject, int> objectOrId, int triggerId, params TriggerParameter[] parameters) =>
            await SetTriggerPropertyAsync(objectOrId, triggerId, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies one or more properties of a PRTG Notification Trigger based on its Object ID and Sub ID with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose notification triggers should be modified.</param>
        /// <param name="triggerId">The ID of the notification trigger to modify.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetTriggerPropertyAsync(Either<IPrtgObject, int> objectOrId, int triggerId, TriggerParameter[] parameters, CancellationToken token)
        {
            var triggers = await GetNotificationTriggersAsync(objectOrId.GetId(), token).ConfigureAwait(false);
            var trigger = triggers.Where(t => t.SubId == triggerId && !t.Inherited).ToList().SingleObject(triggerId, "SubId");

            await SetTriggerPropertyAsync(trigger, parameters, token).ConfigureAwait(false);
        }

                #endregion
            #endregion
            #region Custom
                #region Single

        /// <summary>
        /// Modifies unsupported properties and settings of a PRTG Object.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="property">The property of the object to modify. This can be typically discovered by inspecting the "name" attribute of the properties' &lt;input/&gt; tag on the Settings page of PRTG.<para/>
        /// If the properties name ends in an underscore, this must be included.</param>
        /// <param name="value">The value to set the object's property to. For radio buttons and dropdown lists, this is the integer found in the 'value' attribute.</param>
        public void SetObjectPropertyRaw(Either<IPrtgObject, int> objectOrId, string property, string value) =>
            SetObjectPropertyRaw(new[] {objectOrId.GetId()}, property, value);

        /// <summary>
        /// Modifies unsupported properties and settings of one or more PRTG Objects.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="property">The property of each object to modify. This can be typically discovered by inspecting the "name" attribute of the properties' &lt;input/&gt; tag on the Settings page of PRTG.<para/>
        /// If the properties name ends in an underscore, this must be included.</param>
        /// <param name="value">The value to set each object's property to. For radio buttons and dropdown lists, this is the integer found in the 'value' attribute.</param>
        public void SetObjectPropertyRaw(int[] objectIds, string property, string value) =>
            SetObjectPropertyRaw(objectIds, new CustomParameter(property, value));

        /// <summary>
        /// Asynchronously modifies unsupported properties and settings of a PRTG Object.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="property">The property of the object to modify. This can be typically discovered by inspecting the "name" attribute of the properties' &lt;input/&gt; tag on the Settings page of PRTG.<para/>
        /// If the properties name ends in an underscore, this must be included.</param>
        /// <param name="value">The value to set the object's property to. For radio buttons and dropdown lists, this is the integer found in the 'value' attribute.</param>
        public async Task SetObjectPropertyRawAsync(Either<IPrtgObject, int> objectOrId, string property, string value) =>
            await SetObjectPropertyRawAsync(objectOrId, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies unsupported properties and settings of a PRTG Object with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="property">The property of the object to modify. This can be typically discovered by inspecting the "name" attribute of the properties' &lt;input/&gt; tag on the Settings page of PRTG.<para/>
        /// If the properties name ends in an underscore, this must be included.</param>
        /// <param name="value">The value to set the object's property to. For radio buttons and dropdown lists, this is the integer found in the 'value' attribute.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetObjectPropertyRawAsync(Either<IPrtgObject, int> objectOrId, string property, string value, CancellationToken token) =>
            await SetObjectPropertyRawAsync(new[] {objectOrId.GetId()}, property, value, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies unsupported properties and settings of one or more PRTG Objects.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="property">The property of each object to modify. This can be typically discovered by inspecting the "name" attribute of the properties' &lt;input/&gt; tag on the Settings page of PRTG.<para/>
        /// If the properties name ends in an underscore, this must be included.</param>
        /// <param name="value">The value to set each object's property to. For radio buttons and dropdown lists, this is the integer found in the 'value' attribute.</param>
        public async Task SetObjectPropertyRawAsync(int[] objectIds, string property, string value) =>
            await SetObjectPropertyRawAsync(objectIds, property, value, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies unsupported properties and settings of one or more PRTG Objects with a specified cancellation token.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="property">The property of each object to modify. This can be typically discovered by inspecting the "name" attribute of the properties' &lt;input/&gt; tag on the Settings page of PRTG.<para/>
        /// If the properties name ends in an underscore, this must be included.</param>
        /// <param name="value">The value to set each object's property to. For radio buttons and dropdown lists, this is the integer found in the 'value' attribute.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetObjectPropertyRawAsync(int[] objectIds, string property, string value, CancellationToken token) =>
            await SetObjectPropertyRawAsync(objectIds, new[]{new CustomParameter(property, value)}, token).ConfigureAwait(false);

                #endregion
                #region Multiple

        /// <summary>
        /// Modifies multiple unsupported properties of a PRTG Object.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetObjectPropertyRaw(Either<IPrtgObject, int> objectOrId, params CustomParameter[] parameters) =>
            SetObjectPropertyRaw(new[] {objectOrId.GetId()}, parameters);

        /// <summary>
        /// Modifies multiple unsupported properties of one or more PRTG Objects.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public void SetObjectPropertyRaw(int[] objectIds, params CustomParameter[] parameters) =>
            SetObjectProperty(new SetObjectPropertyParameters(objectIds, parameters), objectIds.Length, CancellationToken.None);

        /// <summary>
        /// Asynchronously modifies multiple unsupported properties of a PRTG Object.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetObjectPropertyRawAsync(Either<IPrtgObject, int> objectOrId, params CustomParameter[] parameters) =>
            await SetObjectPropertyRawAsync(objectOrId, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple unsupported properties of a PRTG Object with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetObjectPropertyRawAsync(Either<IPrtgObject, int> objectOrId, CustomParameter[] parameters, CancellationToken token) =>
            await SetObjectPropertyRawAsync(new[] {objectOrId.GetId()}, parameters, token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple unsupported properties of one or more PRTG Objects.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        public async Task SetObjectPropertyRawAsync(int[] objectIds, params CustomParameter[] parameters) =>
            await SetObjectPropertyRawAsync(objectIds, parameters, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously modifies multiple unsupported properties of one or more PRTG Objects with a specified cancellation token.
        /// </summary>
        /// <param name="objectIds">The IDs of the objects whose properties should be modified.</param>
        /// <param name="parameters">A set of parameters describing the properties and their values to process.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetObjectPropertyRawAsync(int[] objectIds, CustomParameter[] parameters, CancellationToken token) =>
            await SetObjectPropertyAsync(new SetObjectPropertyParameters(objectIds, parameters), objectIds.Length, token).ConfigureAwait(false);

                #endregion
            #endregion
        #endregion
        #region System Administration

        /// <summary>
        /// Requests PRTG generate a backup of the PRTG Configuration Database.<para/>
        /// When executed, this method will request PRTG store a backup of its configuration database under
        /// the Configuration Auto-Backups folder after first writing the current running configuration to disk.<para/>
        /// Depending on the size of your database, this may take several seconds to complete. Note that PRTG always creates
        /// its backup asynchronously; as such when this method returns the backup may not have fully completed.<para/>
        /// By default, configuration backups are stored under C:\ProgramData\Paessler\PRTG Network Monitor\Configuration Auto-Backups.
        /// </summary>
        public void BackupConfigDatabase() =>
            RequestEngine.ExecuteRequest(new CommandFunctionParameters(CommandFunction.SaveNow));

        /// <summary>
        /// Asynchronously requests PRTG generate a backup of the PRTG Configuration Database.<para/>
        /// When executed, this method will request PRTG store a backup of its configuration database under
        /// the Configuration Auto-Backups folder after first writing the current running configuration to disk.<para/>
        /// Depending on the size of your database, this may take several seconds to complete. Note that PRTG always creates
        /// its backup asynchronously; as such when this method returns the backup may not have fully completed.<para/>
        /// By default, configuration backups are stored under C:\ProgramData\Paessler\PRTG Network Monitor\Configuration Auto-Backups.
        /// </summary>
        public async Task BackupConfigDatabaseAsync() =>
            await BackupConfigDatabaseAsync(CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously requests PRTG generate a backup of the PRTG Configuration Database with a specified cancellation token.<para/>
        /// When executed, this method will request PRTG store a backup of its configuration database under
        /// the Configuration Auto-Backups folder after first writing the current running configuration to disk.<para/>
        /// Depending on the size of your database, this may take several seconds to complete. Note that PRTG always creates
        /// its backup asynchronously; as such when this method returns the backup may not have fully completed.<para/>
        /// By default, configuration backups are stored under C:\ProgramData\Paessler\PRTG Network Monitor\Configuration Auto-Backups.
        /// </summary>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task BackupConfigDatabaseAsync(CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new CommandFunctionParameters(CommandFunction.SaveNow), token: token).ConfigureAwait(false);

        /// <summary>
        /// Clears cached data used by PRTG, including map, graph and authentication caches. Note: clearing certain cache types may result in a restart of the PRTG Core Server.
        /// See each cache type for further details.
        /// </summary>
        /// <param name="cacheType">The type of cache to clear. Note: clearing certain cache types may result in a restart of the PRTG Core Server.
        /// See each cache type for further details.</param>
        public void ClearSystemCache(SystemCacheType cacheType) =>
            RequestEngine.ExecuteRequest(new ClearSystemCacheParameters(cacheType));

        /// <summary>
        /// Asynchronously clears cached data used by PRTG, including map, graph and authentication caches. Note: clearing certain cache types may result in a restart of the PRTG Core Server.
        /// See each cache type for further details.
        /// </summary>
        /// <param name="cacheType">The type of cache to clear. Note: clearing certain cache types may result in a restart of the PRTG Core Server.
        /// See each cache type for further details.</param>
        public async Task ClearSystemCacheAsync(SystemCacheType cacheType) =>
            await ClearSystemCacheAsync(cacheType, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously clears cached data used by PRTG, including map, graph and authentication caches with a specified cancellation token. Note: clearing certain cache types may result in a restart of the PRTG Core Server.
        /// See each cache type for further details.
        /// </summary>
        /// <param name="cacheType">The type of cache to clear. Note: clearing certain cache types may result in a restart of the PRTG Core Server.
        /// See each cache type for further details.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task ClearSystemCacheAsync(SystemCacheType cacheType, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new ClearSystemCacheParameters(cacheType), token: token).ConfigureAwait(false);

        /// <summary>
        /// Reloads config files including sensor lookups, device icons and report templates used by PRTG.
        /// </summary>
        /// <param name="fileType">The type of files to reload.</param>
        public void LoadConfigFiles(ConfigFileType fileType) =>
            RequestEngine.ExecuteRequest(new LoadConfigFilesParameters(fileType));

        /// <summary>
        /// Asynchronously reloads config files including sensor lookups, device icons and report templates used by PRTG.
        /// </summary>
        /// <param name="fileType">The type of files to reload.</param>
        public async Task LoadConfigFilesAsync(ConfigFileType fileType) =>
            await LoadConfigFilesAsync(fileType, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously reloads config files including sensor lookups, device icons and report templates used by PRTG with a specified cancellation token.
        /// </summary>
        /// <param name="fileType">The type of files to reload.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task LoadConfigFilesAsync(ConfigFileType fileType, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new LoadConfigFilesParameters(fileType), token: token).ConfigureAwait(false);

        /// <summary>
        /// Restarts the PRTG Probe Service of a specified PRTG Probe.<para/>
        /// By default, PrtgAPI will wait 5 seconds between each probing attempt to confirm whether all probes have successfully restarted.<para/>
        /// If a progress callback is specified, it is up to the programmer to specify the wait duration between each request. If at any time
        /// the progress callback returns false, PrtgAPI will stop waiting for all probes to restart.
        /// </summary>
        /// <param name="probeOrId">The probe or ID of the probe to restart.</param>
        /// <param name="waitForRestart">Whether to wait for the Probe Service on all probes to restart before completing this method.</param>
        /// <param name="progressCallback">A callback method to execute upon each request against PRTG to check whether all probes have restarted.</param>
        /// <param name="token">A cancellation token to use when waiting for all probes to restart. If cancellation is requested, this method will abort waiting for any remaining probes to restart.</param>
        public void RestartProbe(Either<Probe, int> probeOrId, bool waitForRestart = false, Func<ProbeRestartProgress, bool> progressCallback = null, CancellationToken token = default(CancellationToken)) =>
            RestartProbe(new[] {probeOrId.GetId()}, waitForRestart, p => progressCallback(p.First()), token);

        /// <summary>
        /// Asynchronously restarts the PRTG Probe Service of a specified PRTG Probe.<para/>
        /// By default, PrtgAPI will wait 5 seconds between each probing attempt to confirm whether all probes have successfully restarted.<para/>
        /// If a progress callback is specified, it is up to the programmer to specify the wait duration between each request. If at any time
        /// the progress callback returns false, PrtgAPI will stop waiting for all probes to restart.
        /// </summary>
        /// <param name="probeOrId">The probe or ID of the probe to restart.</param>
        /// <param name="waitForRestart">Whether to wait for the Probe Service on all probes to restart before completing this method.</param>
        /// <param name="progressCallback">A callback method to execute upon each request against PRTG to check whether all probes have restarted.</param>
        /// <param name="token">A cancellation token to use when waiting for all probes to restart. If cancellation is requested, this method will abort waiting for any remaining probes to restart.</param>
        public async Task RestartProbeAsync(Either<Probe, int> probeOrId, bool waitForRestart = false, Func<ProbeRestartProgress, bool> progressCallback = null, CancellationToken token = default(CancellationToken)) =>
            await RestartProbeAsync(new[] {probeOrId.GetId()}, waitForRestart, p => progressCallback(p.First()), token).ConfigureAwait(false);

        /// <summary>
        /// Restarts the PRTG Probe Service of one or more PRTG Probes. If no probe ID is specified, the PRTG Probe Service will be restarted on all PRTG Probes.<para/>
        /// By default, PrtgAPI will wait 5 seconds between each probing attempt to confirm whether all probes have successfully restarted.<para/>
        /// If a progress callback is specified, it is up to the programmer to specify the wait duration between each request. If at any time
        /// the progress callback returns false, PrtgAPI will stop waiting for all probes to restart.
        /// </summary>
        /// <param name="probeIds">The IDs of the probe to restart. If this value is null or empty, the PRTG Probe Service of all probes will be restarted.</param>
        /// <param name="waitForRestart">Whether to wait for the Probe Service on all probes to restart before completing this method.</param>
        /// <param name="progressCallback">A callback method to execute upon each request against PRTG to check whether all probes have restarted.</param>
        /// <param name="token">A cancellation token to use when waiting for all probes to restart. If cancellation is requested, this method will abort waiting for any remaining probes to restart.</param>
        public void RestartProbe(int[] probeIds = null, bool waitForRestart = false, Func<ProbeRestartProgress[], bool> progressCallback = null, CancellationToken token = default(CancellationToken)) =>
            RestartProbeInternal(probeIds, waitForRestart, progressCallback, token);

        /// <summary>
        /// Asynchronously restarts the PRTG Probe Service of one or more PRTG Probes. If no probe ID is specified, the PRTG Probe Service will be restarted on all PRTG Probes.<para/>
        /// By default, PrtgAPI will wait 5 seconds between each probing attempt to confirm whether all probes have successfully restarted.<para/>
        /// If a progress callback is specified, it is up to the programmer to specify the wait duration between each request. If at any time
        /// the progress callback returns false, PrtgAPI will stop waiting for all probes to restart.
        /// </summary>
        /// <param name="probeIds">The IDs of the probe to restart. If this value is null or empty, the PRTG Probe Service of all probes will be restarted.</param>
        /// <param name="waitForRestart">Whether to wait for the Probe Service on all probes to restart before completing this method.</param>
        /// <param name="progressCallback">A callback method to execute upon each request against PRTG to check whether all probes have restarted.</param>
        /// <param name="token">A cancellation token to use when waiting for all probes to restart. If cancellation is requested, this method will abort waiting for any remaining probes to restart.</param>
        public async Task RestartProbeAsync(int[] probeIds = null, bool waitForRestart = false, Func<ProbeRestartProgress[], bool> progressCallback = null, CancellationToken token = default(CancellationToken)) =>
            await RestartProbeInternalAsync(probeIds, waitForRestart, progressCallback, token).ConfigureAwait(false);

        /// <summary>
        /// Restarts the PRTG Core Service. This will cause PRTG to disconnect all users and become completely unavailable while the service restarts.<para/>
        /// If PRTG is part of a cluster, only the server specified by the current <see cref="PrtgClient"/> will be restarted.<para/>
        /// By default, PrtgAPI will wait 5 seconds between each probing attempt to confirm whether PRTG has successfully restarted.<para/>
        /// If a progress callback is specified, it is up to the programmer to specify the wait duration between each request. If at any time
        /// the progress callback returns false, PrtgAPI will stop waiting for the core to restart.
        /// </summary>
        /// <param name="waitForRestart">Whether wait for the Core Service to restart before completing this method.</param>
        /// <param name="progressCallback">A callback method to execute upon each request against PRTG to check whether PRTG has restarted.</param>
        /// <param name="token">A cancellation token to use when waiting for the Core Service to restart. If cancellation is requested, this method will abort waiting for the core to restart.</param>
        public void RestartCore(bool waitForRestart = false, Func<RestartCoreStage, bool> progressCallback = null, CancellationToken token = default(CancellationToken)) =>
            RestartCoreInternal(waitForRestart, progressCallback, token);

        /// <summary>
        /// Asynchronously restarts the PRTG Core Service. This will cause PRTG to disconnect all users and become completely unavailable while the service restarts.<para/>
        /// If PRTG is part of a cluster, only the server specified by the current <see cref="PrtgClient"/> will be restarted.<para/>
        /// By default, PrtgAPI will wait 5 seconds between each probing attempt to confirm whether PRTG has successfully restarted.<para/>
        /// If a progress callback is specified, it is up to the programmer to specify the wait duration between each request. If at any time
        /// the progress callback returns false, PrtgAPI will stop waiting for the core to restart.
        /// </summary>
        /// <param name="waitForRestart">Whether wait for the Core Service to restart before completing this method.</param>
        /// <param name="progressCallback">A callback method to execute upon each request against PRTG to check whether PRTG has restarted.</param>
        /// <param name="token">A cancellation token to use when waiting for the Core Service to restart. If cancellation is requested, this method will abort waiting for the core to restart.</param>
        public async Task RestartCoreAsync(bool waitForRestart = false, Func<RestartCoreStage, bool> progressCallback = null, CancellationToken token = default(CancellationToken)) =>
            await RestartCoreInternalAsync(waitForRestart, progressCallback, token).ConfigureAwait(false);

        /// <summary>
        /// Approves or denies a newly installed probe for use within PRTG.
        /// </summary>
        /// <param name="probeOrId">The probe or ID of the probe to set the approval status of.</param>
        /// <param name="action">The approval action to perform for the probe.</param>
        /// <exception cref="InvalidOperationException">The specified object ID is not a probe or is a probe that has already been approved.</exception>
        public void ApproveProbe(Either<Probe, int> probeOrId, ProbeApproval action)
        {
            var approved = GetProbeApprovalStatus(probeOrId);

            if (approved)
                throw new InvalidOperationException($"Cannot change approval status of probe with ID '{probeOrId}': probe has already been approved.");

            ApproveProbeInternal(probeOrId, action);
        }

        /// <summary>
        /// Asynchronously approves or denies a newly installed probe for use within PRTG.
        /// </summary>
        /// <param name="probeOrId">The probe or ID of the probe to set the approval status of.</param>
        /// <param name="action">The approval action to perform for the probe.</param>
        /// <exception cref="InvalidOperationException">The specified object ID is not a probe or is a probe that has already been approved.</exception>
        public async Task ApproveProbeAsync(Either<Probe, int> probeOrId, ProbeApproval action) =>
            await ApproveProbeAsync(probeOrId, action, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously approves or denies a newly installed probe for use within PRTG with a specified cancellation token.
        /// </summary>
        /// <param name="probeOrId">The probe or ID of the probe to set the approval status of.</param>
        /// <param name="action">The approval action to perform for the probe.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="InvalidOperationException">The specified object ID is not a probe or is a probe that has already been approved.</exception>
        public async Task ApproveProbeAsync(Either<Probe, int> probeOrId, ProbeApproval action, CancellationToken token)
        {
            var approved = await GetProbeApprovalStatusAsync(probeOrId, token).ConfigureAwait(false);

            if (approved)
                throw new InvalidOperationException($"Cannot change approval status of probe with ID '{probeOrId}': probe has already been approved.");

            await ApproveProbeInternalAsync(probeOrId, action, token).ConfigureAwait(false);
        }

        #endregion
        #region Organization
            #region Refresh Objects

        /// <summary>
        /// Requests an object or any children of one or more objects refresh themselves immediately.
        /// </summary>
        /// <param name="objectIds">The IDs of the Sensors and/or the IDs of the Probes, Groups or Devices whose child sensors should be refreshed.</param>
        public void RefreshObject(params int[] objectIds) =>
            RequestEngine.ExecuteRequest(new RefreshObjectParameters(objectIds));

        /// <summary>
        /// Asynchronously requests an object or any children of one or more objects refresh themselves immediately.
        /// </summary>
        /// <param name="objectIds">The IDs of the Sensors and/or the IDs of the Probes, Groups or Devices whose child sensors should be refreshed.</param>
        public async Task RefreshObjectAsync(params int[] objectIds) =>
            await RefreshObjectAsync(objectIds, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously requests an object or any children of one or more objects refresh themselves immediately with a specified cancellation token.
        /// </summary>
        /// <param name="objectIds">The IDs of the Sensors and/or the IDs of the Probes, Groups or Devices whose child sensors should be refreshed.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task RefreshObjectAsync(int[] objectIds, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new RefreshObjectParameters(objectIds), token: token).ConfigureAwait(false);

            #endregion
            #region Set Position

        /// <summary>
        /// Moves the position of an object up or down under its parent within the PRTG User Interface.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to reposition.</param>
        /// <param name="position">The direction to move in.</param>
        public void SetPosition(Either<IPrtgObject, int> objectOrId, Position position) =>
            RequestEngine.ExecuteRequest(new SetPositionParameters(objectOrId, position));

        /// <summary>
        /// Sets the absolute position of an object under its parent within the PRTG User Interface.
        /// </summary>
        /// <param name="obj">The object to reposition.</param>
        /// <param name="position">The position to move the object to. If this value is higher than the total number of objects under the parent node, the object will be moved to the last possible position.</param>
        public void SetPosition(SensorOrDeviceOrGroupOrProbe obj, int position) =>
            RequestEngine.ExecuteRequest(new SetPositionParameters(obj, position));

        /// <summary>
        /// Asynchronously moves the position of an object up or down under its parent within the PRTG User Interface.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to reposition.</param>
        /// <param name="position">The direction to move in.</param>
        public async Task SetPositionAsync(Either<IPrtgObject, int> objectOrId, Position position) =>
            await SetPositionAsync(objectOrId, position, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously moves the position of an object up or down under its parent within the PRTG User Interface with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to reposition.</param>
        /// <param name="position">The direction to move in.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetPositionAsync(Either<IPrtgObject, int> objectOrId, Position position, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new SetPositionParameters(objectOrId, position), token: token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously sets the absolute position of an object under its parent within the PRTG User Interface.
        /// </summary>
        /// <param name="obj">The object to reposition.</param>
        /// <param name="position">The position to move the object to. If this value is higher than the total number of objects under the parent node, the object will be moved to the last possible position.</param>
        public async Task SetPositionAsync(SensorOrDeviceOrGroupOrProbe obj, int position) =>
            await SetPositionAsync(obj, position, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously sets the absolute position of an object under its parent within the PRTG User Interface with a specified cancellation token.
        /// </summary>
        /// <param name="obj">The object to reposition.</param>
        /// <param name="position">The position to move the object to. If this value is higher than the total number of objects under the parent node, the object will be moved to the last possible position.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SetPositionAsync(SensorOrDeviceOrGroupOrProbe obj, int position, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new SetPositionParameters(obj, position), token: token).ConfigureAwait(false);

            #endregion
            #region Move Objects

        /// <summary>
        /// Moves a device or group (excluding the root group) to another group or probe within PRTG.
        /// </summary>
        /// <param name="objectOrId">The device or group to move.</param>
        /// <param name="destination">The group or probe to move the object to.</param>
        public void MoveObject(Either<IPrtgObject, int> objectOrId, Either<GroupOrProbe, int> destination) =>
            RequestEngine.ExecuteRequest(new MoveObjectParameters(objectOrId, destination));

        /// <summary>
        /// Asynchronously moves a device or group (excluding the root group) to another group or probe within PRTG.
        /// </summary>
        /// <param name="objectOrId">The device or group to move.</param>
        /// <param name="destination">The group or probe to move the object to.</param>
        public async Task MoveObjectAsync(Either<IPrtgObject, int> objectOrId, Either<GroupOrProbe, int> destination) =>
            await MoveObjectAsync(objectOrId, destination, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously moves a device or group (excluding the root group) to another group or probe within PRTG with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The device or group to move.</param>
        /// <param name="destination">The group or probe to move the object to.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task MoveObjectAsync(Either<IPrtgObject, int> objectOrId, Either<GroupOrProbe, int> destination, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new MoveObjectParameters(objectOrId, destination), token: token).ConfigureAwait(false);

            #endregion
            #region Sort Alphabetically

        /// <summary>
        /// Sorts the children of a device, group or probe alphabetically.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to sort.</param>
        public void SortAlphabetically(Either<IPrtgObject, int> objectOrId) =>
            RequestEngine.ExecuteRequest(new SortAlphabeticallyParameters(objectOrId));

        /// <summary>
        /// Asynchronously sorts the children of a device, group or probe alphabetically.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to sort.</param>
        public async Task SortAlphabeticallyAsync(Either<IPrtgObject, int> objectOrId) =>
            await SortAlphabeticallyAsync(objectOrId, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously sorts the children of a device, group or probe alphabetically with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to sort.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task SortAlphabeticallyAsync(Either<IPrtgObject, int> objectOrId, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new SortAlphabeticallyParameters(objectOrId), token: token).ConfigureAwait(false);

            #endregion
            #region Remove Object

        /// <summary>
        /// Permanently removes one or more objects such as a Sensor, Device, Group or Probe from PRTG. This cannot be undone.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to remove.</param>
        public void RemoveObject(params int[] objectIds) =>
            RequestEngine.ExecuteRequest(new DeleteParameters(objectIds));

        /// <summary>
        /// Asynchronously permanently removes one or more objects such as a Sensor, Device, Group or Probe from PRTG. This cannot be undone.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to remove.</param>
        public async Task RemoveObjectAsync(params int[] objectIds) =>
            await RemoveObjectAsync(objectIds, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously permanently removes one or more objects such as a Sensor, Device, Group or Probe from PRTG with a specified cancellation token. This cannot be undone.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to remove.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task RemoveObjectAsync(int[] objectIds, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new DeleteParameters(objectIds), token: token).ConfigureAwait(false);

            #endregion
            #region Rename Object

        /// <summary>
        /// Renames an object such as a Sensor, Device, Group or Probe within PRTG.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to rename.</param>
        /// <param name="name">New name to give the object.</param>
        public void RenameObject(Either<IPrtgObject, int> objectOrId, string name) =>
            RenameObject(new[] {objectOrId.GetId()}, name);

        /// <summary>
        /// Renames one or more Sensors, Devices, Groups or Probes within PRTG.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to rename.</param>
        /// <param name="name">New name to give the objects.</param>
        public void RenameObject(int[] objectIds, string name) =>
            RequestEngine.ExecuteRequest(new RenameParameters(objectIds, name));

        /// <summary>
        /// Asynchronously renames an object such as a Sensor, Device, Group or Probe within PRTG.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to rename.</param>
        /// <param name="name">New name to give the object.</param>
        public async Task RenameObjectAsync(Either<IPrtgObject, int> objectOrId, string name) =>
            await RenameObjectAsync(objectOrId, name, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously renames an object such as a Sensor, Device, Group or Probe within PRTG with a specified cancellation token.
        /// </summary>
        /// <param name="objectOrId">The object or ID of the object to rename.</param>
        /// <param name="name">New name to give the object.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task RenameObjectAsync(Either<IPrtgObject, int> objectOrId, string name, CancellationToken token) =>
            await RenameObjectAsync(new[] {objectOrId.GetId()}, name, token: token).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously renames one or more Sensors, Devices, Groups or Probes within PRTG.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to rename.</param>
        /// <param name="name">New name to give the objects.</param>
        public async Task RenameObjectAsync(int[] objectIds, string name) =>
            await RenameObjectAsync(objectIds, name, CancellationToken.None).ConfigureAwait(false);

        /// <summary>
        /// Asynchronously renames one or more Sensors, Devices, Groups or Probes within PRTG with a specified cancellation token.
        /// </summary>
        /// <param name="objectIds">IDs of the objects to rename.</param>
        /// <param name="name">New name to give the objects.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async Task RenameObjectAsync(int[] objectIds, string name, CancellationToken token) =>
            await RequestEngine.ExecuteRequestAsync(new RenameParameters(objectIds, name), token: token).ConfigureAwait(false);

            #endregion
        #endregion
    #endregion
    }
}