<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="T4Functions.ttinc" #>
<#@ output extension=".cs" #>
/************************************************************************************
 * This code was generated by a tool.                                               *
 * Please do not modify this file directly - modify PrtgClient.Generated.tt instead *
 ************************************************************************************/
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using PrtgAPI.Attributes;
using PrtgAPI.Parameters;
using PrtgAPI.Parameters.Helpers;
using PrtgAPI.Linq;
using PrtgAPI.Request.Serialization;
using PrtgAPI.Request;
using PrtgAPI.Utilities;

//Methods with complex logic surrounding sync/async function calls.
//For each method, two variants are generated. A synchronous method with the
//expected return type, and an async method that implicitly wraps the result
//in a Task

namespace PrtgAPI
{
    public partial class PrtgClient
    {
        //######################################
        // GetChannelsInternal
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("GetChannelsInternal", "List<Channel>", i) #>(Either<Sensor, int> sensorOrId, Func<string, bool> nameFilter = null, Func<int, bool> idFilter = null, CancellationToken token = default(CancellationToken))
        {
            if (nameFilter == null)
                nameFilter = n => true;

            if (idFilter == null)
                idFilter = i => true;

            var response = <#= CallFunction("ObjectEngine.GetObjectsXml", "new ChannelParameters(sensorOrId), token: token", i) #>;

            response.Descendants("item").Where(item => item.Element("objid").Value == "-4").Remove();

            var items = response.Descendants("item").ToList();

            items.Where(e => 
                !nameFilter(e.Element("name").Value?.ToString()) ||
                !idFilter(Convert.ToInt32(e.Element("objid").Value.ToString()))
            ).Remove();

            items = response.Descendants("item").ToList();

            <#= StartLoopOrTask("item", "items", i) #>
            {
                var id = Convert.ToInt32(item.Element("objid").Value);

                var properties = <#= CallFunction("GetChannelProperties", "sensorOrId, id, token", i) #>;

                item.Add(properties.Nodes());
                item.Add(new XElement("injected_sensorId", sensorOrId.GetId()));
            }<#= EndLoopOrTask(i) #>

            if (items.Count > 0)
                return ObjectEngine.XmlEngine.DeserializeTable<Channel>(response.CreateReader()).Items;

            return new List<Channel>();
        }

<#
}
#>
        //######################################
        // GetNotificationActionsInternal
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("GetNotificationActionsInternal", "List<NotificationAction>", i) #>(NotificationActionParameters parameters, CancellationToken token)
        {
            var response = <#= CallFunction("ObjectEngine.GetObjectsXml", "parameters, token: token", i) #>;

            var items = response.Descendants("item").ToList();

            <#= StartLoopOrTask("item", "items", i) #>
            {
                var id = Convert.ToInt32(item.Element("objid").Value);

                var properties = <#= CallFunction("GetNotificationActionProperties", "id, token", i) #>;

                item.Add(properties.Nodes());
            }<#= EndLoopOrTask(i) #>

            var actions = ObjectEngine.XmlEngine.DeserializeTable<NotificationAction>(response.CreateReader()).Items;

            var actionsWithSchedules = ResponseParser.GroupActionSchedules(actions).ToList();

            <#= CallFunction("UpdateActionSchedules", "actionsWithSchedules, token", i) #>;

            return actions;
        }

<#
}
#>
        //######################################
        // GetSchedulesInternal
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("GetSchedulesInternal", "List<Schedule>", i) #>(ScheduleParameters parameters, CancellationToken token)
        {
            var schedules = <#= CallGenericFunction("ObjectEngine.GetObjects", "Schedule", "parameters, token: token", i) #>;

            <#= StartLoopOrTask("schedule", "schedules", i) #>
            {
                var response = (<#= CallFunction("GetObjectPropertiesRawInternal", "schedule.Id, ObjectType.Schedule, token", i) #>).StringValue;
                ResponseParser.LoadTimeTable(schedule, response);
            }<#= EndLoopOrTask(i) #>

            return schedules;
        }

<#
}
#>
        //######################################
        // ValidateTriggerParameters
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        private <#= GetSignature("ValidateTriggerParameters", "void", i) #>(TriggerParameters parameters, CancellationToken token)
        {
            if (parameters == null)
                throw new ArgumentNullException(nameof(parameters), "Parameters cannot be null.");

            if (parameters.Action == ModifyAction.Add)
            {
                var data = <#= CallFunction("GetNotificationTriggerData", "parameters.ObjectId, token", i) #>;

                if (!data.SupportedTypes.Contains(parameters.Type))
                    throw new InvalidTriggerTypeException(parameters.ObjectId, parameters.Type, data.SupportedTypes.ToList());
            }

            var channel = RequestParser.GetTriggerChannel(parameters);

            if (channel == null)
                return;

            var sensor = <#= CallFunction("GetSensors", "Property.Id, parameters.ObjectId, token", i) #>;

            if (sensor.Count > 0) //Validate this sensor has this channel
            {
                if (channel.channel is StandardTriggerChannel)
                    throw new InvalidOperationException($"Channel '{channel}' is not a valid value for sensor with ID {parameters.ObjectId}. Triggers assigned directly to sensors must refer to a specific Channel or Channel ID.");

                bool anyResponse = false;

                if (channel.channel is Channel)
                    anyResponse = (<#= CallFunction("GetChannelsInternal", "parameters.ObjectId, n => n == ((Channel)channel.channel).Name, i => i == ((Channel)channel.channel).Id, token", i) #>).Any();
                else
                    anyResponse = (<#= CallFunction("GetChannelProperties", "parameters.ObjectId, Convert.ToInt32(((ISerializable)channel).GetSerializedFormat()), token", i) #>).Descendants().Any();

                if (!anyResponse)
                    throw new InvalidOperationException($"Channel {(channel.channel is int ? "ID " : "")}'{channel}' is not a valid channel for sensor with ID {parameters.ObjectId}. Channel could not be found.");
            }
            else //It's a container. Only enum values are permitted.
            {
                if (!(channel.channel is StandardTriggerChannel))
                {
                    var prefix = channel.channel is int ? $"Channel ID '{channel}'" : $"Channel '{channel.channel}' of type '{channel.channel.GetType().Name}'";

                    throw new InvalidOperationException($"{prefix} is not a valid channel for Device, Group or Probe with ID {parameters.ObjectId}. Channel must be one of 'Primary', 'Total', 'TrafficIn' or 'TrafficOut' of type '{nameof(StandardTriggerChannel)}'."); //todo: make this dynamically get all names in the enum
                }
            }
        }

<#
}
#>
        //######################################
        // UpdateTriggerChannels
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        private <#= GetSignature("UpdateTriggerChannels", "void", i) #>(Either<IPrtgObject, int> objectOrId, List<NotificationTrigger> triggers, CancellationToken token)
        {
            var isSensor = false;
            var sensorChannels = new List<Channel>();

            if (triggers.Any(t => t.HasChannel()))
            {
                isSensor = <#= CallFunction("IsSensor", "objectOrId", i) #>;

                if (isSensor)
                {
                    Log($"Retrieving channels for sensor specific, channel based Notification Triggers (Object ID: {objectOrId.GetId()})", LogLevel.Trace);
                    sensorChannels = (<#= CallFunction("GetChannelsInternal", "objectOrId.GetId(), n => triggers.Any(t => t.channelName == n), token: token", i) #>);
                }
            }

            foreach (var trigger in triggers)
            {
                if (trigger.HasChannel())
                {
                    if (isSensor)
                    {
                        //If we're an inherited trigger, we still could be requesting the "Total" channel or something of a sensor,
                        //in which case we want to return the Channel object.
                        trigger.channelObj = sensorChannels.FirstOrDefault(c => c.Name == trigger.channelName);
                    }

                    if (trigger.channelObj == null)
                    {
                        //Either we're not a sensor, or our channel is corrupt.
                        //If we detected we had ANY channels, we must be a sensor.
                        //If SetEnumChannel fails (which should be impossible)
                        //then maybe we're a sensor with zero channels or something?

                        if ((isSensor && !trigger.Inherited) || !trigger.SetEnumChannel())
                            throw new InvalidStateException($"Could not deserialize channel '{trigger.channelName}' of {trigger.Type.ToString().ToLower()} trigger '{trigger.SubId}' of object ID '{trigger.ObjectId}'. Object may be in a corrupted state. Please check the notification triggers of object ID {trigger.ObjectId} in the PRTG UI.");
                    }
                }
            }
        }

<#
}
#>
        //######################################
        // ParseNotificationTriggerTypes
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        private <#= GetSignature("ParseNotificationTriggerTypes", "PrtgResponse", i) #>(HttpResponseMessage response)
        {
            var responseText = <#= AwaitOrForceResult("response.Content.ReadAsStringAsync()", i) #>

            var match = Regex.Match(responseText, "\"data\": \"(.+?)\",");

            if (match.Success)
                responseText = responseText.Replace(match.Value, "");

            return responseText;
        }

<#
}
#>
        //######################################
        // WaitForCoreRestart
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("WaitForCoreRestart", "void", i) #>(DateTime restartTime, Func<RestartCoreStage, bool> callback, CancellationToken token)
        {
            RestartCoreStage coreStage = RestartCoreStage.Shutdown;

            var originalRetries = RetryCount;

            try
            {
                RetryCount = 0;

                while (coreStage != RestartCoreStage.Completed && !token.IsCancellationRequested)
                {
                    coreStage = <#= CallFunction("ProbeServer", "restartTime, token", i) #>;

                    if (callback != null && !callback(coreStage))
                        break;

                    if (coreStage == RestartCoreStage.Completed)
                        break;
#if !DEBUG
                    if (callback == null)
                        <#= WaitOne("5000", "token", i) #>
#endif
                }
            }
            finally
            {
                RetryCount = originalRetries;
            }
        }

<#
}
#>
        //######################################
        // ProbeServer
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        private <#= GetSignature("ProbeServer", "RestartCoreStage", i) #>(DateTime restartTime, CancellationToken token)
        {
            RestartCoreStage coreStage;
            
            try
            {
                var logs = <#= CallFunction("GetLogs", "new LogParameters(null, null, restartTime, status: LogStatus.SystemStart), token", i) #>;

                coreStage = logs.Any() ? RestartCoreStage.Completed : RestartCoreStage.Shutdown;
            }
            catch (Exception ex) when (ex is WebException || ex is TimeoutException)
            {
                coreStage = RestartCoreStage.Restart;
            }
            catch (HttpRequestException)
            {
                coreStage = RestartCoreStage.Startup;
            }

            return coreStage;
        }

<#
}
#>
        //######################################
        // WaitForCoreRestart
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("WaitForProbeRestart", "void", i) #>(DateTime restartTime, List<Probe> probes, Func<ProbeRestartProgress[], bool>  progressCallback, CancellationToken token)
        {
            List<ProbeRestartProgress> probeStatuses = probes.Select(p => new ProbeRestartProgress(p)).ToList();

            while (probeStatuses.Any(p => p.Reconnected == false) && !token.IsCancellationRequested)
            {
                //Get all logs relating to probes connecting and disconnecting since we initiated the restarts.
                //If we've already detected all probes have disconnected, no need to include those logs in the response
                var statuses = new List<LogStatus> { LogStatus.Connected };

                if (probeStatuses.Any(p => !p.Disconnected))
                    statuses.Add(LogStatus.Disconnected);

                var logs = <#= CallFunction("GetLogs", "new LogParameters(null, null, restartTime, status: statuses.ToArray()), token", i) #>;

                ResponseParser.UpdateProbeStatus(probeStatuses, logs);

                if (progressCallback == null)
                    <#= WaitOne("5000", "token", i) #>
                else
                {
                    var result = progressCallback(probeStatuses.ToArray());

                    if (!result)
                        break;
                }
            }
        }

<#
}
#>
        //######################################
        // AddObjectWithExcessiveValue
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("AddObjectWithExcessiveValue", "void", i) #>(List<KeyValuePair<Parameter, object>> lengthLimit, ICommandParameters internalParams, CancellationToken token)
        {
            var limitParam = lengthLimit.First();

            var limit = limitParam.Key.GetEnumAttribute<LengthLimitAttribute>().Length;

            if (limitParam.Value.IsIEnumerable())
            {
                var list = limitParam.Value.ToIEnumerable().ToList();

                var count = list.Count();

                if (count > limit)
                {
                    for (int i = 0; i < count; i += limit)
                    {
                        var thisRequest = list.Skip(i).Take(limit);

                        internalParams[limitParam.Key] = thisRequest;

                        <#= CallFunction("AddObjectWithInternalParams", "internalParams, i, token", i) #>;
                    }
                }
                else
                    <#= CallFunction("AddObjectWithInternalParams", "internalParams, 0, token", i) #>;
            }
            else
                throw new NotImplementedException($"Don't know how to handle {nameof(LengthLimitAttribute)} applied to value of type {limitParam.Value.GetType()}.");
        }

<#
}
#>
        //######################################
        // ResolveSensorTargets
        //######################################

        /*
         * Resolving sensor targets is a four step process, accomplished by executing three requests against PRTG:
         *
         * | Step | Required                              | Page                     | Description                                         |
         * | ---- | ------------------------------------- | ------------------------ | --------------------------------------------------- |
         * |  1   | SensorType, Device ID                 | addsensor2.htm           | Request a tmpid for creating a sensor               |
         * |  2a  |                                       | addsensor3.htm           | Response containing the tmpid requested in step 1   |
         * |  2b  | Device ID, TmpID, Query Target Params | addsensor3.htm           | Response requesting Query Target Parameters         |
         * |  3   | tmpid, Cookie                         | getaddsensorprogress.htm | Wait for sensor targets to be retrieved             |
         * |  4   | tmpid, Cookie                         | addsensor4.htm           | Scrape the contents of the new sensor creation page |
         */

<#
for(int i = 0; i < 2; i++)
{
#>
        /// <summary>
        /// Entry point for resolving sensor targets of a supported sensor type.
        /// </summary>
        /// <typeparam name="T">The type of sensor targets the response should be transformed into.</typeparam>
        /// <param name="deviceOrId">The device or ID of the device to retrieve sensor targets from.</param>
        /// <param name="sensorType">Type of sensor to retrieve sensor targets for.</param>
        /// <param name="progressCallback">A callback function used to monitor the progress of the request. If this function returns false, the request is aborted and this method returns null.</param>
        /// <param name="timeout">Duration (in seconds) to wait for sensor targets to resolve.</param>
        /// <param name="queryParameters">A <see cref="SensorQueryTarget"/>, <see cref="SensorQueryTargetParameters"/> or <see cref="SensorMultiQueryTargetParameters"/> value specifying the parameters must be known prior to interrogating a sensor's dynamic parameters (such as the SNMP Library file to use or IPMI UserName and Password).</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="parser">Transforms the result of <see cref="HtmlFunction.AddSensor4"/> to instances of type <typeparamref name="T"/>.</param>
        /// <returns>A list of targets that were extracted from PRTG.</returns>
        internal <#= GetSignature("ResolveSensorTargets", "List<T>", i) #><T>(Either<Device, int> deviceOrId, SensorType sensorType, Func<int, bool> progressCallback, int timeout, ISensorQueryTargetParameters queryParameters, CancellationToken token, Func<string, List<T>> parser)
        {
            var parameters = <#= CallFunction("ValidateAddSensorQueryParameters", "new BeginAddSensorQueryParameters(deviceOrId, sensorType, queryParameters)", i) #>;

            return <#= CallFunction("ResolveSensorTargets", "deviceOrId, parameters, progressCallback, timeout, token, parser", i) #>;
        }

        /// <summary>
        /// Entry point for resolving sensor targets of a raw sensor type.
        /// </summary>
        /// <typeparam name="T">The type of sensor targets the response should be transformed into.</typeparam>
        /// <param name="deviceOrId">The device or ID of the device to retrieve sensor targets from.</param>
        /// <param name="sensorType">Type of sensor to retrieve sensor targets for.</param>
        /// <param name="progressCallback">A callback function used to monitor the progress of the request. If this function returns false, the request is aborted and this method returns null.</param>
        /// <param name="timeout">Duration (in seconds) to wait for sensor targets to resolve.</param>
        /// <param name="queryParameters">A <see cref="SensorQueryTarget"/>, <see cref="SensorQueryTargetParameters"/> or <see cref="SensorMultiQueryTargetParameters"/> value specifying the parameters must be known prior to interrogating a sensor's dynamic parameters (such as the SNMP Library file to use or IPMI UserName and Password).</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="parser">Transforms the result of <see cref="HtmlFunction.AddSensor4"/> to instances of type <typeparamref name="T"/>.</param>
        /// <returns>A list of targets that were extracted from PRTG.</returns>
        internal <#= GetSignature("ResolveSensorTargets", "List<T>", i) #><T>(Either<Device, int> deviceOrId, string sensorType, Func<int, bool> progressCallback, int timeout, ISensorQueryTargetParameters queryParameters, CancellationToken token, Func<string, List<T>> parser)
        {
            var parameters = <#= CallFunction("ValidateAddSensorQueryParameters", "new BeginAddSensorQueryParameters(deviceOrId, sensorType, queryParameters)", i) #>; //todo: make them all use the async one. they should both have the same count of usages in the end

            return <#= CallFunction("ResolveSensorTargets", "deviceOrId, parameters, progressCallback, timeout, token, parser", i) #>;
        }

        /// <summary>
        /// Common entry point for scraping <see cref="HtmlFunction.AddSensor4"/> for either a supported or raw sensor type and then transforming the response into a set of sensor targets.
        /// </summary>
        /// <typeparam name="T">The type of sensor targets the response should be transformed into.</typeparam>
        /// <param name="deviceOrId">The device or ID of the device to retrieve sensor targets from.</param>
        /// <param name="parameters">A set of parameters for requesting the <see cref="Parameter.TmpId"/> of either a supported or raw sensor type.</param>
        /// <param name="progressCallback">A callback function used to monitor the progress of the request. If this function returns false, the request is aborted and this method returns null.</param>
        /// <param name="timeout">Duration (in seconds) to wait for sensor targets to resolve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="parser">Transforms the result of <see cref="HtmlFunction.AddSensor4"/> to instances of type <typeparamref name="T"/>.</param>
        /// <returns>A list of targets that were extracted from PRTG.</returns>
        private <#= GetSignature("ResolveSensorTargets", "List<T>", i) #><T>(Either<Device, int> deviceOrId, BeginAddSensorQueryParameters parameters, Func<int, bool> progressCallback, int timeout, CancellationToken token, Func<string, List<T>> parser)
        {
            var response = <#= CallFunction("GetSensorTargetsResponse", "deviceOrId, parameters, progressCallback, timeout, token", i) #>;

            if (response == null)
                return null;

            return parser(response);
        }

<#
}
#>
        //######################################
        // GetAddSensorQueryResponse
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        /// <summary>
        /// Special entry point for constructing parameters from a raw sensor type and retrieving the contents of <see cref="HtmlFunction.AddSensor4"/> without parsing into sensor targets.
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to probe.</param>
        /// <param name="sensorType">Type of sensor to retrieve parameters for.</param>
        /// <param name="progressCallback">A callback function used to monitor the progress of the request. If this function returns false, the request is aborted and this method returns null.</param>
        /// <param name="timeout">Duration (in seconds) to wait for sensor targets to resolve.</param>
        /// <param name="queryParameters">A <see cref="SensorQueryTarget"/>, <see cref="SensorQueryTargetParameters"/> or <see cref="SensorMultiQueryTargetParameters"/> value specifying the parameters must be known prior to interrogating a sensor's dynamic parameters (such as the SNMP Library file to use or IPMI UserName and Password).</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The contents of the <see cref="HtmlFunction.AddSensor4"/> page.</returns>
        private <#= GetSignature("GetAddSensorQueryResponse", "string", i) #>(Either<Device, int> deviceOrId, string sensorType, Func<int, bool> progressCallback, int timeout, ISensorQueryTargetParameters queryParameters, CancellationToken token)
        {
            var parameters = <#= CallFunction("ValidateAddSensorQueryParameters", "new BeginAddSensorQueryParameters(deviceOrId, sensorType, queryParameters)", i) #>; //todo: make them all use the async one. they should both have the same count of usages in the end

            return <#= CallFunction("GetSensorTargetsResponse", "deviceOrId, parameters, progressCallback, timeout, token", i) #>;
        }

        /// <summary>
        /// Entry point for retrieving the raw contents of the <see cref="HtmlFunction.AddSensor4"/> page (without performing any post-request manipulations)
        /// </summary>
        /// <param name="deviceOrId">The device or ID of the device to probe.</param>
        /// <param name="parameters">A set of parameters for requesting the <see cref="Parameter.TmpId"/> of either a supported or raw sensor type.</param>
        /// <param name="progressCallback">A callback function used to monitor the progress of the request. If this function returns false, the request is aborted and this method returns null.</param>
        /// <param name="timeout">Duration (in seconds) to wait for sensor targets to resolve.</param>
        /// <param name="token">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>The contents of the <see cref="HtmlFunction.AddSensor4"/> page.</returns>
        private <#= GetSignature("GetSensorTargetsResponse", "string", i) #>(Either<Device, int> deviceOrId, BeginAddSensorQueryParameters parameters, Func<int, bool> progressCallback, int timeout, CancellationToken token)
        {
            var tmpId = (<#= CallFunction("GetAddSensorTmpId", "parameters, token", i) #>);

            if (tmpId == null)
                throw new PrtgRequestException($"Failed to resolve sensor targets for sensor type '{parameters[Parameter.SensorType]}': type was not valid or you do not have sufficient permissions on the specified object.");

            var response = <#= CallFunction("WaitForSensorTargetResolution", "deviceOrId, tmpId.Value, progressCallback, timeout, token", i) #>;

            return response;
        }

        internal <#= GetSignature("GetAddSensorTmpId", "int?", i) #>(BeginAddSensorQueryParameters parameters, CancellationToken token)
        {
            <#= DeclareFunc("getSensorTargetTmpId", "m", "HttpResponseMessage", "GetSensorTargetTmpId", "m, parameters.QueryParameters, token", "PrtgResponse", i) #>;

            //Execute the request against addsensor2.htm to retrieve our tmpid
            var tmpIdStr = (<#= CallFunction("RequestEngine.ExecuteRequest", "parameters, getSensorTargetTmpId, token", i) #>).StringValue;

            int tmpId;

            if (int.TryParse(tmpIdStr, out tmpId))
                return tmpId;

            return null;
        }

        internal <#= GetSignature("GetSensorTargetTmpId", "PrtgResponse", i) #>(HttpResponseMessage message, SensorMultiQueryTargetParameters queryParameters, CancellationToken token)
        {
            var uri = message.RequestMessage.RequestUri.ToString();

            if (uri.Contains(CommandFunction.AddSensor3.GetDescription()))
                return ResponseParser.GetSensorTargetTmpId(message);
            {
                var content = message.Content.ReadAsStringAsync().Result;

                var components = UrlUtilities.CrackUrl(uri);

                try
                {
                    RequestEngine.ValidateHttpResponse(message, content);
                }
                catch (PrtgRequestException ex)
                {
                    var exceptionMessage = ex.Message;

                    var str = "PRTG was unable to complete the request. ";

                    if (exceptionMessage.StartsWith(str))
                        exceptionMessage = exceptionMessage.Substring(str.Length);

                    throw new PrtgRequestException($"Failed to process query for sensor type '{components["sensortype"]}': you may not have sufficient permissions on the specified object. {exceptionMessage.EnsurePeriod()}");
                }

                var parameters = ResponseParser.GetProcessSensorQueryParameters(content, components["sensortype"], queryParameters);

                //If we couldn't find our tmpid (e.g. because we're a read-only user) return null for the tmpid and let
                //the calling method handle it
                if (parameters == null)
                    return null;

                <#= DeclareLightFunc1("getSensorTargetTmpId", "HttpResponseMessage", "PrtgResponse", "ResponseParser.GetSensorTargetTmpId", i) #>;

                return <#= CallFunction("RequestEngine.ExecuteRequest", "parameters, getSensorTargetTmpId, token", i) #>;
            }
        }

<#
}
#>
        //######################################
        // WaitForSensorTargetResolution
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        private <#= GetSignature("WaitForSensorTargetResolution", "string", i) #>(Either<Device, int> deviceOrId, int tmpId, Func<int, bool> progressCallback, int timeout, CancellationToken token)
        {
            var parameters = new AddSensorProgressParameters(deviceOrId, tmpId);

            AddSensorProgress p;
            bool continueQuery = true;

            var stopwatch = new Stopwatch();
            var timeoutTimeSpan = TimeSpan.FromSeconds(timeout);

            stopwatch.Start();

            do
            {
                //Probe getaddsensorprogress.htm
                p = <#= CallGenericFunction("ObjectEngine.GetObject", "AddSensorProgress", "parameters, token: token", i) #>;

                if (progressCallback != null)
                    continueQuery = progressCallback(p.Percent);

                if (p.Percent < 100)
                {
                    if (!continueQuery)
                        break;

                        if (stopwatch.Elapsed > timeoutTimeSpan)
                            throw new TimeoutException("Failed to retrieve sensor information within a reasonable period of time. Check target device is accessible and that valid credentials have been supplied.");

#if !DEBUG
                    <#= WaitOne("1000", "token", i) #>
#endif
                }
            } while (p.Percent < 100);

            if (!continueQuery)
                return null;

            <#= CallFunction("ValidateAddSensorProgressResult", "deviceOrId, p, false, token", i) #>;

            //Scrape addsensor4.htm
            var page = (<#= CallFunction("RequestEngine.ExecuteRequest", "new EndAddSensorQueryParameters(deviceOrId, tmpId), token: token", i) #>).StringValue;

            return page;
        }

<#
}
#>
        //######################################
        // ValidateAddSensorProgressResult
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("ValidateAddSensorProgressResult", "void", i) #>(Either<Device, int> deviceOrId, AddSensorProgress progress, bool addFull, CancellationToken token)
        {
            if (progress.TargetUrl.StartsWith("addsensorfailed"))
            {
                var parts = UrlUtilities.CrackUrl(progress.TargetUrl);

                var enhancedErrorHtml = (<#= CallFunction("RequestEngine.ExecuteRequest", "new AddSensorFailedParameters(deviceOrId, parts[\"sensorkind\"]), token: token", i) #>).StringValue;

                ResponseParser.ProcessAddSensorProgressFailed(parts, enhancedErrorHtml, addFull);
            }

            if (addFull && progress.Percent == -1)
                throw new PrtgRequestException($"PRTG was unable to complete the request. The server responded with the following error: '{progress.Error.Replace("<br/><ul><li>", " ").Replace("</li></ul><br/>", " ")}'.");
        }

<#
}
#>
        //######################################
        // AddObject
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("AddObject", "List<T>", i) #><T>(Either<IPrtgObject, int> parent, NewObjectParameters parameters,
            Func<SearchFilter[], CancellationToken, <#= GetFuncRet("List<T>", i) #>> getObjects, bool resolve, CancellationToken token, Action<Type, int> errorCallback = null,
            Func<bool> shouldStop = null, bool allowMultiple = false) where T : SensorOrDeviceOrGroupOrProbe
        {
            if (parameters == null)
                throw new ArgumentNullException(nameof(parameters), "Parameters cannot be null.");

            if (resolve)
            {
                var filters = RequestParser.GetFilters(parent, parameters);

                <#= DeclareTokenAction0("addObjectInternal", "AddObjectInternal", "parent, parameters", i) #>;
                <#= DeclareTokenFuncFromVariable0("getObjs", "getObjects", "filters", "List<T>", i) #>;

                return (<#= CallFunction("ResolveWithDiff", "addObjectInternal, getObjs, ResponseParser.ExceptTableObject, token, errorCallback, shouldStop, allowMultiple, RequestParser.GetEnhancedResolutionError(parameters)", i) #>).OrderBy(o => o.Id).ToList();
            }
            else
            {
                <#= CallFunction("AddObjectInternal", "parent, parameters, token", i) #>;

                return null;
            }
        }

        private <#= GetSignature("AddObjectInternal", "void", i) #>(Either<IPrtgObject, int> parent, NewObjectParameters parameters, CancellationToken token)
        {
            var lengthLimit = RequestParser.ValidateObjectParameters(parameters);

            var internalParams = RequestParser.GetInternalNewObjectParameters(parent, parameters);

            if (lengthLimit.Count > 0)
                <#= CallFunction("AddObjectWithExcessiveValue", "lengthLimit, internalParams, token", i) #>;
            else
            {
                if (RequestParser.IsAddSensor(internalParams))
                    <#= CallFunction("GetVersionClient().AddSensorInternal", "internalParams, 0, token", i) #>;
                else
                    <#= CallFunction("AddObjectInternalDefault", "internalParams, token", i) #>;
            }
        }

        private <#= GetSignature("AddObjectWithInternalParams", "void", i) #>(ICommandParameters internalParams, int index, CancellationToken token)
        {
            if (RequestParser.IsAddSensor(internalParams))
                <#= CallFunction("GetVersionClient().AddSensorInternal", "internalParams, index, token", i) #>;
            else
                <#= CallFunction("AddObjectInternalDefault", "internalParams, token", i) #>;
        }

        internal <#= GetSignature("AddObjectInternalDefault", "void", i)#>(ICommandParameters internalParams, CancellationToken token)
        {
            <#= DeclareLightFunc1("parseAddObjectResponse", "HttpResponseMessage", "PrtgResponse", "ResponseParser.ParseAddObjectResponse", i) #>;

            <#= CallFunction("RequestEngine.ExecuteRequest", "internalParams, parseAddObjectResponse, token", i) #>;
        }

        private <#= GetSignature("ResolveWithDiff", "List<T>", i) #><T>(<#= GetTokenActionParam0(i) #> createObject, Func<CancellationToken, <#= GetFuncRet("List<T>", i) #>> getObjects, Func<List<T>, List<T>, List<T>> exceptFunc,
             CancellationToken token, Action<Type, int> errorCallback, Func<bool> shouldStop, bool allowMultiple = false, string enhancedResolutionError = null)
        {
            var before = <#= CallFunc("getObjects", "token", i) #>;

            <#= CallFunc("createObject", "token", i) #>;

            var after = <#= CallFunction("ResolveObject", "getObjects, token, a => exceptFunc(before, a).Any(), errorCallback: errorCallback, shouldStop: shouldStop, enhancedResolutionError: enhancedResolutionError", i) #>;

            var newObjects = exceptFunc(before, after);

            if (!allowMultiple && newObjects.Count > 1)
            {
                var typeName = typeof (T).Name;

                IEnumerable<string> names;

                if (typeof (PrtgObject).IsAssignableFrom(typeof (T)))
                {
                    var objs = newObjects.Cast<PrtgObject>();

                    names = objs.Select(o => $"'{o.Name}' (ID: {o.Id})");
                }
                else
                    names = newObjects.Select(o => $"'{o}'");

                var str = $"Could not uniquely identify created {typeName}: multiple new objects ({string.Join(", ", names)}) were found under parent object. Did you create an additional object with the same type or name under the parent while resolution was occurring?";

                throw new ObjectResolutionException(str);
            }

            return <#= CallFunction("CleanObjects", "newObjects, token", i) #>;
        }

        internal <#= GetSignature("ResolveObject", "List<T>", i) #><T>(Func<CancellationToken, <#= GetFuncRet("List<T>", i) #>> getObjects, CancellationToken token, Func<List<T>, bool> recordsFound, string resolutionError = "Could not resolve object",
            Type trueType = null, Action<Type, int> errorCallback = null, Func<bool> shouldStop = null, string enhancedResolutionError = null)
        {
            List<T> @object;

            var retriesRemaining = 4;
            var delay = 3;

            do
            {
                @object = <#= CallFunc("getObjects", "token", i) #>;

                if (!recordsFound(@object))
                {
                    if (retriesRemaining == 0)
                    {
                        if (enhancedResolutionError != null)
                            enhancedResolutionError = " " + enhancedResolutionError;

                        throw new ObjectResolutionException($"{resolutionError}: PRTG is taking too long to create the object.{enhancedResolutionError} Confirm the object has been created in the Web UI and then attempt resolution again manually.");
                    }

                    var type = trueType ?? typeof (T);

                    errorCallback?.Invoke(type, retriesRemaining);
                    retriesRemaining--;

#if DEBUG
                    if (!UnitTest())
#endif
                        <#= WaitOne("delay * 1000", "token", i) #>

                    delay *= 2;
                }

                if (shouldStop?.Invoke() == true)
                    break;

            } while (!recordsFound(@object));

            return @object;
        }
        
        private <#= GetSignature("CleanObjects", "List<T>", i) #><T>(List<T> newObjects, CancellationToken token)
        {
            if (newObjects.All(o => o is Sensor))
            {
                var sensors = newObjects.Cast<Sensor>().ToList();

                bool modified = false;

                foreach (var obj in sensors)
                {
                    //PRTG may sometimes prepend spaces to the front of the sensor name. This can even happen
                    //in the Web UI
                    if (obj.Name.StartsWith(" "))
                    {
                        modified = true;
                        <#= CallFunctionWithAsyncOnlyToken("RenameObject", "obj.Id, obj.Name.Trim(' ')", "token", i) #>;
                    }
                }

                if (modified)
                    newObjects = (<#= CallFunction("GetSensors", "Property.Id, sensors.Select(s => s.Id), token", i) #>).Cast<T>().ToList();
            }

            return newObjects;
        }

<#
}
#>
        //######################################
        // AddNotificationTriggerInternal
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("AddNotificationTriggerInternal", "List<NotificationTrigger>", i)#>(TriggerParameters parameters, bool resolve,
            CancellationToken token, Action<Type, int> errorCallback = null, Func<bool> shouldStop = null)
        {
            if (parameters == null)
                throw new ArgumentNullException(nameof(parameters), "Parameters cannot be null.");

            if (resolve)
            {
                <#= DeclareTokenAction0("addTrigger", "SetNotificationTriggerInternal", "parameters", i) #>;
                <#= DeclareTokenFuncThen0("getTrigger", "GetNotificationTriggersInternal", "parameters.ObjectId", "List<NotificationTrigger>", ".Where(r => !r.Inherited).ToList();", i) #>

                var objs = <#= CallFunction("ResolveWithDiff", "addTrigger, getTrigger, (b, a) => ResponseParser.ExceptTrigger(b, a, parameters), token, errorCallback, shouldStop", i) #>;

                return objs;
            }
            else
            {
                <#= CallFunction("SetNotificationTriggerInternal", "parameters, token", i) #>;

                return null;
            }
        }

<#
}
#>
        //######################################
        // GetObject
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignatureWithAsyncOnlyToken("GetObjectInternal", "PrtgObject", "int objectId, bool resolve", "token", i)#>
        {
            var objs = <#= CallFunctionWithAsyncOnlyToken("GetObjects", "Property.Id, objectId", "token", i) #>;

            if (objs.Count != 1)
                return objs.SingleObject(objectId);

            var obj = objs.Single();

            if (resolve)
            {
                switch (obj.Type.Value)
                {
                    case ObjectType.Sensor:       return <#= CallFunctionWithAsyncOnlyToken("GetSensor", "objectId", "token", i) #>;
                    case ObjectType.Device:       return <#= CallFunctionWithAsyncOnlyToken("GetDevice", "objectId", "token", i) #>;
                    case ObjectType.Group:        return <#= CallFunctionWithAsyncOnlyToken("GetGroup", "objectId", "token", i) #>;
                    case ObjectType.Probe:        return <#= CallFunctionWithAsyncOnlyToken("GetProbe", "objectId", "token", i) #>;
                    case ObjectType.Notification: return <#= CallFunctionWithAsyncOnlyToken("GetNotificationAction", "objectId", "token", i) #>;
                    case ObjectType.Schedule:     return <#= CallFunctionWithAsyncOnlyToken("GetSchedule", "objectId", "token", i) #>;
                    default:
                        return obj;
                }
            }

            return obj;
        }

<#
}
#>
        //######################################
        // GetSystemInfoInternal
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetGenericTokenSignature("GetSystemInfoInternal", "List<T>", "T", "Either<Device, int> deviceOrId", "token", i)#> where T : IDeviceInfo
        {
            var deviceId = deviceOrId.GetId();

            var parameters = new SystemInfoParameters<T>(deviceId);

            <#= DeclareFunc("func", "m", "HttpResponseMessage", "ParseSystemInfoResponse", "m, parameters.Columns", "PrtgResponse", i) #>;

            var info = <#= CallGenericFunction("ObjectEngine.GetObject", "SysInfoData<T>", "parameters, func, token: token", i) #>;

            foreach (var item in info.Items)
                item.DeviceId = deviceId;

            return info.Items;
        }

        internal <#= GetSignatureWithAsyncOnlyToken("GetSystemInfoInternal", "List<IDeviceInfo>", "Either<Device, int> deviceOrId, SystemInfoType type", "token", i)#>
        {
            var deviceId = deviceOrId.GetId();

            switch (type)
            {
                case SystemInfoType.System:
                    return (<#= CallGenericAsyncTokenFunction("GetSystemInfo", "deviceId", "DeviceSystemInfo", "token", i) #>).Cast<IDeviceInfo>().ToList();
                case SystemInfoType.Hardware:
                    return (<#= CallGenericAsyncTokenFunction("GetSystemInfo", "deviceId", "DeviceHardwareInfo", "token", i) #>).Cast<IDeviceInfo>().ToList();
                case SystemInfoType.Software:
                    return (<#= CallGenericAsyncTokenFunction("GetSystemInfo", "deviceId", "DeviceSoftwareInfo", "token", i) #>).Cast<IDeviceInfo>().ToList();
                case SystemInfoType.Processes:
                    return (<#= CallGenericAsyncTokenFunction("GetSystemInfo", "deviceId", "DeviceProcessInfo", "token", i) #>).Cast<IDeviceInfo>().ToList();
                case SystemInfoType.Services:
                    return (<#= CallGenericAsyncTokenFunction("GetSystemInfo", "deviceId", "DeviceServiceInfo", "token", i) #>).Cast<IDeviceInfo>().ToList();
                case SystemInfoType.Users:
                    return (<#= CallGenericAsyncTokenFunction("GetSystemInfo", "deviceId", "DeviceUserInfo", "token", i) #>).Cast<IDeviceInfo>().ToList();
                default:
                    throw new NotImplementedException($"Don't know how to get system info for device info type '{type}'.");
            }
        }

<#
}
#>
        //######################################
        // ParseSystemInfoResponse
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        private <#= GetSignature("ParseSystemInfoResponse", "string", i) #>(HttpResponseMessage response, SysInfoProperty[] columns)
        {
            var responseText = <#= AwaitOrForceResult("response.Content.ReadAsStringAsync()", i) #>

            try
            {
                return SysInfoJsonCleaner.Clean(responseText, columns);
            }
            catch
            {
                Log(responseText, LogLevel.Response);

                throw;
            }
        }

<#
}
#>
        //######################################
        // GetObjectPropertyRawInternal
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        private <#= GetSignatureWithAsyncOnlyToken("GetObjectPropertyRawInternal", "string", "Either<IPrtgObject, int> objectOrId, Enum property", "token", i) #>
        {
            var cache = ObjectPropertyParser.GetPropertyInfoViaTypeLookup(property);
            var rawName = ObjectPropertyParser.GetObjectPropertyNameViaCache(property, cache);

            var rawValue = <#= CallFunctionWithAsyncOnlyToken("GetObjectPropertyRaw", "objectOrId, rawName, cache.Property.PropertyType == typeof(string)", "token", i) #>;

            return rawValue;
        }

<#
}
#>
        //######################################
        // GetObjectPropertyInternal
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        private <#= GetSignatureWithAsyncOnlyToken("GetObjectPropertyInternal", "object", "Either<IPrtgObject, int> objectOrId, Enum property", "token", i) #>
        {
            var rawValue = <#= CallFunctionWithAsyncOnlyToken("GetObjectPropertyRawInternal", "objectOrId, property", "token", i) #>;

            if (property is ObjectProperty)
                return ObjectEngine.XmlEngine.DeserializeObjectProperty((ObjectProperty) property, rawValue);
            else
                return ObjectEngine.XmlEngine.DeserializeObjectProperty((ObjectPropertyInternal) property, rawValue);
        }

<#
}
#>
        //######################################
        // GetProbeApprovalStatus
        //######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignatureWithAsyncOnlyToken("GetProbeApprovalStatus", "bool", "Either<Probe, int> probeOrId", "token", i) #>
        {
            try
            {
                var result = <#= CallFunctionWithAsyncOnlyToken("GetObjectPropertyRawInternal", "probeOrId.GetId(), ObjectPropertyInternal.ProbeApproved", "token", i) #>;

                if (result != "0" && result != "1")
                    throw new PrtgRequestException($"Probe authorization status was '{result}', however should have been '0' or '1'. Object is most likely not a probe.");

                return result == "1";
            }
            catch(PrtgRequestException ex)
            {
                throw new InvalidOperationException($"Cannot change approval status of object with ID '{probeOrId.GetId()}': object does not appear to be a probe.", ex);
            }
        }

<#
}
#>
        //#######################################
        // CreateSetObjectPropertyParameters
        //#######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        private <#= GetSignature("CreateSetObjectPropertyParameters", "SetObjectPropertyParameters", i) #>(int[] objectIds, PropertyParameter[] parameters, CancellationToken token)
        {
            if (parameters == null)
                throw new ArgumentNullException(nameof(parameters), "Parameters cannot be null.");

            if (parameters.Any(p => p == null))
                throw new ArgumentException("Cannot process a null parameter.", nameof(parameters));

            var paramLists = RequestParser.GetSetObjectPropertyParamLists(parameters); //Item1: Normal items. Item2: Mergeable items

            for (var i = 0; i < paramLists.Item1.Length; i++)
            {
                var prop = paramLists.Item1[i];

                var attrib = prop.Property.GetEnumAttribute<TypeAttribute>();

                if (attrib != null)
                {
                    if (attrib.Class == typeof(Location) && !(prop.Value is Location))
                    {
                        var str = Location.GetAddress(prop.Value);

                        var newValue = <#= CallFunctionWithMandatoryTokenWithAsyncTokenOnly("ResolveAddress", "str", "token", i) #>;

                        paramLists.Item1[i] = new PropertyParameter(prop.Property, newValue);
                    }
                }
            }

            parameters = RequestParser.MergeParameters(paramLists);

            var @params = new SetObjectPropertyParameters(objectIds, parameters);

            return @params;
        }

<#
}
#>
        //#######################################
        // SetChannelPropertyInternal
        //#######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("SetChannelPropertyInternal", "void", i)#>(IEnumerable<Channel> channels, int[] sensorIds, int? channelId, ChannelParameter[] parameters, CancellationToken token)
        {
            if (parameters == null)
                throw new ArgumentNullException(nameof(parameters), "Parameters cannot be null.");

            if (parameters.Any(p => p == null))
                throw new ArgumentException("Cannot process a null parameter.", nameof(parameters));

            if (parameters.Length == 0)
                throw new ArgumentException("At least one parameter must be specified.", nameof(parameters));

            var versionClient = GetVersionClient<ChannelParameter, ChannelProperty>(parameters.ToList());

            if (channels != null)
            {
                var channelsList = channels.AsCollection();

                if (channelsList.Any(c => c == null))
                    throw new ArgumentException("Cannot process a null channel.", nameof(channels));

                <#= CallFunction("versionClient.SetChannelProperty", "channelsList, parameters, token", i) #>;
            }
            else
                <#= CallFunction("versionClient.SetChannelProperty", "sensorIds, channelId.Value, parameters, token", i) #>;
        }

<#
}
#>
        //#######################################
        // SetTriggerPropertyInternal
        //#######################################

<#
for(int i = 0; i < 2; i++)
{
#>
        internal <#= GetSignature("SetTriggerPropertyInternal", "void", i)#>(IEnumerable<NotificationTrigger> triggers, TriggerParameter[] parameters, CancellationToken token)
        {
            AssertHasValue(triggers, nameof(triggers));

            var triggersList = triggers.AsCollection();

            if (triggersList.Any(c => c == null))
                throw new ArgumentException("Cannot process a null trigger.", nameof(triggers));

            if (parameters == null)
                throw new ArgumentNullException(nameof(parameters), "Parameters cannot be null.");

            if (parameters.Any(p => p == null))
                throw new ArgumentException("Cannot process a null parameter.", nameof(parameters));

            if (parameters.Length == 0)
                throw new ArgumentException("At least one parameter must be specified.", nameof(parameters));

            foreach (var trigger in triggersList)
            {
                var triggerParameters = TriggerParameters.Create(trigger, parameters);

                <#= CallFunctionWithAsyncOnlyToken("SetNotificationTrigger", "triggerParameters", "token", i) #>;
            }
        }
<#
if (i == 0)
    WriteLine("");
}
#>
    }
}
