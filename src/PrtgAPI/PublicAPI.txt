PrtgAPI.Access => Enum
PrtgAPI.Access.Admin -> Value
PrtgAPI.Access.Full -> Value
PrtgAPI.Access.Inherited -> Value
PrtgAPI.Access.None -> Value
PrtgAPI.Access.Read -> Value
PrtgAPI.Access.Write -> Value
PrtgAPI.Attributes.RequireValueAttribute => Class
PrtgAPI.Attributes.RequireValueAttribute Equals(object obj) -> bool
PrtgAPI.Attributes.RequireValueAttribute GetHashCode() -> int
PrtgAPI.Attributes.RequireValueAttribute GetType() -> Type
PrtgAPI.Attributes.RequireValueAttribute IsDefaultAttribute() -> bool
PrtgAPI.Attributes.RequireValueAttribute Match(object obj) -> bool
PrtgAPI.Attributes.RequireValueAttribute ToString() -> string
PrtgAPI.Attributes.RequireValueAttribute TypeId { get; } -> object
PrtgAPI.Attributes.RequireValueAttribute ValueRequired { get; } -> bool
PrtgAPI.AuthMode => Enum
PrtgAPI.AuthMode.PassHash -> Value
PrtgAPI.AuthMode.Password -> Value
PrtgAPI.AutoDiscoveryMode => Enum
PrtgAPI.AutoDiscoveryMode.Automatic -> Value
PrtgAPI.AutoDiscoveryMode.AutomaticDetailed -> Value
PrtgAPI.AutoDiscoveryMode.AutomaticTemplate -> Value
PrtgAPI.AutoDiscoveryMode.Manual -> Value
PrtgAPI.AutoDiscoverySchedule => Enum
PrtgAPI.AutoDiscoverySchedule.Daily -> Value
PrtgAPI.AutoDiscoverySchedule.Hourly -> Value
PrtgAPI.AutoDiscoverySchedule.Once -> Value
PrtgAPI.AutoDiscoverySchedule.Weekly -> Value
PrtgAPI.AutoMode => Enum
PrtgAPI.AutoMode.Automatic -> Value
PrtgAPI.AutoMode.Manual -> Value
PrtgAPI.BaseType => Enum
PrtgAPI.BaseType.Device -> Value
PrtgAPI.BaseType.Group -> Value
PrtgAPI.BaseType.Probe -> Value
PrtgAPI.BaseType.Sensor -> Value
PrtgAPI.Channel => Class
PrtgAPI.Channel ColorMode { get; set; } -> AutoMode?
PrtgAPI.Channel DecimalMode { get; set; } -> DecimalMode?
PrtgAPI.Channel DecimalPlaces { get; set; } -> double?
PrtgAPI.Channel DisplayLastValue { get; set; } -> string
PrtgAPI.Channel Equals(object obj) -> bool
PrtgAPI.Channel ErrorLimitMessage { get; set; } -> string
PrtgAPI.Channel Factor { get; } -> double?
PrtgAPI.Channel GetHashCode() -> int
PrtgAPI.Channel GetType() -> Type
PrtgAPI.Channel HistoricValueMode { get; set; } -> HistoricValueMode?
PrtgAPI.Channel Id { get; set; } -> int
PrtgAPI.Channel LastValue { get; set; } -> double?
PrtgAPI.Channel LimitsEnabled { get; set; } -> bool?
PrtgAPI.Channel LineColor { get; set; } -> string
PrtgAPI.Channel LineWidth { get; set; } -> int?
PrtgAPI.Channel LowerErrorLimit { get; set; } -> double?
PrtgAPI.Channel LowerWarningLimit { get; set; } -> double?
PrtgAPI.Channel Name { get; set; } -> string
PrtgAPI.Channel PercentMode { get; set; } -> PercentDisplay?
PrtgAPI.Channel PercentValue { get; set; } -> double?
PrtgAPI.Channel ScalingDivision { get; set; } -> double?
PrtgAPI.Channel ScalingMultiplication { get; set; } -> double?
PrtgAPI.Channel SensorId { get; set; } -> int
PrtgAPI.Channel ShowInGraph { get; set; } -> bool?
PrtgAPI.Channel ShowInTable { get; set; } -> bool?
PrtgAPI.Channel SpikeFilterEnabled { get; set; } -> bool?
PrtgAPI.Channel SpikeFilterMax { get; set; } -> double?
PrtgAPI.Channel SpikeFilterMin { get; set; } -> double?
PrtgAPI.Channel ToString() -> string
PrtgAPI.Channel Unit { get; set; } -> string
PrtgAPI.Channel UpperErrorLimit { get; set; } -> double?
PrtgAPI.Channel UpperWarningLimit { get; set; } -> double?
PrtgAPI.Channel ValueLookup { get; } -> string
PrtgAPI.Channel VerticalAxisMax { get; set; } -> double?
PrtgAPI.Channel VerticalAxisMin { get; set; } -> double?
PrtgAPI.Channel VerticalAxisScaling { get; set; } -> AutoMode?
PrtgAPI.Channel WarningLimitMessage { get; set; } -> string
PrtgAPI.ChannelHistoryRecord => Class
PrtgAPI.ChannelHistoryRecord ChannelId { get; set; } -> int
PrtgAPI.ChannelHistoryRecord DateTime { get; set; } -> DateTime
PrtgAPI.ChannelHistoryRecord DisplayValue { get; set; } -> string
PrtgAPI.ChannelHistoryRecord Equals(object obj) -> bool
PrtgAPI.ChannelHistoryRecord GetHashCode() -> int
PrtgAPI.ChannelHistoryRecord GetType() -> Type
PrtgAPI.ChannelHistoryRecord Name { get; set; } -> string
PrtgAPI.ChannelHistoryRecord SensorId { get; set; } -> int
PrtgAPI.ChannelHistoryRecord ToString() -> string
PrtgAPI.ChannelHistoryRecord Value { get; set; } -> double?
PrtgAPI.ChannelProperty => Enum
PrtgAPI.ChannelProperty.ColorMode -> Value
PrtgAPI.ChannelProperty.DecimalMode -> Value
PrtgAPI.ChannelProperty.DecimalPlaces -> Value
PrtgAPI.ChannelProperty.ErrorLimitMessage -> Value
PrtgAPI.ChannelProperty.HistoricValueMode -> Value
PrtgAPI.ChannelProperty.LimitsEnabled -> Value
PrtgAPI.ChannelProperty.LineColor -> Value
PrtgAPI.ChannelProperty.LineWidth -> Value
PrtgAPI.ChannelProperty.LowerErrorLimit -> Value
PrtgAPI.ChannelProperty.LowerWarningLimit -> Value
PrtgAPI.ChannelProperty.Name -> Value
PrtgAPI.ChannelProperty.PercentMode -> Value
PrtgAPI.ChannelProperty.PercentValue -> Value
PrtgAPI.ChannelProperty.ScalingDivision -> Value
PrtgAPI.ChannelProperty.ScalingMultiplication -> Value
PrtgAPI.ChannelProperty.ShowInGraph -> Value
PrtgAPI.ChannelProperty.ShowInTable -> Value
PrtgAPI.ChannelProperty.SpikeFilterEnabled -> Value
PrtgAPI.ChannelProperty.SpikeFilterMax -> Value
PrtgAPI.ChannelProperty.SpikeFilterMin -> Value
PrtgAPI.ChannelProperty.Unit -> Value
PrtgAPI.ChannelProperty.UpperErrorLimit -> Value
PrtgAPI.ChannelProperty.UpperWarningLimit -> Value
PrtgAPI.ChannelProperty.ValueLookup -> Value
PrtgAPI.ChannelProperty.WarningLimitMessage -> Value
PrtgAPI.ClusterNodeType => Enum
PrtgAPI.ClusterNodeType.Failover -> Value
PrtgAPI.ClusterNodeType.Master -> Value
PrtgAPI.ConfigFileType => Enum
PrtgAPI.ConfigFileType.General -> Value
PrtgAPI.ConfigFileType.Lookups -> Value
PrtgAPI.ContainerSettings => Class
PrtgAPI.ContainerSettings Active { get; set; } -> bool
PrtgAPI.ContainerSettings AmazonAccessKey { get; set; } -> string
PrtgAPI.ContainerSettings BandwidthSpeedUnit { get; set; } -> DataUnit?
PrtgAPI.ContainerSettings BandwidthTimeUnit { get; set; } -> TimeUnit?
PrtgAPI.ContainerSettings BandwidthVolumeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.ContainerSettings Coordinates { get; } -> Coordinates
PrtgAPI.ContainerSettings DBAuthMode { get; set; } -> DBAuthMode
PrtgAPI.ContainerSettings DBPort { get; set; } -> int?
PrtgAPI.ContainerSettings DBPortMode { get; set; } -> AutoMode
PrtgAPI.ContainerSettings DBTimeout { get; set; } -> int
PrtgAPI.ContainerSettings DBUserName { get; set; } -> string
PrtgAPI.ContainerSettings DependencyDelay { get; set; } -> int?
PrtgAPI.ContainerSettings DependencyType { get; set; } -> DependencyType?
PrtgAPI.ContainerSettings DependentObjectId { get; set; } -> int?
PrtgAPI.ContainerSettings DiskSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.ContainerSettings Equals(object obj) -> bool
PrtgAPI.ContainerSettings FileSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.ContainerSettings GetHashCode() -> int
PrtgAPI.ContainerSettings GetType() -> Type
PrtgAPI.ContainerSettings HasAmazonSecretKey { get; } -> bool
PrtgAPI.ContainerSettings HasDBPassword { get; } -> bool
PrtgAPI.ContainerSettings HasLinuxPassword { get; } -> bool
PrtgAPI.ContainerSettings HasLinuxPrivateKey { get; } -> bool
PrtgAPI.ContainerSettings HasProxyPassword { get; } -> bool
PrtgAPI.ContainerSettings HasSNMPv3EncryptionKey { get; } -> bool
PrtgAPI.ContainerSettings HasSNMPv3Password { get; } -> bool
PrtgAPI.ContainerSettings HasSSHElevationPassword { get; } -> bool
PrtgAPI.ContainerSettings HasVMwarePassword { get; } -> bool
PrtgAPI.ContainerSettings HasWindowsPassword { get; } -> bool
PrtgAPI.ContainerSettings InheritAmazonCredentials { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritChannelUnit { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritDBCredentials { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritDependency { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritInterval { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritLinuxCredentials { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritLocation { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritProxy { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritSNMPCompatibility { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritSNMPCredentials { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritVMwareCredentials { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritWindowsCompatibility { get; set; } -> bool?
PrtgAPI.ContainerSettings InheritWindowsCredentials { get; set; } -> bool?
PrtgAPI.ContainerSettings Interval { get; } -> ScanningInterval
PrtgAPI.ContainerSettings IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.ContainerSettings LinuxLoginMode { get; set; } -> LinuxLoginMode
PrtgAPI.ContainerSettings LinuxUserName { get; set; } -> string
PrtgAPI.ContainerSettings Location { get; set; } -> string
PrtgAPI.ContainerSettings MaintenanceEnabled { get; set; } -> bool?
PrtgAPI.ContainerSettings MaintenanceEnd { get; } -> DateTime?
PrtgAPI.ContainerSettings MaintenanceStart { get; } -> DateTime?
PrtgAPI.ContainerSettings MemoryUsageUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.ContainerSettings Name { get; set; } -> string
PrtgAPI.ContainerSettings Priority { get; set; } -> Priority?
PrtgAPI.ContainerSettings ProxyAddress { get; set; } -> string
PrtgAPI.ContainerSettings ProxyPort { get; set; } -> int?
PrtgAPI.ContainerSettings ProxyUser { get; set; } -> string
PrtgAPI.ContainerSettings Schedule { get; } -> Schedule
PrtgAPI.ContainerSettings SNMPCommunityStringV1 { get; set; } -> string
PrtgAPI.ContainerSettings SNMPCommunityStringV2 { get; set; } -> string
PrtgAPI.ContainerSettings SNMPCounterMode { get; set; } -> SNMPCounterMode
PrtgAPI.ContainerSettings SNMPDelay { get; set; } -> int
PrtgAPI.ContainerSettings SNMPInterfaceEndIndex { get; set; } -> int
PrtgAPI.ContainerSettings SNMPInterfaceStartIndex { get; set; } -> int
PrtgAPI.ContainerSettings SNMPOverflowMode { get; set; } -> SNMPOverflowMode
PrtgAPI.ContainerSettings SNMPPort { get; set; } -> int
PrtgAPI.ContainerSettings SNMPPortIdMode { get; set; } -> SNMPPortIdentification
PrtgAPI.ContainerSettings SNMPPortNameTemplate { get; set; } -> string
PrtgAPI.ContainerSettings SNMPPortNameUpdateMode { get; set; } -> SNMPPortNameUpdateMode
PrtgAPI.ContainerSettings SNMPRequestMode { get; set; } -> SNMPRequestMode
PrtgAPI.ContainerSettings SNMPRetryMode { get; set; } -> RetryMode
PrtgAPI.ContainerSettings SNMPTimeout { get; set; } -> int
PrtgAPI.ContainerSettings SNMPv3AuthType { get; set; } -> HashType
PrtgAPI.ContainerSettings SNMPv3Context { get; set; } -> string
PrtgAPI.ContainerSettings SNMPv3EncryptionType { get; set; } -> EncryptionType
PrtgAPI.ContainerSettings SNMPv3UserName { get; set; } -> string
PrtgAPI.ContainerSettings SNMPVersion { get; set; } -> SNMPVersion
PrtgAPI.ContainerSettings SNMPZeroValueMode { get; set; } -> SNMPZeroValueMode
PrtgAPI.ContainerSettings SSHElevationMode { get; set; } -> SSHElevationMode
PrtgAPI.ContainerSettings SSHElevationSudoUser { get; set; } -> string
PrtgAPI.ContainerSettings SSHElevationSuUser { get; set; } -> string
PrtgAPI.ContainerSettings SSHEngine { get; set; } -> SSHEngine?
PrtgAPI.ContainerSettings SSHPort { get; set; } -> int
PrtgAPI.ContainerSettings Tags { get; set; } -> string[]
PrtgAPI.ContainerSettings ToString() -> string
PrtgAPI.ContainerSettings VMwareProtocol { get; set; } -> HttpMode
PrtgAPI.ContainerSettings VMwareSessionMode { get; set; } -> VMwareSessionMode?
PrtgAPI.ContainerSettings VMwareUserName { get; set; } -> string
PrtgAPI.ContainerSettings WbemPort { get; set; } -> string
PrtgAPI.ContainerSettings WbemPortMode { get; set; } -> AutoMode
PrtgAPI.ContainerSettings WbemProtocolMode { get; set; } -> HttpMode
PrtgAPI.ContainerSettings WindowsDomain { get; set; } -> string
PrtgAPI.ContainerSettings WindowsUserName { get; set; } -> string
PrtgAPI.ContainerSettings WmiDataSource { get; set; } -> WmiDataSource
PrtgAPI.ContainerSettings WmiTimeout { get; set; } -> string
PrtgAPI.ContainerSettings WmiTimeoutMethod { get; set; } -> WmiTimeoutMethod
PrtgAPI.Content => Enum
PrtgAPI.Content.Channels -> Value
PrtgAPI.Content.Devices -> Value
PrtgAPI.Content.Groups -> Value
PrtgAPI.Content.History -> Value
PrtgAPI.Content.Library -> Value
PrtgAPI.Content.Logs -> Value
PrtgAPI.Content.Map -> Value
PrtgAPI.Content.Notifications -> Value
PrtgAPI.Content.Objects -> Value
PrtgAPI.Content.Probes -> Value
PrtgAPI.Content.Report -> Value
PrtgAPI.Content.Schedules -> Value
PrtgAPI.Content.Sensors -> Value
PrtgAPI.Content.SysInfo -> Value
PrtgAPI.Content.System -> Value
PrtgAPI.Content.Triggers -> Value
PrtgAPI.Content.UnifiedOptions -> Value
PrtgAPI.Content.User -> Value
PrtgAPI.Content.UserGroup -> Value
PrtgAPI.Content.Values -> Value
PrtgAPI.Coordinates => Class
PrtgAPI.Coordinates Equals(object obj) -> bool
PrtgAPI.Coordinates GetHashCode() -> int
PrtgAPI.Coordinates GetType() -> Type
PrtgAPI.Coordinates Latitude { get; set; } -> double
PrtgAPI.Coordinates Longitude { get; set; } -> double
PrtgAPI.Coordinates ToString() -> string
PrtgAPI.CustomValueFormat => Enum
PrtgAPI.CustomValueFormat.NoHtmlEncode -> Value
PrtgAPI.CustomValueFormat.Text -> Value
PrtgAPI.DataUnit => Enum
PrtgAPI.DataUnit.Bit -> Value
PrtgAPI.DataUnit.Byte -> Value
PrtgAPI.DataUnit.Gbit -> Value
PrtgAPI.DataUnit.GByte -> Value
PrtgAPI.DataUnit.Kbit -> Value
PrtgAPI.DataUnit.KByte -> Value
PrtgAPI.DataUnit.Mbit -> Value
PrtgAPI.DataUnit.MByte -> Value
PrtgAPI.DataUnit.Tbit -> Value
PrtgAPI.DataUnit.TByte -> Value
PrtgAPI.DataVolumeUnit => Enum
PrtgAPI.DataVolumeUnit.Byte -> Value
PrtgAPI.DataVolumeUnit.GByte -> Value
PrtgAPI.DataVolumeUnit.KByte -> Value
PrtgAPI.DataVolumeUnit.MByte -> Value
PrtgAPI.DataVolumeUnit.TByte -> Value
PrtgAPI.DBAuthMode => Enum
PrtgAPI.DBAuthMode.SQL -> Value
PrtgAPI.DBAuthMode.Windows -> Value
PrtgAPI.DebugMode => Enum
PrtgAPI.DebugMode.Discard -> Value
PrtgAPI.DebugMode.WriteToDisk -> Value
PrtgAPI.DebugMode.WriteToDiskWhenError -> Value
PrtgAPI.DecimalMode => Enum
PrtgAPI.DecimalMode.All -> Value
PrtgAPI.DecimalMode.Automatic -> Value
PrtgAPI.DecimalMode.Custom -> Value
PrtgAPI.DependencyType => Enum
PrtgAPI.DependencyType.MasterObject -> Value
PrtgAPI.DependencyType.Object -> Value
PrtgAPI.DependencyType.Parent -> Value
PrtgAPI.Device => Class
PrtgAPI.Device Access { get; set; } -> Access
PrtgAPI.Device Active { get; set; } -> bool
PrtgAPI.Device BaseType { get; set; } -> BaseType
PrtgAPI.Device Comments { get; set; } -> string
PrtgAPI.Device Condition { get; set; } -> string
PrtgAPI.Device Dependency { get; set; } -> string
PrtgAPI.Device DisplayType { get; set; } -> string
PrtgAPI.Device DownAcknowledgedSensors { get; set; } -> int
PrtgAPI.Device DownSensors { get; set; } -> int
PrtgAPI.Device Equals(object obj) -> bool
PrtgAPI.Device Favorite { get; set; } -> bool
PrtgAPI.Device GetHashCode() -> int
PrtgAPI.Device GetType() -> Type
PrtgAPI.Device Group { get; set; } -> string
PrtgAPI.Device Host { get; set; } -> string
PrtgAPI.Device Id { get; set; } -> int
PrtgAPI.Device InheritInterval { get; } -> bool
PrtgAPI.Device Interval { get; set; } -> TimeSpan
PrtgAPI.Device Location { get; set; } -> string
PrtgAPI.Device Message { get; set; } -> string
PrtgAPI.Device Name { get; set; } -> string
PrtgAPI.Device NotificationTypes { get; } -> NotificationTypes
PrtgAPI.Device ParentId { get; set; } -> int
PrtgAPI.Device PartialDownSensors { get; set; } -> int
PrtgAPI.Device PausedSensors { get; set; } -> int
PrtgAPI.Device Position { get; set; } -> int
PrtgAPI.Device Priority { get; set; } -> Priority
PrtgAPI.Device Probe { get; set; } -> string
PrtgAPI.Device Schedule { get; set; } -> string
PrtgAPI.Device Status { get; set; } -> Status
PrtgAPI.Device Tags { get; set; } -> string[]
PrtgAPI.Device ToString() -> string
PrtgAPI.Device TotalSensors { get; set; } -> int
PrtgAPI.Device Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.Device UnknownSensors { get; set; } -> int
PrtgAPI.Device UnusualSensors { get; set; } -> int
PrtgAPI.Device UpSensors { get; set; } -> int
PrtgAPI.Device Url { get; set; } -> string
PrtgAPI.Device WarningSensors { get; set; } -> int
PrtgAPI.DeviceHardwareInfo => Class
PrtgAPI.DeviceHardwareInfo Capacity { get; } -> long?
PrtgAPI.DeviceHardwareInfo Caption { get; } -> string
PrtgAPI.DeviceHardwareInfo Class { get; } -> string
PrtgAPI.DeviceHardwareInfo Description { get; } -> string
PrtgAPI.DeviceHardwareInfo DeviceId { get; set; } -> int
PrtgAPI.DeviceHardwareInfo DisplayName { get; } -> string
PrtgAPI.DeviceHardwareInfo Equals(object obj) -> bool
PrtgAPI.DeviceHardwareInfo GetHashCode() -> int
PrtgAPI.DeviceHardwareInfo GetType() -> Type
PrtgAPI.DeviceHardwareInfo LastUpdated { get; } -> DateTime
PrtgAPI.DeviceHardwareInfo Name { get; } -> string
PrtgAPI.DeviceHardwareInfo SerialNumber { get; } -> string
PrtgAPI.DeviceHardwareInfo State { get; } -> string
PrtgAPI.DeviceHardwareInfo ToString() -> string
PrtgAPI.DeviceHardwareInfo Type { get; } -> DeviceInfoType
PrtgAPI.DeviceInfo => Class
PrtgAPI.DeviceInfo DeviceId { get; set; } -> int
PrtgAPI.DeviceInfo DisplayName { get; } -> string
PrtgAPI.DeviceInfo Equals(object obj) -> bool
PrtgAPI.DeviceInfo GetHashCode() -> int
PrtgAPI.DeviceInfo GetType() -> Type
PrtgAPI.DeviceInfo LastUpdated { get; } -> DateTime
PrtgAPI.DeviceInfo Name { get; } -> string
PrtgAPI.DeviceInfo ToString() -> string
PrtgAPI.DeviceInfo Type { get; } -> DeviceInfoType
PrtgAPI.DeviceInfoType => Enum
PrtgAPI.DeviceInfoType.Hardware -> Value
PrtgAPI.DeviceInfoType.Process -> Value
PrtgAPI.DeviceInfoType.Service -> Value
PrtgAPI.DeviceInfoType.Software -> Value
PrtgAPI.DeviceInfoType.System -> Value
PrtgAPI.DeviceInfoType.User -> Value
PrtgAPI.DeviceOrGroupOrProbe => Class
PrtgAPI.DeviceOrGroupOrProbe Access { get; set; } -> Access
PrtgAPI.DeviceOrGroupOrProbe Active { get; set; } -> bool
PrtgAPI.DeviceOrGroupOrProbe BaseType { get; set; } -> BaseType
PrtgAPI.DeviceOrGroupOrProbe Comments { get; set; } -> string
PrtgAPI.DeviceOrGroupOrProbe Dependency { get; set; } -> string
PrtgAPI.DeviceOrGroupOrProbe DisplayType { get; set; } -> string
PrtgAPI.DeviceOrGroupOrProbe DownAcknowledgedSensors { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe DownSensors { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe Equals(object obj) -> bool
PrtgAPI.DeviceOrGroupOrProbe GetHashCode() -> int
PrtgAPI.DeviceOrGroupOrProbe GetType() -> Type
PrtgAPI.DeviceOrGroupOrProbe Id { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe InheritInterval { get; } -> bool
PrtgAPI.DeviceOrGroupOrProbe Interval { get; set; } -> TimeSpan
PrtgAPI.DeviceOrGroupOrProbe Message { get; set; } -> string
PrtgAPI.DeviceOrGroupOrProbe Name { get; set; } -> string
PrtgAPI.DeviceOrGroupOrProbe NotificationTypes { get; } -> NotificationTypes
PrtgAPI.DeviceOrGroupOrProbe ParentId { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe PartialDownSensors { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe PausedSensors { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe Position { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe Priority { get; set; } -> Priority
PrtgAPI.DeviceOrGroupOrProbe Schedule { get; set; } -> string
PrtgAPI.DeviceOrGroupOrProbe Status { get; set; } -> Status
PrtgAPI.DeviceOrGroupOrProbe Tags { get; set; } -> string[]
PrtgAPI.DeviceOrGroupOrProbe ToString() -> string
PrtgAPI.DeviceOrGroupOrProbe TotalSensors { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.DeviceOrGroupOrProbe UnknownSensors { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe UnusualSensors { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe UpSensors { get; set; } -> int
PrtgAPI.DeviceOrGroupOrProbe Url { get; set; } -> string
PrtgAPI.DeviceOrGroupOrProbe WarningSensors { get; set; } -> int
PrtgAPI.DeviceOrGroupSettings => Class
PrtgAPI.DeviceOrGroupSettings Active { get; set; } -> bool
PrtgAPI.DeviceOrGroupSettings AmazonAccessKey { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings AutoDiscoveryMode { get; set; } -> AutoDiscoveryMode?
PrtgAPI.DeviceOrGroupSettings AutoDiscoverySchedule { get; set; } -> AutoDiscoverySchedule?
PrtgAPI.DeviceOrGroupSettings BandwidthSpeedUnit { get; set; } -> DataUnit?
PrtgAPI.DeviceOrGroupSettings BandwidthTimeUnit { get; set; } -> TimeUnit?
PrtgAPI.DeviceOrGroupSettings BandwidthVolumeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.DeviceOrGroupSettings Coordinates { get; } -> Coordinates
PrtgAPI.DeviceOrGroupSettings DBAuthMode { get; set; } -> DBAuthMode
PrtgAPI.DeviceOrGroupSettings DBPort { get; set; } -> int?
PrtgAPI.DeviceOrGroupSettings DBPortMode { get; set; } -> AutoMode
PrtgAPI.DeviceOrGroupSettings DBTimeout { get; set; } -> int
PrtgAPI.DeviceOrGroupSettings DBUserName { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings DependencyDelay { get; set; } -> int?
PrtgAPI.DeviceOrGroupSettings DependencyType { get; set; } -> DependencyType?
PrtgAPI.DeviceOrGroupSettings DependentObjectId { get; set; } -> int?
PrtgAPI.DeviceOrGroupSettings DiskSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.DeviceOrGroupSettings Equals(object obj) -> bool
PrtgAPI.DeviceOrGroupSettings FileSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.DeviceOrGroupSettings GetHashCode() -> int
PrtgAPI.DeviceOrGroupSettings GetType() -> Type
PrtgAPI.DeviceOrGroupSettings HasAmazonSecretKey { get; } -> bool
PrtgAPI.DeviceOrGroupSettings HasDBPassword { get; } -> bool
PrtgAPI.DeviceOrGroupSettings HasLinuxPassword { get; } -> bool
PrtgAPI.DeviceOrGroupSettings HasLinuxPrivateKey { get; } -> bool
PrtgAPI.DeviceOrGroupSettings HasProxyPassword { get; } -> bool
PrtgAPI.DeviceOrGroupSettings HasSNMPv3EncryptionKey { get; } -> bool
PrtgAPI.DeviceOrGroupSettings HasSNMPv3Password { get; } -> bool
PrtgAPI.DeviceOrGroupSettings HasSSHElevationPassword { get; } -> bool
PrtgAPI.DeviceOrGroupSettings HasVMwarePassword { get; } -> bool
PrtgAPI.DeviceOrGroupSettings HasWindowsPassword { get; } -> bool
PrtgAPI.DeviceOrGroupSettings InheritAmazonCredentials { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritChannelUnit { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritDBCredentials { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritDependency { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritInterval { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritLinuxCredentials { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritLocation { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritProxy { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritSNMPCompatibility { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritSNMPCredentials { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritVMwareCredentials { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritWindowsCompatibility { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings InheritWindowsCredentials { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings Interval { get; } -> ScanningInterval
PrtgAPI.DeviceOrGroupSettings IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.DeviceOrGroupSettings LinuxLoginMode { get; set; } -> LinuxLoginMode
PrtgAPI.DeviceOrGroupSettings LinuxUserName { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings Location { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings MaintenanceEnabled { get; set; } -> bool?
PrtgAPI.DeviceOrGroupSettings MaintenanceEnd { get; } -> DateTime?
PrtgAPI.DeviceOrGroupSettings MaintenanceStart { get; } -> DateTime?
PrtgAPI.DeviceOrGroupSettings MemoryUsageUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.DeviceOrGroupSettings Name { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings ParentTags { get; set; } -> string[]
PrtgAPI.DeviceOrGroupSettings Priority { get; set; } -> Priority?
PrtgAPI.DeviceOrGroupSettings ProxyAddress { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings ProxyPort { get; set; } -> int?
PrtgAPI.DeviceOrGroupSettings ProxyUser { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings Schedule { get; } -> Schedule
PrtgAPI.DeviceOrGroupSettings SNMPCommunityStringV1 { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings SNMPCommunityStringV2 { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings SNMPCounterMode { get; set; } -> SNMPCounterMode
PrtgAPI.DeviceOrGroupSettings SNMPDelay { get; set; } -> int
PrtgAPI.DeviceOrGroupSettings SNMPInterfaceEndIndex { get; set; } -> int
PrtgAPI.DeviceOrGroupSettings SNMPInterfaceStartIndex { get; set; } -> int
PrtgAPI.DeviceOrGroupSettings SNMPOverflowMode { get; set; } -> SNMPOverflowMode
PrtgAPI.DeviceOrGroupSettings SNMPPort { get; set; } -> int
PrtgAPI.DeviceOrGroupSettings SNMPPortIdMode { get; set; } -> SNMPPortIdentification
PrtgAPI.DeviceOrGroupSettings SNMPPortNameTemplate { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings SNMPPortNameUpdateMode { get; set; } -> SNMPPortNameUpdateMode
PrtgAPI.DeviceOrGroupSettings SNMPRequestMode { get; set; } -> SNMPRequestMode
PrtgAPI.DeviceOrGroupSettings SNMPRetryMode { get; set; } -> RetryMode
PrtgAPI.DeviceOrGroupSettings SNMPTimeout { get; set; } -> int
PrtgAPI.DeviceOrGroupSettings SNMPv3AuthType { get; set; } -> HashType
PrtgAPI.DeviceOrGroupSettings SNMPv3Context { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings SNMPv3EncryptionType { get; set; } -> EncryptionType
PrtgAPI.DeviceOrGroupSettings SNMPv3UserName { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings SNMPVersion { get; set; } -> SNMPVersion
PrtgAPI.DeviceOrGroupSettings SNMPZeroValueMode { get; set; } -> SNMPZeroValueMode
PrtgAPI.DeviceOrGroupSettings SSHElevationMode { get; set; } -> SSHElevationMode
PrtgAPI.DeviceOrGroupSettings SSHElevationSudoUser { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings SSHElevationSuUser { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings SSHEngine { get; set; } -> SSHEngine?
PrtgAPI.DeviceOrGroupSettings SSHPort { get; set; } -> int
PrtgAPI.DeviceOrGroupSettings Tags { get; set; } -> string[]
PrtgAPI.DeviceOrGroupSettings ToString() -> string
PrtgAPI.DeviceOrGroupSettings VMwareProtocol { get; set; } -> HttpMode
PrtgAPI.DeviceOrGroupSettings VMwareSessionMode { get; set; } -> VMwareSessionMode?
PrtgAPI.DeviceOrGroupSettings VMwareUserName { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings WbemPort { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings WbemPortMode { get; set; } -> AutoMode
PrtgAPI.DeviceOrGroupSettings WbemProtocolMode { get; set; } -> HttpMode
PrtgAPI.DeviceOrGroupSettings WindowsDomain { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings WindowsUserName { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings WmiDataSource { get; set; } -> WmiDataSource
PrtgAPI.DeviceOrGroupSettings WmiTimeout { get; set; } -> string
PrtgAPI.DeviceOrGroupSettings WmiTimeoutMethod { get; set; } -> WmiTimeoutMethod
PrtgAPI.DeviceProcessInfo => Class
PrtgAPI.DeviceProcessInfo Caption { get; } -> string
PrtgAPI.DeviceProcessInfo CreationDate { get; } -> DateTime?
PrtgAPI.DeviceProcessInfo DeviceId { get; set; } -> int
PrtgAPI.DeviceProcessInfo DisplayName { get; } -> string
PrtgAPI.DeviceProcessInfo Equals(object obj) -> bool
PrtgAPI.DeviceProcessInfo GetHashCode() -> int
PrtgAPI.DeviceProcessInfo GetType() -> Type
PrtgAPI.DeviceProcessInfo LastUpdated { get; } -> DateTime
PrtgAPI.DeviceProcessInfo Name { get; } -> string
PrtgAPI.DeviceProcessInfo ProcessId { get; set; } -> int
PrtgAPI.DeviceProcessInfo ToString() -> string
PrtgAPI.DeviceProcessInfo Type { get; } -> DeviceInfoType
PrtgAPI.DeviceServiceInfo => Class
PrtgAPI.DeviceServiceInfo Description { get; } -> string
PrtgAPI.DeviceServiceInfo DeviceId { get; set; } -> int
PrtgAPI.DeviceServiceInfo DisplayName { get; } -> string
PrtgAPI.DeviceServiceInfo Equals(object obj) -> bool
PrtgAPI.DeviceServiceInfo GetHashCode() -> int
PrtgAPI.DeviceServiceInfo GetType() -> Type
PrtgAPI.DeviceServiceInfo LastUpdated { get; } -> DateTime
PrtgAPI.DeviceServiceInfo Name { get; } -> string
PrtgAPI.DeviceServiceInfo StartMode { get; } -> string
PrtgAPI.DeviceServiceInfo State { get; } -> string
PrtgAPI.DeviceServiceInfo ToString() -> string
PrtgAPI.DeviceServiceInfo Type { get; } -> DeviceInfoType
PrtgAPI.DeviceServiceInfo User { get; } -> string
PrtgAPI.DeviceSettings => Class
PrtgAPI.DeviceSettings Active { get; set; } -> bool
PrtgAPI.DeviceSettings AmazonAccessKey { get; set; } -> string
PrtgAPI.DeviceSettings AutoDiscoveryMode { get; set; } -> AutoDiscoveryMode?
PrtgAPI.DeviceSettings AutoDiscoverySchedule { get; set; } -> AutoDiscoverySchedule?
PrtgAPI.DeviceSettings BandwidthSpeedUnit { get; set; } -> DataUnit?
PrtgAPI.DeviceSettings BandwidthTimeUnit { get; set; } -> TimeUnit?
PrtgAPI.DeviceSettings BandwidthVolumeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.DeviceSettings Coordinates { get; } -> Coordinates
PrtgAPI.DeviceSettings DBAuthMode { get; set; } -> DBAuthMode
PrtgAPI.DeviceSettings DBPort { get; set; } -> int?
PrtgAPI.DeviceSettings DBPortMode { get; set; } -> AutoMode
PrtgAPI.DeviceSettings DBTimeout { get; set; } -> int
PrtgAPI.DeviceSettings DBUserName { get; set; } -> string
PrtgAPI.DeviceSettings DependencyDelay { get; set; } -> int?
PrtgAPI.DeviceSettings DependencyType { get; set; } -> DependencyType?
PrtgAPI.DeviceSettings DependentObjectId { get; set; } -> int?
PrtgAPI.DeviceSettings DiskSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.DeviceSettings Equals(object obj) -> bool
PrtgAPI.DeviceSettings FileSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.DeviceSettings GetHashCode() -> int
PrtgAPI.DeviceSettings GetType() -> Type
PrtgAPI.DeviceSettings HasAmazonSecretKey { get; } -> bool
PrtgAPI.DeviceSettings HasDBPassword { get; } -> bool
PrtgAPI.DeviceSettings HasLinuxPassword { get; } -> bool
PrtgAPI.DeviceSettings HasLinuxPrivateKey { get; } -> bool
PrtgAPI.DeviceSettings HasProxyPassword { get; } -> bool
PrtgAPI.DeviceSettings HasSNMPv3EncryptionKey { get; } -> bool
PrtgAPI.DeviceSettings HasSNMPv3Password { get; } -> bool
PrtgAPI.DeviceSettings HasSSHElevationPassword { get; } -> bool
PrtgAPI.DeviceSettings HasVMwarePassword { get; } -> bool
PrtgAPI.DeviceSettings HasWindowsPassword { get; } -> bool
PrtgAPI.DeviceSettings Host { get; } -> string
PrtgAPI.DeviceSettings Hostv4 { get; set; } -> string
PrtgAPI.DeviceSettings Hostv6 { get; set; } -> string
PrtgAPI.DeviceSettings InheritAmazonCredentials { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritChannelUnit { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritDBCredentials { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritDependency { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritInterval { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritLinuxCredentials { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritLocation { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritProxy { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritSNMPCompatibility { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritSNMPCredentials { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritVMwareCredentials { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritWindowsCompatibility { get; set; } -> bool?
PrtgAPI.DeviceSettings InheritWindowsCredentials { get; set; } -> bool?
PrtgAPI.DeviceSettings Interval { get; } -> ScanningInterval
PrtgAPI.DeviceSettings IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.DeviceSettings IPVersion { get; set; } -> IPVersion
PrtgAPI.DeviceSettings LinuxLoginMode { get; set; } -> LinuxLoginMode
PrtgAPI.DeviceSettings LinuxUserName { get; set; } -> string
PrtgAPI.DeviceSettings Location { get; set; } -> string
PrtgAPI.DeviceSettings MaintenanceEnabled { get; set; } -> bool?
PrtgAPI.DeviceSettings MaintenanceEnd { get; } -> DateTime?
PrtgAPI.DeviceSettings MaintenanceStart { get; } -> DateTime?
PrtgAPI.DeviceSettings MemoryUsageUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.DeviceSettings Name { get; set; } -> string
PrtgAPI.DeviceSettings ParentTags { get; set; } -> string[]
PrtgAPI.DeviceSettings Priority { get; set; } -> Priority?
PrtgAPI.DeviceSettings ProxyAddress { get; set; } -> string
PrtgAPI.DeviceSettings ProxyPort { get; set; } -> int?
PrtgAPI.DeviceSettings ProxyUser { get; set; } -> string
PrtgAPI.DeviceSettings Schedule { get; } -> Schedule
PrtgAPI.DeviceSettings ServiceUrl { get; set; } -> string
PrtgAPI.DeviceSettings SNMPCommunityStringV1 { get; set; } -> string
PrtgAPI.DeviceSettings SNMPCommunityStringV2 { get; set; } -> string
PrtgAPI.DeviceSettings SNMPCounterMode { get; set; } -> SNMPCounterMode
PrtgAPI.DeviceSettings SNMPDelay { get; set; } -> int
PrtgAPI.DeviceSettings SNMPInterfaceEndIndex { get; set; } -> int
PrtgAPI.DeviceSettings SNMPInterfaceStartIndex { get; set; } -> int
PrtgAPI.DeviceSettings SNMPOverflowMode { get; set; } -> SNMPOverflowMode
PrtgAPI.DeviceSettings SNMPPort { get; set; } -> int
PrtgAPI.DeviceSettings SNMPPortIdMode { get; set; } -> SNMPPortIdentification
PrtgAPI.DeviceSettings SNMPPortNameTemplate { get; set; } -> string
PrtgAPI.DeviceSettings SNMPPortNameUpdateMode { get; set; } -> SNMPPortNameUpdateMode
PrtgAPI.DeviceSettings SNMPRequestMode { get; set; } -> SNMPRequestMode
PrtgAPI.DeviceSettings SNMPRetryMode { get; set; } -> RetryMode
PrtgAPI.DeviceSettings SNMPTimeout { get; set; } -> int
PrtgAPI.DeviceSettings SNMPv3AuthType { get; set; } -> HashType
PrtgAPI.DeviceSettings SNMPv3Context { get; set; } -> string
PrtgAPI.DeviceSettings SNMPv3EncryptionType { get; set; } -> EncryptionType
PrtgAPI.DeviceSettings SNMPv3UserName { get; set; } -> string
PrtgAPI.DeviceSettings SNMPVersion { get; set; } -> SNMPVersion
PrtgAPI.DeviceSettings SNMPZeroValueMode { get; set; } -> SNMPZeroValueMode
PrtgAPI.DeviceSettings SSHElevationMode { get; set; } -> SSHElevationMode
PrtgAPI.DeviceSettings SSHElevationSudoUser { get; set; } -> string
PrtgAPI.DeviceSettings SSHElevationSuUser { get; set; } -> string
PrtgAPI.DeviceSettings SSHEngine { get; set; } -> SSHEngine?
PrtgAPI.DeviceSettings SSHPort { get; set; } -> int
PrtgAPI.DeviceSettings Tags { get; set; } -> string[]
PrtgAPI.DeviceSettings ToString() -> string
PrtgAPI.DeviceSettings VMwareProtocol { get; set; } -> HttpMode
PrtgAPI.DeviceSettings VMwareSessionMode { get; set; } -> VMwareSessionMode?
PrtgAPI.DeviceSettings VMwareUserName { get; set; } -> string
PrtgAPI.DeviceSettings WbemPort { get; set; } -> string
PrtgAPI.DeviceSettings WbemPortMode { get; set; } -> AutoMode
PrtgAPI.DeviceSettings WbemProtocolMode { get; set; } -> HttpMode
PrtgAPI.DeviceSettings WindowsDomain { get; set; } -> string
PrtgAPI.DeviceSettings WindowsUserName { get; set; } -> string
PrtgAPI.DeviceSettings WmiDataSource { get; set; } -> WmiDataSource
PrtgAPI.DeviceSettings WmiTimeout { get; set; } -> string
PrtgAPI.DeviceSettings WmiTimeoutMethod { get; set; } -> WmiTimeoutMethod
PrtgAPI.DeviceSoftwareInfo => Class
PrtgAPI.DeviceSoftwareInfo DeviceId { get; set; } -> int
PrtgAPI.DeviceSoftwareInfo DisplayName { get; } -> string
PrtgAPI.DeviceSoftwareInfo Equals(object obj) -> bool
PrtgAPI.DeviceSoftwareInfo GetHashCode() -> int
PrtgAPI.DeviceSoftwareInfo GetType() -> Type
PrtgAPI.DeviceSoftwareInfo InstallDate { get; } -> DateTime?
PrtgAPI.DeviceSoftwareInfo LastUpdated { get; } -> DateTime
PrtgAPI.DeviceSoftwareInfo Name { get; } -> string
PrtgAPI.DeviceSoftwareInfo Size { get; } -> int?
PrtgAPI.DeviceSoftwareInfo ToString() -> string
PrtgAPI.DeviceSoftwareInfo Type { get; } -> DeviceInfoType
PrtgAPI.DeviceSoftwareInfo Vendor { get; } -> string
PrtgAPI.DeviceSoftwareInfo Version { get; } -> Version
PrtgAPI.DeviceSystemInfo => Class
PrtgAPI.DeviceSystemInfo Adapter { get; } -> string
PrtgAPI.DeviceSystemInfo DeviceId { get; set; } -> int
PrtgAPI.DeviceSystemInfo DisplayName { get; } -> string
PrtgAPI.DeviceSystemInfo Equals(object obj) -> bool
PrtgAPI.DeviceSystemInfo GetHashCode() -> int
PrtgAPI.DeviceSystemInfo GetType() -> Type
PrtgAPI.DeviceSystemInfo Id { get; } -> int?
PrtgAPI.DeviceSystemInfo LastUpdated { get; } -> DateTime
PrtgAPI.DeviceSystemInfo Name { get; } -> string
PrtgAPI.DeviceSystemInfo Property { get; } -> string
PrtgAPI.DeviceSystemInfo ToString() -> string
PrtgAPI.DeviceSystemInfo Type { get; } -> DeviceInfoType
PrtgAPI.DeviceSystemInfo Value { get; } -> string
PrtgAPI.DeviceTemplate => Class
PrtgAPI.DeviceTemplate Equals(DeviceTemplate other) -> bool
PrtgAPI.DeviceTemplate Equals(object other) -> bool
PrtgAPI.DeviceTemplate GetHashCode() -> int
PrtgAPI.DeviceTemplate GetType() -> Type
PrtgAPI.DeviceTemplate Name { get; } -> string
PrtgAPI.DeviceTemplate ToString() -> string
PrtgAPI.DeviceTemplate Value { get; } -> string
PrtgAPI.DeviceUserInfo => Class
PrtgAPI.DeviceUserInfo DeviceId { get; set; } -> int
PrtgAPI.DeviceUserInfo DisplayName { get; } -> string
PrtgAPI.DeviceUserInfo Domain { get; } -> string
PrtgAPI.DeviceUserInfo Equals(object obj) -> bool
PrtgAPI.DeviceUserInfo GetHashCode() -> int
PrtgAPI.DeviceUserInfo GetType() -> Type
PrtgAPI.DeviceUserInfo LastUpdated { get; } -> DateTime
PrtgAPI.DeviceUserInfo Name { get; } -> string
PrtgAPI.DeviceUserInfo ToString() -> string
PrtgAPI.DeviceUserInfo Type { get; } -> DeviceInfoType
PrtgAPI.DeviceUserInfo User { get; } -> string
PrtgAPI.Either<TLeft,TRight> => Struct
PrtgAPI.Either<TLeft,TRight> Equals(object obj) -> bool
PrtgAPI.Either<TLeft,TRight> GetHashCode() -> int
PrtgAPI.Either<TLeft,TRight> GetType() -> Type
PrtgAPI.Either<TLeft,TRight> IsLeft { get; } -> bool
PrtgAPI.Either<TLeft,TRight> Left { get; } -> TLeft
PrtgAPI.Either<TLeft,TRight> op_Implicit(TLeft value) -> Either<TLeft,TRight>
PrtgAPI.Either<TLeft,TRight> op_Implicit(TRight value) -> Either<TLeft,TRight>
PrtgAPI.Either<TLeft,TRight> Right { get; } -> TRight
PrtgAPI.Either<TLeft,TRight> ToString() -> string
PrtgAPI.EmailContentType => Enum
PrtgAPI.EmailContentType.Custom -> Value
PrtgAPI.EmailContentType.HTML -> Value
PrtgAPI.EmailContentType.Text -> Value
PrtgAPI.EmailPriority => Enum
PrtgAPI.EmailPriority.High -> Value
PrtgAPI.EmailPriority.Highest -> Value
PrtgAPI.EmailPriority.Low -> Value
PrtgAPI.EmailPriority.Lowest -> Value
PrtgAPI.EmailPriority.Normal -> Value
PrtgAPI.EncryptionType => Enum
PrtgAPI.EncryptionType.AES -> Value
PrtgAPI.EncryptionType.DES -> Value
PrtgAPI.EventLog => Enum
PrtgAPI.EventLog.Application -> Value
PrtgAPI.EventLog.PrtgNetworkMonitor -> Value
PrtgAPI.EventLogType => Enum
PrtgAPI.EventLogType.Error -> Value
PrtgAPI.EventLogType.Information -> Value
PrtgAPI.EventLogType.Warning -> Value
PrtgAPI.Exceptions.Internal.MissingAttributeException => Class
PrtgAPI.Exceptions.Internal.MissingAttributeException Data { get; } -> IDictionary
PrtgAPI.Exceptions.Internal.MissingAttributeException Equals(object obj) -> bool
PrtgAPI.Exceptions.Internal.MissingAttributeException GetBaseException() -> Exception
PrtgAPI.Exceptions.Internal.MissingAttributeException GetHashCode() -> int
PrtgAPI.Exceptions.Internal.MissingAttributeException GetObjectData(SerializationInfo info, StreamingContext context) -> void
PrtgAPI.Exceptions.Internal.MissingAttributeException GetType() -> Type
PrtgAPI.Exceptions.Internal.MissingAttributeException GetType() -> Type
PrtgAPI.Exceptions.Internal.MissingAttributeException HelpLink { get; set; } -> string
PrtgAPI.Exceptions.Internal.MissingAttributeException HResult { get; } -> int
PrtgAPI.Exceptions.Internal.MissingAttributeException InnerException { get; } -> Exception
PrtgAPI.Exceptions.Internal.MissingAttributeException Message { get; } -> string
PrtgAPI.Exceptions.Internal.MissingAttributeException Source { get; set; } -> string
PrtgAPI.Exceptions.Internal.MissingAttributeException StackTrace { get; } -> string
PrtgAPI.Exceptions.Internal.MissingAttributeException TargetSite { get; } -> MethodBase
PrtgAPI.Exceptions.Internal.MissingAttributeException ToString() -> string
PrtgAPI.Exceptions.Internal.MissingParameterTypeException => Class
PrtgAPI.Exceptions.Internal.MissingParameterTypeException Data { get; } -> IDictionary
PrtgAPI.Exceptions.Internal.MissingParameterTypeException Equals(object obj) -> bool
PrtgAPI.Exceptions.Internal.MissingParameterTypeException GetBaseException() -> Exception
PrtgAPI.Exceptions.Internal.MissingParameterTypeException GetHashCode() -> int
PrtgAPI.Exceptions.Internal.MissingParameterTypeException GetObjectData(SerializationInfo info, StreamingContext context) -> void
PrtgAPI.Exceptions.Internal.MissingParameterTypeException GetType() -> Type
PrtgAPI.Exceptions.Internal.MissingParameterTypeException GetType() -> Type
PrtgAPI.Exceptions.Internal.MissingParameterTypeException HelpLink { get; set; } -> string
PrtgAPI.Exceptions.Internal.MissingParameterTypeException HResult { get; } -> int
PrtgAPI.Exceptions.Internal.MissingParameterTypeException InnerException { get; } -> Exception
PrtgAPI.Exceptions.Internal.MissingParameterTypeException Message { get; } -> string
PrtgAPI.Exceptions.Internal.MissingParameterTypeException Source { get; set; } -> string
PrtgAPI.Exceptions.Internal.MissingParameterTypeException StackTrace { get; } -> string
PrtgAPI.Exceptions.Internal.MissingParameterTypeException TargetSite { get; } -> MethodBase
PrtgAPI.Exceptions.Internal.MissingParameterTypeException ToString() -> string
PrtgAPI.ExeType => Enum
PrtgAPI.ExeType.Application -> Value
PrtgAPI.ExeType.Script -> Value
PrtgAPI.FactoryErrorMode => Enum
PrtgAPI.FactoryErrorMode.CustomFormula -> Value
PrtgAPI.FactoryErrorMode.ErrorOnError -> Value
PrtgAPI.FactoryErrorMode.WarnOnError -> Value
PrtgAPI.FactoryMissingDataMode => Enum
PrtgAPI.FactoryMissingDataMode.CalculateWithZero -> Value
PrtgAPI.FactoryMissingDataMode.DontCalculate -> Value
PrtgAPI.FilterMode => Enum
PrtgAPI.FilterMode.Illegal -> Value
PrtgAPI.FilterMode.Normal -> Value
PrtgAPI.FilterMode.Raw -> Value
PrtgAPI.FilterOperator => Enum
PrtgAPI.FilterOperator.Contains -> Value
PrtgAPI.FilterOperator.Equals -> Value
PrtgAPI.FilterOperator.GreaterThan -> Value
PrtgAPI.FilterOperator.LessThan -> Value
PrtgAPI.FilterOperator.NotEquals -> Value
PrtgAPI.FlagEnum => Class
PrtgAPI.FlagEnum Create<T>(IEnumerable<T> value) -> FlagEnum<T>
PrtgAPI.FlagEnum Create<T>(IList<T> value) -> FlagEnum<T>
PrtgAPI.FlagEnum Create<T>(IReadOnlyCollection<T> value) -> FlagEnum<T>
PrtgAPI.FlagEnum Create<T>(IReadOnlyList<T> value) -> FlagEnum<T>
PrtgAPI.FlagEnum Create<T>(List<T> value) -> FlagEnum<T>
PrtgAPI.FlagEnum Create<T>(params T[] value) -> FlagEnum<T>
PrtgAPI.FlagEnum Create<T>(ReadOnlyCollection<T> value) -> FlagEnum<T>
PrtgAPI.FlagEnum Create<T>(T value) -> FlagEnum<T>
PrtgAPI.FlagEnum Equals(object obj) -> bool
PrtgAPI.FlagEnum GetHashCode() -> int
PrtgAPI.FlagEnum GetType() -> Type
PrtgAPI.FlagEnum ToString() -> string
PrtgAPI.FlagEnum<T> => Struct
PrtgAPI.FlagEnum<T> Contains(T value) -> bool
PrtgAPI.FlagEnum<T> Equals(object obj) -> bool
PrtgAPI.FlagEnum<T> Equals(T other) -> bool
PrtgAPI.FlagEnum<T> GetHashCode() -> int
PrtgAPI.FlagEnum<T> GetType() -> Type
PrtgAPI.FlagEnum<T> GetValues() -> IReadOnlyList<T>
PrtgAPI.FlagEnum<T> op_BitwiseAnd(FlagEnum<T> left, FlagEnum<T> right) -> FlagEnum<T>
PrtgAPI.FlagEnum<T> op_BitwiseOr(FlagEnum<T> left, FlagEnum<T> right) -> FlagEnum<T>
PrtgAPI.FlagEnum<T> op_Implicit(FlagEnum<T> value) -> T
PrtgAPI.FlagEnum<T> op_Implicit(T value) -> FlagEnum<T>
PrtgAPI.FlagEnum<T> op_Implicit(T[] values) -> FlagEnum<T>
PrtgAPI.FlagEnum<T> op_OnesComplement(FlagEnum<T> value) -> FlagEnum<T>
PrtgAPI.FlagEnum<T> ToString() -> string
PrtgAPI.FlagEnum<T> Value { get; } -> T
PrtgAPI.GraphType => Enum
PrtgAPI.GraphType.Independent -> Value
PrtgAPI.GraphType.Stacked -> Value
PrtgAPI.Group => Class
PrtgAPI.Group Access { get; set; } -> Access
PrtgAPI.Group Active { get; set; } -> bool
PrtgAPI.Group BaseType { get; set; } -> BaseType
PrtgAPI.Group Collapsed { get; set; } -> bool
PrtgAPI.Group Comments { get; set; } -> string
PrtgAPI.Group Condition { get; set; } -> string
PrtgAPI.Group Dependency { get; set; } -> string
PrtgAPI.Group DisplayType { get; set; } -> string
PrtgAPI.Group DownAcknowledgedSensors { get; set; } -> int
PrtgAPI.Group DownSensors { get; set; } -> int
PrtgAPI.Group Equals(object obj) -> bool
PrtgAPI.Group GetHashCode() -> int
PrtgAPI.Group GetType() -> Type
PrtgAPI.Group Id { get; set; } -> int
PrtgAPI.Group InheritInterval { get; } -> bool
PrtgAPI.Group Interval { get; set; } -> TimeSpan
PrtgAPI.Group Message { get; set; } -> string
PrtgAPI.Group Name { get; set; } -> string
PrtgAPI.Group NotificationTypes { get; } -> NotificationTypes
PrtgAPI.Group ParentId { get; set; } -> int
PrtgAPI.Group PartialDownSensors { get; set; } -> int
PrtgAPI.Group PausedSensors { get; set; } -> int
PrtgAPI.Group Position { get; set; } -> int
PrtgAPI.Group Priority { get; set; } -> Priority
PrtgAPI.Group Probe { get; set; } -> string
PrtgAPI.Group Schedule { get; set; } -> string
PrtgAPI.Group Status { get; set; } -> Status
PrtgAPI.Group Tags { get; set; } -> string[]
PrtgAPI.Group ToString() -> string
PrtgAPI.Group TotalDevices { get; set; } -> int
PrtgAPI.Group TotalGroups { get; set; } -> int
PrtgAPI.Group TotalSensors { get; set; } -> int
PrtgAPI.Group Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.Group UnknownSensors { get; set; } -> int
PrtgAPI.Group UnusualSensors { get; set; } -> int
PrtgAPI.Group UpSensors { get; set; } -> int
PrtgAPI.Group Url { get; set; } -> string
PrtgAPI.Group WarningSensors { get; set; } -> int
PrtgAPI.GroupOrProbe => Class
PrtgAPI.GroupOrProbe Access { get; set; } -> Access
PrtgAPI.GroupOrProbe Active { get; set; } -> bool
PrtgAPI.GroupOrProbe BaseType { get; set; } -> BaseType
PrtgAPI.GroupOrProbe Collapsed { get; set; } -> bool
PrtgAPI.GroupOrProbe Comments { get; set; } -> string
PrtgAPI.GroupOrProbe Dependency { get; set; } -> string
PrtgAPI.GroupOrProbe DisplayType { get; set; } -> string
PrtgAPI.GroupOrProbe DownAcknowledgedSensors { get; set; } -> int
PrtgAPI.GroupOrProbe DownSensors { get; set; } -> int
PrtgAPI.GroupOrProbe Equals(object obj) -> bool
PrtgAPI.GroupOrProbe GetHashCode() -> int
PrtgAPI.GroupOrProbe GetType() -> Type
PrtgAPI.GroupOrProbe Id { get; set; } -> int
PrtgAPI.GroupOrProbe InheritInterval { get; } -> bool
PrtgAPI.GroupOrProbe Interval { get; set; } -> TimeSpan
PrtgAPI.GroupOrProbe Message { get; set; } -> string
PrtgAPI.GroupOrProbe Name { get; set; } -> string
PrtgAPI.GroupOrProbe NotificationTypes { get; } -> NotificationTypes
PrtgAPI.GroupOrProbe ParentId { get; set; } -> int
PrtgAPI.GroupOrProbe PartialDownSensors { get; set; } -> int
PrtgAPI.GroupOrProbe PausedSensors { get; set; } -> int
PrtgAPI.GroupOrProbe Position { get; set; } -> int
PrtgAPI.GroupOrProbe Priority { get; set; } -> Priority
PrtgAPI.GroupOrProbe Schedule { get; set; } -> string
PrtgAPI.GroupOrProbe Status { get; set; } -> Status
PrtgAPI.GroupOrProbe Tags { get; set; } -> string[]
PrtgAPI.GroupOrProbe ToString() -> string
PrtgAPI.GroupOrProbe TotalDevices { get; set; } -> int
PrtgAPI.GroupOrProbe TotalGroups { get; set; } -> int
PrtgAPI.GroupOrProbe TotalSensors { get; set; } -> int
PrtgAPI.GroupOrProbe Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.GroupOrProbe UnknownSensors { get; set; } -> int
PrtgAPI.GroupOrProbe UnusualSensors { get; set; } -> int
PrtgAPI.GroupOrProbe UpSensors { get; set; } -> int
PrtgAPI.GroupOrProbe Url { get; set; } -> string
PrtgAPI.GroupOrProbe WarningSensors { get; set; } -> int
PrtgAPI.GroupSettings => Class
PrtgAPI.GroupSettings Active { get; set; } -> bool
PrtgAPI.GroupSettings AmazonAccessKey { get; set; } -> string
PrtgAPI.GroupSettings AutoDiscoveryMode { get; set; } -> AutoDiscoveryMode?
PrtgAPI.GroupSettings AutoDiscoverySchedule { get; set; } -> AutoDiscoverySchedule?
PrtgAPI.GroupSettings BandwidthSpeedUnit { get; set; } -> DataUnit?
PrtgAPI.GroupSettings BandwidthTimeUnit { get; set; } -> TimeUnit?
PrtgAPI.GroupSettings BandwidthVolumeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.GroupSettings Coordinates { get; } -> Coordinates
PrtgAPI.GroupSettings DBAuthMode { get; set; } -> DBAuthMode
PrtgAPI.GroupSettings DBPort { get; set; } -> int?
PrtgAPI.GroupSettings DBPortMode { get; set; } -> AutoMode
PrtgAPI.GroupSettings DBTimeout { get; set; } -> int
PrtgAPI.GroupSettings DBUserName { get; set; } -> string
PrtgAPI.GroupSettings DependencyDelay { get; set; } -> int?
PrtgAPI.GroupSettings DependencyType { get; set; } -> DependencyType?
PrtgAPI.GroupSettings DependentObjectId { get; set; } -> int?
PrtgAPI.GroupSettings DiskSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.GroupSettings Equals(object obj) -> bool
PrtgAPI.GroupSettings FileSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.GroupSettings GetHashCode() -> int
PrtgAPI.GroupSettings GetType() -> Type
PrtgAPI.GroupSettings HasAmazonSecretKey { get; } -> bool
PrtgAPI.GroupSettings HasDBPassword { get; } -> bool
PrtgAPI.GroupSettings HasLinuxPassword { get; } -> bool
PrtgAPI.GroupSettings HasLinuxPrivateKey { get; } -> bool
PrtgAPI.GroupSettings HasProxyPassword { get; } -> bool
PrtgAPI.GroupSettings HasSNMPv3EncryptionKey { get; } -> bool
PrtgAPI.GroupSettings HasSNMPv3Password { get; } -> bool
PrtgAPI.GroupSettings HasSSHElevationPassword { get; } -> bool
PrtgAPI.GroupSettings HasVMwarePassword { get; } -> bool
PrtgAPI.GroupSettings HasWindowsPassword { get; } -> bool
PrtgAPI.GroupSettings InheritAmazonCredentials { get; set; } -> bool?
PrtgAPI.GroupSettings InheritChannelUnit { get; set; } -> bool?
PrtgAPI.GroupSettings InheritDBCredentials { get; set; } -> bool?
PrtgAPI.GroupSettings InheritDependency { get; set; } -> bool?
PrtgAPI.GroupSettings InheritInterval { get; set; } -> bool?
PrtgAPI.GroupSettings InheritLinuxCredentials { get; set; } -> bool?
PrtgAPI.GroupSettings InheritLocation { get; set; } -> bool?
PrtgAPI.GroupSettings InheritProxy { get; set; } -> bool?
PrtgAPI.GroupSettings InheritSNMPCompatibility { get; set; } -> bool?
PrtgAPI.GroupSettings InheritSNMPCredentials { get; set; } -> bool?
PrtgAPI.GroupSettings InheritVMwareCredentials { get; set; } -> bool?
PrtgAPI.GroupSettings InheritWindowsCompatibility { get; set; } -> bool?
PrtgAPI.GroupSettings InheritWindowsCredentials { get; set; } -> bool?
PrtgAPI.GroupSettings Interval { get; } -> ScanningInterval
PrtgAPI.GroupSettings IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.GroupSettings LinuxLoginMode { get; set; } -> LinuxLoginMode
PrtgAPI.GroupSettings LinuxUserName { get; set; } -> string
PrtgAPI.GroupSettings Location { get; set; } -> string
PrtgAPI.GroupSettings MaintenanceEnabled { get; set; } -> bool?
PrtgAPI.GroupSettings MaintenanceEnd { get; } -> DateTime?
PrtgAPI.GroupSettings MaintenanceStart { get; } -> DateTime?
PrtgAPI.GroupSettings MemoryUsageUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.GroupSettings Name { get; set; } -> string
PrtgAPI.GroupSettings ParentTags { get; set; } -> string[]
PrtgAPI.GroupSettings Priority { get; set; } -> Priority?
PrtgAPI.GroupSettings ProxyAddress { get; set; } -> string
PrtgAPI.GroupSettings ProxyPort { get; set; } -> int?
PrtgAPI.GroupSettings ProxyUser { get; set; } -> string
PrtgAPI.GroupSettings Schedule { get; } -> Schedule
PrtgAPI.GroupSettings SNMPCommunityStringV1 { get; set; } -> string
PrtgAPI.GroupSettings SNMPCommunityStringV2 { get; set; } -> string
PrtgAPI.GroupSettings SNMPCounterMode { get; set; } -> SNMPCounterMode
PrtgAPI.GroupSettings SNMPDelay { get; set; } -> int
PrtgAPI.GroupSettings SNMPInterfaceEndIndex { get; set; } -> int
PrtgAPI.GroupSettings SNMPInterfaceStartIndex { get; set; } -> int
PrtgAPI.GroupSettings SNMPOverflowMode { get; set; } -> SNMPOverflowMode
PrtgAPI.GroupSettings SNMPPort { get; set; } -> int
PrtgAPI.GroupSettings SNMPPortIdMode { get; set; } -> SNMPPortIdentification
PrtgAPI.GroupSettings SNMPPortNameTemplate { get; set; } -> string
PrtgAPI.GroupSettings SNMPPortNameUpdateMode { get; set; } -> SNMPPortNameUpdateMode
PrtgAPI.GroupSettings SNMPRequestMode { get; set; } -> SNMPRequestMode
PrtgAPI.GroupSettings SNMPRetryMode { get; set; } -> RetryMode
PrtgAPI.GroupSettings SNMPTimeout { get; set; } -> int
PrtgAPI.GroupSettings SNMPv3AuthType { get; set; } -> HashType
PrtgAPI.GroupSettings SNMPv3Context { get; set; } -> string
PrtgAPI.GroupSettings SNMPv3EncryptionType { get; set; } -> EncryptionType
PrtgAPI.GroupSettings SNMPv3UserName { get; set; } -> string
PrtgAPI.GroupSettings SNMPVersion { get; set; } -> SNMPVersion
PrtgAPI.GroupSettings SNMPZeroValueMode { get; set; } -> SNMPZeroValueMode
PrtgAPI.GroupSettings SSHElevationMode { get; set; } -> SSHElevationMode
PrtgAPI.GroupSettings SSHElevationSudoUser { get; set; } -> string
PrtgAPI.GroupSettings SSHElevationSuUser { get; set; } -> string
PrtgAPI.GroupSettings SSHEngine { get; set; } -> SSHEngine?
PrtgAPI.GroupSettings SSHPort { get; set; } -> int
PrtgAPI.GroupSettings Tags { get; set; } -> string[]
PrtgAPI.GroupSettings ToString() -> string
PrtgAPI.GroupSettings VMwareProtocol { get; set; } -> HttpMode
PrtgAPI.GroupSettings VMwareSessionMode { get; set; } -> VMwareSessionMode?
PrtgAPI.GroupSettings VMwareUserName { get; set; } -> string
PrtgAPI.GroupSettings WbemPort { get; set; } -> string
PrtgAPI.GroupSettings WbemPortMode { get; set; } -> AutoMode
PrtgAPI.GroupSettings WbemProtocolMode { get; set; } -> HttpMode
PrtgAPI.GroupSettings WindowsDomain { get; set; } -> string
PrtgAPI.GroupSettings WindowsUserName { get; set; } -> string
PrtgAPI.GroupSettings WmiDataSource { get; set; } -> WmiDataSource
PrtgAPI.GroupSettings WmiTimeout { get; set; } -> string
PrtgAPI.GroupSettings WmiTimeoutMethod { get; set; } -> WmiTimeoutMethod
PrtgAPI.HashType => Enum
PrtgAPI.HashType.MD5 -> Value
PrtgAPI.HashType.SHA -> Value
PrtgAPI.HistoricValueMode => Enum
PrtgAPI.HistoricValueMode.Average -> Value
PrtgAPI.HistoricValueMode.Maximum -> Value
PrtgAPI.HistoricValueMode.Minimum -> Value
PrtgAPI.HttpDeserializationException => Class
PrtgAPI.HttpDeserializationException Data { get; } -> IDictionary
PrtgAPI.HttpDeserializationException Equals(object obj) -> bool
PrtgAPI.HttpDeserializationException GetBaseException() -> Exception
PrtgAPI.HttpDeserializationException GetHashCode() -> int
PrtgAPI.HttpDeserializationException GetObjectData(SerializationInfo info, StreamingContext context) -> void
PrtgAPI.HttpDeserializationException GetType() -> Type
PrtgAPI.HttpDeserializationException GetType() -> Type
PrtgAPI.HttpDeserializationException HelpLink { get; set; } -> string
PrtgAPI.HttpDeserializationException HResult { get; } -> int
PrtgAPI.HttpDeserializationException InnerException { get; } -> Exception
PrtgAPI.HttpDeserializationException Message { get; } -> string
PrtgAPI.HttpDeserializationException Source { get; set; } -> string
PrtgAPI.HttpDeserializationException StackTrace { get; } -> string
PrtgAPI.HttpDeserializationException TargetSite { get; } -> MethodBase
PrtgAPI.HttpDeserializationException ToString() -> string
PrtgAPI.HttpMode => Enum
PrtgAPI.HttpMode.HTTP -> Value
PrtgAPI.HttpMode.HTTPS -> Value
PrtgAPI.HttpRequestMethod => Enum
PrtgAPI.HttpRequestMethod.GET -> Value
PrtgAPI.HttpRequestMethod.HEAD -> Value
PrtgAPI.HttpRequestMethod.POST -> Value
PrtgAPI.IDevice => Interface
PrtgAPI.IDevice Host { get; } -> string
PrtgAPI.IDevice Location { get; } -> string
PrtgAPI.IDeviceInfo => Interface
PrtgAPI.IDeviceInfo DeviceId { get; set; } -> int
PrtgAPI.IDeviceInfo DisplayName { get; } -> string
PrtgAPI.IDeviceInfo LastUpdated { get; } -> DateTime
PrtgAPI.IDeviceInfo Type { get; } -> DeviceInfoType
PrtgAPI.IDeviceOrGroup => Interface
PrtgAPI.IDeviceOrGroup Condition { get; } -> string
PrtgAPI.IDeviceOrGroupOrProbe => Interface
PrtgAPI.IDeviceOrGroupOrProbe DownAcknowledgedSensors { get; } -> int
PrtgAPI.IDeviceOrGroupOrProbe DownSensors { get; } -> int
PrtgAPI.IDeviceOrGroupOrProbe PartialDownSensors { get; } -> int
PrtgAPI.IDeviceOrGroupOrProbe PausedSensors { get; } -> int
PrtgAPI.IDeviceOrGroupOrProbe TotalSensors { get; } -> int
PrtgAPI.IDeviceOrGroupOrProbe UnknownSensors { get; } -> int
PrtgAPI.IDeviceOrGroupOrProbe UnusualSensors { get; } -> int
PrtgAPI.IDeviceOrGroupOrProbe UpSensors { get; } -> int
PrtgAPI.IDeviceOrGroupOrProbe WarningSensors { get; } -> int
PrtgAPI.IEventObject => Interface
PrtgAPI.IEventObject ObjectId { get; } -> int
PrtgAPI.IGroup => Interface
PrtgAPI.IGroupOrProbe => Interface
PrtgAPI.IGroupOrProbe Collapsed { get; } -> bool
PrtgAPI.IGroupOrProbe TotalDevices { get; } -> int
PrtgAPI.IGroupOrProbe TotalGroups { get; } -> int
PrtgAPI.IntervalErrorMode => Enum
PrtgAPI.IntervalErrorMode.DownImmediately -> Value
PrtgAPI.IntervalErrorMode.FiveWarningsThenDown -> Value
PrtgAPI.IntervalErrorMode.FourWarningsThenDown -> Value
PrtgAPI.IntervalErrorMode.OneWarningThenDown -> Value
PrtgAPI.IntervalErrorMode.ThreeWarningsThenDown -> Value
PrtgAPI.IntervalErrorMode.TwoWarningsThenDown -> Value
PrtgAPI.InvalidStateException => Class
PrtgAPI.InvalidStateException Data { get; } -> IDictionary
PrtgAPI.InvalidStateException Equals(object obj) -> bool
PrtgAPI.InvalidStateException GetBaseException() -> Exception
PrtgAPI.InvalidStateException GetHashCode() -> int
PrtgAPI.InvalidStateException GetObjectData(SerializationInfo info, StreamingContext context) -> void
PrtgAPI.InvalidStateException GetType() -> Type
PrtgAPI.InvalidStateException GetType() -> Type
PrtgAPI.InvalidStateException HelpLink { get; set; } -> string
PrtgAPI.InvalidStateException HResult { get; } -> int
PrtgAPI.InvalidStateException InnerException { get; } -> Exception
PrtgAPI.InvalidStateException Message { get; } -> string
PrtgAPI.InvalidStateException Source { get; set; } -> string
PrtgAPI.InvalidStateException StackTrace { get; } -> string
PrtgAPI.InvalidStateException TargetSite { get; } -> MethodBase
PrtgAPI.InvalidStateException ToString() -> string
PrtgAPI.InvalidTriggerTypeException => Class
PrtgAPI.InvalidTriggerTypeException Data { get; } -> IDictionary
PrtgAPI.InvalidTriggerTypeException Equals(object obj) -> bool
PrtgAPI.InvalidTriggerTypeException GetBaseException() -> Exception
PrtgAPI.InvalidTriggerTypeException GetHashCode() -> int
PrtgAPI.InvalidTriggerTypeException GetObjectData(SerializationInfo info, StreamingContext context) -> void
PrtgAPI.InvalidTriggerTypeException GetType() -> Type
PrtgAPI.InvalidTriggerTypeException GetType() -> Type
PrtgAPI.InvalidTriggerTypeException HelpLink { get; set; } -> string
PrtgAPI.InvalidTriggerTypeException HResult { get; } -> int
PrtgAPI.InvalidTriggerTypeException InnerException { get; } -> Exception
PrtgAPI.InvalidTriggerTypeException Message { get; } -> string
PrtgAPI.InvalidTriggerTypeException Source { get; set; } -> string
PrtgAPI.InvalidTriggerTypeException StackTrace { get; } -> string
PrtgAPI.InvalidTriggerTypeException TargetSite { get; } -> MethodBase
PrtgAPI.InvalidTriggerTypeException ToString() -> string
PrtgAPI.InvalidTypeException => Class
PrtgAPI.InvalidTypeException Data { get; } -> IDictionary
PrtgAPI.InvalidTypeException Equals(object obj) -> bool
PrtgAPI.InvalidTypeException GetBaseException() -> Exception
PrtgAPI.InvalidTypeException GetHashCode() -> int
PrtgAPI.InvalidTypeException GetObjectData(SerializationInfo info, StreamingContext context) -> void
PrtgAPI.InvalidTypeException GetType() -> Type
PrtgAPI.InvalidTypeException GetType() -> Type
PrtgAPI.InvalidTypeException HelpLink { get; set; } -> string
PrtgAPI.InvalidTypeException HResult { get; } -> int
PrtgAPI.InvalidTypeException InnerException { get; } -> Exception
PrtgAPI.InvalidTypeException Message { get; } -> string
PrtgAPI.InvalidTypeException Source { get; set; } -> string
PrtgAPI.InvalidTypeException StackTrace { get; } -> string
PrtgAPI.InvalidTypeException TargetSite { get; } -> MethodBase
PrtgAPI.InvalidTypeException ToString() -> string
PrtgAPI.IObject => Interface
PrtgAPI.IObject Name { get; } -> string
PrtgAPI.IObjectExtensions => Class
PrtgAPI.IObjectExtensions Equals(object obj) -> bool
PrtgAPI.IObjectExtensions GetHashCode() -> int
PrtgAPI.IObjectExtensions GetId(IObject obj) -> int
PrtgAPI.IObjectExtensions GetType() -> Type
PrtgAPI.IObjectExtensions ToString() -> string
PrtgAPI.IProbe => Interface
PrtgAPI.IProbe ProbeStatus { get; } -> ProbeStatus
PrtgAPI.IPrtgObject => Interface
PrtgAPI.IPrtgObject Active { get; } -> bool
PrtgAPI.IPrtgObject DisplayType { get; } -> string
PrtgAPI.IPrtgObject Id { get; } -> int
PrtgAPI.IPrtgObject Name { get; } -> string
PrtgAPI.IPrtgObject ParentId { get; } -> int
PrtgAPI.IPrtgObject Tags { get; } -> string[]
PrtgAPI.IPrtgObject Type { get; } -> StringEnum<ObjectType>
PrtgAPI.IPVersion => Enum
PrtgAPI.IPVersion.IPv4 -> Value
PrtgAPI.IPVersion.IPv6 -> Value
PrtgAPI.ISensor => Interface
PrtgAPI.ISensor DataCollectedSince { get; } -> DateTime?
PrtgAPI.ISensor Device { get; } -> string
PrtgAPI.ISensor DisplayLastValue { get; } -> string
PrtgAPI.ISensor DownDuration { get; } -> TimeSpan?
PrtgAPI.ISensor Downtime { get; } -> double?
PrtgAPI.ISensor LastCheck { get; } -> DateTime?
PrtgAPI.ISensor LastDown { get; } -> DateTime?
PrtgAPI.ISensor LastUp { get; } -> DateTime?
PrtgAPI.ISensor LastValue { get; } -> double?
PrtgAPI.ISensor MiniGraph { get; } -> string
PrtgAPI.ISensor TotalDowntime { get; } -> TimeSpan?
PrtgAPI.ISensor TotalMonitorTime { get; } -> TimeSpan
PrtgAPI.ISensor TotalUptime { get; } -> TimeSpan?
PrtgAPI.ISensor UpDuration { get; } -> TimeSpan?
PrtgAPI.ISensor Uptime { get; } -> double?
PrtgAPI.ISensorOrDevice => Interface
PrtgAPI.ISensorOrDevice Favorite { get; } -> bool
PrtgAPI.ISensorOrDevice Group { get; } -> string
PrtgAPI.ISensorOrDeviceOrGroup => Interface
PrtgAPI.ISensorOrDeviceOrGroup Probe { get; } -> string
PrtgAPI.ISensorOrDeviceOrGroupOrProbe => Interface
PrtgAPI.ISensorOrDeviceOrGroupOrProbe Access { get; } -> Access
PrtgAPI.ISensorOrDeviceOrGroupOrProbe BaseType { get; } -> BaseType
PrtgAPI.ISensorOrDeviceOrGroupOrProbe Comments { get; } -> string
PrtgAPI.ISensorOrDeviceOrGroupOrProbe Dependency { get; } -> string
PrtgAPI.ISensorOrDeviceOrGroupOrProbe InheritInterval { get; } -> bool
PrtgAPI.ISensorOrDeviceOrGroupOrProbe Interval { get; } -> TimeSpan
PrtgAPI.ISensorOrDeviceOrGroupOrProbe NotificationTypes { get; } -> NotificationTypes
PrtgAPI.ISensorOrDeviceOrGroupOrProbe Position { get; } -> int
PrtgAPI.ISensorOrDeviceOrGroupOrProbe Schedule { get; } -> string
PrtgAPI.ISensorOrDeviceOrGroupOrProbe Status { get; } -> Status
PrtgAPI.ISensorOrDeviceOrGroupOrProbe Url { get; } -> string
PrtgAPI.ISensorOrDeviceOrGroupOrProbeOrTicket => Interface
PrtgAPI.ISensorOrDeviceOrGroupOrProbeOrTicket Priority { get; } -> Priority
PrtgAPI.ISensorOrDeviceOrGroupOrProbeOrTicketOrTicketData => Interface
PrtgAPI.ISensorOrDeviceOrGroupOrProbeOrTicketOrTicketData Message { get; } -> string
PrtgAPI.ISubObject => Interface
PrtgAPI.ISubObject ObjectId { get; } -> int
PrtgAPI.ISubObject SubId { get; } -> int
PrtgAPI.ITableObject => Interface
PrtgAPI.ITableObject Active { get; } -> bool
PrtgAPI.ITableObject DisplayType { get; } -> string
PrtgAPI.ITableObject Id { get; } -> int
PrtgAPI.ITableObject Tags { get; } -> string[]
PrtgAPI.ITableObject Type { get; } -> StringEnum<ObjectType>
PrtgAPI.LicenseType => Enum
PrtgAPI.LicenseType.Commercial -> Value
PrtgAPI.LicenseType.Freeware -> Value
PrtgAPI.LinuxLoginMode => Enum
PrtgAPI.LinuxLoginMode.Password -> Value
PrtgAPI.LinuxLoginMode.PrivateKey -> Value
PrtgAPI.Log => Class
PrtgAPI.Log Active { get; set; } -> bool
PrtgAPI.Log ClusterNode { get; set; } -> string
PrtgAPI.Log DateTime { get; set; } -> DateTime
PrtgAPI.Log Device { get; set; } -> string
PrtgAPI.Log DisplayType { get; set; } -> string
PrtgAPI.Log Equals(object obj) -> bool
PrtgAPI.Log GetHashCode() -> int
PrtgAPI.Log GetType() -> Type
PrtgAPI.Log Group { get; set; } -> string
PrtgAPI.Log Id { get; set; } -> int
PrtgAPI.Log Message { get; set; } -> string
PrtgAPI.Log Name { get; set; } -> string
PrtgAPI.Log Parent { get; set; } -> string
PrtgAPI.Log Priority { get; set; } -> Priority
PrtgAPI.Log Probe { get; set; } -> string
PrtgAPI.Log Sensor { get; set; } -> string
PrtgAPI.Log Status { get; set; } -> LogStatus
PrtgAPI.Log Tags { get; set; } -> string[]
PrtgAPI.Log ToString() -> string
PrtgAPI.Log Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.LogLevel => Enum
PrtgAPI.LogLevel.All -> Value
PrtgAPI.LogLevel.None -> Value
PrtgAPI.LogLevel.Request -> Value
PrtgAPI.LogLevel.Response -> Value
PrtgAPI.LogLevel.Trace -> Value
PrtgAPI.LogStatus => Enum
PrtgAPI.LogStatus.Activation -> Value
PrtgAPI.LogStatus.Active -> Value
PrtgAPI.LogStatus.ChildObjectDeleted -> Value
PrtgAPI.LogStatus.ChildObjectMoved -> Value
PrtgAPI.LogStatus.ClusterConnection -> Value
PrtgAPI.LogStatus.ClusterInfo -> Value
PrtgAPI.LogStatus.ClusterInit -> Value
PrtgAPI.LogStatus.ClusterMasterChanged -> Value
PrtgAPI.LogStatus.ClusterNodeConnected -> Value
PrtgAPI.LogStatus.ClusterNodeDisconnected -> Value
PrtgAPI.LogStatus.ClusterStart -> Value
PrtgAPI.LogStatus.ClusterStop -> Value
PrtgAPI.LogStatus.Connected -> Value
PrtgAPI.LogStatus.Created -> Value
PrtgAPI.LogStatus.CreatedFromClone -> Value
PrtgAPI.LogStatus.Data -> Value
PrtgAPI.LogStatus.Deleted -> Value
PrtgAPI.LogStatus.Disconnected -> Value
PrtgAPI.LogStatus.DiscoveryDeviceFound -> Value
PrtgAPI.LogStatus.DiscoveryFailed -> Value
PrtgAPI.LogStatus.DiscoveryTemplateApplied -> Value
PrtgAPI.LogStatus.Down -> Value
PrtgAPI.LogStatus.DownAcknowledged -> Value
PrtgAPI.LogStatus.DownPartial -> Value
PrtgAPI.LogStatus.Edited -> Value
PrtgAPI.LogStatus.FtpConnectionMode -> Value
PrtgAPI.LogStatus.FtpMode -> Value
PrtgAPI.LogStatus.GraphCache -> Value
PrtgAPI.LogStatus.GroupDiscoveryFinished -> Value
PrtgAPI.LogStatus.GroupDiscoveryStarted -> Value
PrtgAPI.LogStatus.Info -> Value
PrtgAPI.LogStatus.Moved -> Value
PrtgAPI.LogStatus.MovedObjectInserted -> Value
PrtgAPI.LogStatus.MultipleClusterMasters -> Value
PrtgAPI.LogStatus.NewChildObject -> Value
PrtgAPI.LogStatus.NewClusterNode -> Value
PrtgAPI.LogStatus.NewProbe -> Value
PrtgAPI.LogStatus.NotificationItem -> Value
PrtgAPI.LogStatus.NotifyChanged -> Value
PrtgAPI.LogStatus.OverloadProtection -> Value
PrtgAPI.LogStatus.PausedByDependency -> Value
PrtgAPI.LogStatus.PausedByLicense -> Value
PrtgAPI.LogStatus.PausedBySchedule -> Value
PrtgAPI.LogStatus.PausedByUser -> Value
PrtgAPI.LogStatus.Pausing -> Value
PrtgAPI.LogStatus.ProbeApproved -> Value
PrtgAPI.LogStatus.ProbeDenied -> Value
PrtgAPI.LogStatus.ProbeGidDenied -> Value
PrtgAPI.LogStatus.ProbeInfo -> Value
PrtgAPI.LogStatus.ProbeKeyDenied -> Value
PrtgAPI.LogStatus.Reminder -> Value
PrtgAPI.LogStatus.ReportDone -> Value
PrtgAPI.LogStatus.Resuming -> Value
PrtgAPI.LogStatus.SmtpConfiguration -> Value
PrtgAPI.LogStatus.SubnodeCreated -> Value
PrtgAPI.LogStatus.SubnodeDeleted -> Value
PrtgAPI.LogStatus.SubnodeEdited -> Value
PrtgAPI.LogStatus.SystemError -> Value
PrtgAPI.LogStatus.SystemInfo -> Value
PrtgAPI.LogStatus.SystemStart -> Value
PrtgAPI.LogStatus.SystemStop -> Value
PrtgAPI.LogStatus.Unknown -> Value
PrtgAPI.LogStatus.Unusual -> Value
PrtgAPI.LogStatus.Up -> Value
PrtgAPI.LogStatus.UpdateApplied -> Value
PrtgAPI.LogStatus.UpdateAvailable -> Value
PrtgAPI.LogStatus.UpdateCheck -> Value
PrtgAPI.LogStatus.UsePerfCounters -> Value
PrtgAPI.LogStatus.Warning -> Value
PrtgAPI.LogStatus.WebServer -> Value
PrtgAPI.LogStatus.WMIFallback -> Value
PrtgAPI.LogVerboseEventArgs => Class
PrtgAPI.LogVerboseEventArgs Equals(object obj) -> bool
PrtgAPI.LogVerboseEventArgs GetHashCode() -> int
PrtgAPI.LogVerboseEventArgs GetType() -> Type
PrtgAPI.LogVerboseEventArgs LogLevel { get; set; } -> LogLevel
PrtgAPI.LogVerboseEventArgs Message { get; set; } -> string
PrtgAPI.LogVerboseEventArgs ToString() -> string
PrtgAPI.ModificationEvent => Class
PrtgAPI.ModificationEvent DateTime { get; set; } -> DateTime
PrtgAPI.ModificationEvent Equals(object obj) -> bool
PrtgAPI.ModificationEvent GetHashCode() -> int
PrtgAPI.ModificationEvent GetType() -> Type
PrtgAPI.ModificationEvent Message { get; set; } -> string
PrtgAPI.ModificationEvent ObjectId { get; set; } -> int
PrtgAPI.ModificationEvent ToString() -> string
PrtgAPI.ModificationEvent UserName { get; set; } -> string
PrtgAPI.ModifyAction => Enum
PrtgAPI.ModifyAction.Add -> Value
PrtgAPI.ModifyAction.Edit -> Value
PrtgAPI.NotificationAction => Class
PrtgAPI.NotificationAction Active { get; set; } -> bool
PrtgAPI.NotificationAction Amazon { get; set; } -> NotificationActionAmazonSettings
PrtgAPI.NotificationAction Comments { get; set; } -> string
PrtgAPI.NotificationAction DisplayType { get; set; } -> string
PrtgAPI.NotificationAction Email { get; set; } -> NotificationActionEmailSettings
PrtgAPI.NotificationAction Equals(object obj) -> bool
PrtgAPI.NotificationAction EventLog { get; set; } -> NotificationActionEventLogSettings
PrtgAPI.NotificationAction GetHashCode() -> int
PrtgAPI.NotificationAction GetType() -> Type
PrtgAPI.NotificationAction Http { get; set; } -> NotificationActionHttpSettings
PrtgAPI.NotificationAction Id { get; set; } -> int
PrtgAPI.NotificationAction Name { get; set; } -> string
PrtgAPI.NotificationAction ParentId { get; set; } -> int
PrtgAPI.NotificationAction Postpone { get; set; } -> bool?
PrtgAPI.NotificationAction Program { get; set; } -> NotificationActionProgramSettings
PrtgAPI.NotificationAction Push { get; set; } -> NotificationActionPushSettings
PrtgAPI.NotificationAction Schedule { get; } -> Schedule
PrtgAPI.NotificationAction SMS { get; set; } -> NotificationActionSMSSettings
PrtgAPI.NotificationAction SNMP { get; set; } -> NotificationActionSNMPSettings
PrtgAPI.NotificationAction SummaryMode { get; set; } -> SummaryMode?
PrtgAPI.NotificationAction SummaryPeriod { get; set; } -> int?
PrtgAPI.NotificationAction SummarySubject { get; set; } -> string
PrtgAPI.NotificationAction Syslog { get; set; } -> NotificationActionSyslogSettings
PrtgAPI.NotificationAction Tags { get; set; } -> string[]
PrtgAPI.NotificationAction Ticket { get; set; } -> NotificationActionTicketSettings
PrtgAPI.NotificationAction ToString() -> string
PrtgAPI.NotificationAction Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.NotificationAction Url { get; set; } -> string
PrtgAPI.NotificationActions.BaseNotificationActionSettings => Class
PrtgAPI.NotificationActions.BaseNotificationActionSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.BaseNotificationActionSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.BaseNotificationActionSettings GetHashCode() -> int
PrtgAPI.NotificationActions.BaseNotificationActionSettings GetType() -> Type
PrtgAPI.NotificationActions.BaseNotificationActionSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionAmazonSettings => Class
PrtgAPI.NotificationActions.NotificationActionAmazonSettings AccessKey { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionAmazonSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionAmazonSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.NotificationActionAmazonSettings GetHashCode() -> int
PrtgAPI.NotificationActions.NotificationActionAmazonSettings GetType() -> Type
PrtgAPI.NotificationActions.NotificationActionAmazonSettings Message { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionAmazonSettings Region { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionAmazonSettings ResourceName { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionAmazonSettings SecretKey { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionAmazonSettings Subject { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionAmazonSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionEmailSettings => Class
PrtgAPI.NotificationActions.NotificationActionEmailSettings Address { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionEmailSettings ContentType { get; set; } -> EmailContentType
PrtgAPI.NotificationActions.NotificationActionEmailSettings CustomText { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionEmailSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionEmailSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.NotificationActionEmailSettings GetHashCode() -> int
PrtgAPI.NotificationActions.NotificationActionEmailSettings GetType() -> Type
PrtgAPI.NotificationActions.NotificationActionEmailSettings Priority { get; set; } -> EmailPriority
PrtgAPI.NotificationActions.NotificationActionEmailSettings Subject { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionEmailSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionEmailSettings UserAccount { get; } -> UserAccount
PrtgAPI.NotificationActions.NotificationActionEmailSettings UserGroup { get; } -> UserGroup
PrtgAPI.NotificationActions.NotificationActionEventLogSettings => Class
PrtgAPI.NotificationActions.NotificationActionEventLogSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionEventLogSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.NotificationActionEventLogSettings EventSource { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionEventLogSettings EventType { get; set; } -> EventLogType?
PrtgAPI.NotificationActions.NotificationActionEventLogSettings GetHashCode() -> int
PrtgAPI.NotificationActions.NotificationActionEventLogSettings GetType() -> Type
PrtgAPI.NotificationActions.NotificationActionEventLogSettings LogName { get; set; } -> EventLog
PrtgAPI.NotificationActions.NotificationActionEventLogSettings Message { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionEventLogSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionHttpSettings => Class
PrtgAPI.NotificationActions.NotificationActionHttpSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionHttpSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.NotificationActionHttpSettings GetHashCode() -> int
PrtgAPI.NotificationActions.NotificationActionHttpSettings GetType() -> Type
PrtgAPI.NotificationActions.NotificationActionHttpSettings PostData { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionHttpSettings SendSNI { get; set; } -> bool?
PrtgAPI.NotificationActions.NotificationActionHttpSettings SNIName { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionHttpSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionHttpSettings Url { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionProgramSettings => Class
PrtgAPI.NotificationActions.NotificationActionProgramSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionProgramSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.NotificationActionProgramSettings ExeFile { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionProgramSettings GetHashCode() -> int
PrtgAPI.NotificationActions.NotificationActionProgramSettings GetType() -> Type
PrtgAPI.NotificationActions.NotificationActionProgramSettings HasWindowsPassword { get; } -> bool
PrtgAPI.NotificationActions.NotificationActionProgramSettings Parameters { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionProgramSettings Timeout { get; set; } -> int
PrtgAPI.NotificationActions.NotificationActionProgramSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionProgramSettings WindowsDomain { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionProgramSettings WindowsUserName { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionPushSettings => Class
PrtgAPI.NotificationActions.NotificationActionPushSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionPushSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.NotificationActionPushSettings GetHashCode() -> int
PrtgAPI.NotificationActions.NotificationActionPushSettings GetType() -> Type
PrtgAPI.NotificationActions.NotificationActionPushSettings Message { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionPushSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionPushSettings UserAccount { get; } -> UserAccount
PrtgAPI.NotificationActions.NotificationActionPushSettings UserGroup { get; } -> UserGroup
PrtgAPI.NotificationActions.NotificationActionSMSSettings => Class
PrtgAPI.NotificationActions.NotificationActionSMSSettings Address { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionSMSSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionSMSSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.NotificationActionSMSSettings GetHashCode() -> int
PrtgAPI.NotificationActions.NotificationActionSMSSettings GetType() -> Type
PrtgAPI.NotificationActions.NotificationActionSMSSettings Message { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionSMSSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionSMSSettings UserAccount { get; } -> UserAccount
PrtgAPI.NotificationActions.NotificationActionSMSSettings UserGroup { get; } -> UserGroup
PrtgAPI.NotificationActions.NotificationActionSNMPSettings => Class
PrtgAPI.NotificationActions.NotificationActionSNMPSettings Community { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionSNMPSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionSNMPSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.NotificationActionSNMPSettings GetHashCode() -> int
PrtgAPI.NotificationActions.NotificationActionSNMPSettings GetType() -> Type
PrtgAPI.NotificationActions.NotificationActionSNMPSettings Host { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionSNMPSettings Message { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionSNMPSettings MessageId { get; set; } -> int
PrtgAPI.NotificationActions.NotificationActionSNMPSettings Port { get; set; } -> int
PrtgAPI.NotificationActions.NotificationActionSNMPSettings SenderIP { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionSNMPSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionSNMPSettings TrapCode { get; set; } -> int?
PrtgAPI.NotificationActions.NotificationActionSyslogSettings => Class
PrtgAPI.NotificationActions.NotificationActionSyslogSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionSyslogSettings Encoding { get; set; } -> SyslogEncoding?
PrtgAPI.NotificationActions.NotificationActionSyslogSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.NotificationActionSyslogSettings Facility { get; set; } -> SyslogFacility
PrtgAPI.NotificationActions.NotificationActionSyslogSettings GetHashCode() -> int
PrtgAPI.NotificationActions.NotificationActionSyslogSettings GetType() -> Type
PrtgAPI.NotificationActions.NotificationActionSyslogSettings Host { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionSyslogSettings Message { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionSyslogSettings Port { get; set; } -> int
PrtgAPI.NotificationActions.NotificationActionSyslogSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionTicketSettings => Class
PrtgAPI.NotificationActions.NotificationActionTicketSettings AutoClose { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionTicketSettings Enabled { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionTicketSettings Equals(object obj) -> bool
PrtgAPI.NotificationActions.NotificationActionTicketSettings GetHashCode() -> int
PrtgAPI.NotificationActions.NotificationActionTicketSettings GetType() -> Type
PrtgAPI.NotificationActions.NotificationActionTicketSettings IsUserGroup { get; set; } -> bool
PrtgAPI.NotificationActions.NotificationActionTicketSettings Message { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionTicketSettings Subject { get; set; } -> string
PrtgAPI.NotificationActions.NotificationActionTicketSettings ToString() -> string
PrtgAPI.NotificationActions.NotificationActionTicketSettings UserAccount { get; } -> UserAccount
PrtgAPI.NotificationActions.NotificationActionTicketSettings UserGroup { get; } -> UserGroup
PrtgAPI.NotificationTrigger => Class
PrtgAPI.NotificationTrigger Channel { get; } -> TriggerChannel
PrtgAPI.NotificationTrigger Condition { get; } -> TriggerCondition?
PrtgAPI.NotificationTrigger DisplayThreshold { get; } -> string
PrtgAPI.NotificationTrigger Equals(object obj) -> bool
PrtgAPI.NotificationTrigger EscalationLatency { get; set; } -> int?
PrtgAPI.NotificationTrigger EscalationNotificationAction { get; } -> NotificationAction
PrtgAPI.NotificationTrigger GetHashCode() -> int
PrtgAPI.NotificationTrigger GetType() -> Type
PrtgAPI.NotificationTrigger Inherited { get; } -> bool
PrtgAPI.NotificationTrigger Latency { get; set; } -> int?
PrtgAPI.NotificationTrigger ObjectId { get; set; } -> int
PrtgAPI.NotificationTrigger OffNotificationAction { get; } -> NotificationAction
PrtgAPI.NotificationTrigger OnNotificationAction { get; } -> NotificationAction
PrtgAPI.NotificationTrigger ParentId { get; } -> int
PrtgAPI.NotificationTrigger Period { get; } -> TriggerPeriod?
PrtgAPI.NotificationTrigger RepeatInterval { get; set; } -> int?
PrtgAPI.NotificationTrigger State { get; } -> TriggerSensorState?
PrtgAPI.NotificationTrigger SubId { get; set; } -> int
PrtgAPI.NotificationTrigger Threshold { get; set; } -> double?
PrtgAPI.NotificationTrigger ToString() -> string
PrtgAPI.NotificationTrigger Type { get; } -> TriggerType
PrtgAPI.NotificationTrigger TypeName { get; set; } -> string
PrtgAPI.NotificationTrigger Unit { get; } -> string
PrtgAPI.NotificationTrigger UnitSize { get; } -> DataUnit?
PrtgAPI.NotificationTrigger UnitTime { get; } -> TimeUnit?
PrtgAPI.NotificationTypes => Class
PrtgAPI.NotificationTypes ChangeTriggers { get; } -> int
PrtgAPI.NotificationTypes Equals(NotificationTypes other) -> bool
PrtgAPI.NotificationTypes Equals(object other) -> bool
PrtgAPI.NotificationTypes GetHashCode() -> int
PrtgAPI.NotificationTypes GetType() -> Type
PrtgAPI.NotificationTypes InheritTriggers { get; } -> bool
PrtgAPI.NotificationTypes SpeedTriggers { get; } -> int
PrtgAPI.NotificationTypes StateTriggers { get; } -> int
PrtgAPI.NotificationTypes ThresholdTriggers { get; } -> int
PrtgAPI.NotificationTypes ToString() -> string
PrtgAPI.NotificationTypes TotalTriggers { get; } -> int
PrtgAPI.NotificationTypes VolumeTriggers { get; } -> int
PrtgAPI.ObjectProperty => Enum
PrtgAPI.ObjectProperty.Active -> Value
PrtgAPI.ObjectProperty.AmazonAccessKey -> Value
PrtgAPI.ObjectProperty.AmazonSecretKey -> Value
PrtgAPI.ObjectProperty.AutoAcknowledge -> Value
PrtgAPI.ObjectProperty.AutoDiscoveryMode -> Value
PrtgAPI.ObjectProperty.AutoDiscoverySchedule -> Value
PrtgAPI.ObjectProperty.BandwidthSpeedUnit -> Value
PrtgAPI.ObjectProperty.BandwidthTimeUnit -> Value
PrtgAPI.ObjectProperty.BandwidthVolumeUnit -> Value
PrtgAPI.ObjectProperty.ChannelDefinition -> Value
PrtgAPI.ObjectProperty.Comments -> Value
PrtgAPI.ObjectProperty.Database -> Value
PrtgAPI.ObjectProperty.DBAuthMode -> Value
PrtgAPI.ObjectProperty.DBPassword -> Value
PrtgAPI.ObjectProperty.DBPort -> Value
PrtgAPI.ObjectProperty.DBPortMode -> Value
PrtgAPI.ObjectProperty.DBTimeout -> Value
PrtgAPI.ObjectProperty.DBUserName -> Value
PrtgAPI.ObjectProperty.DebugMode -> Value
PrtgAPI.ObjectProperty.DiskSizeUnit -> Value
PrtgAPI.ObjectProperty.ExeFile -> Value
PrtgAPI.ObjectProperty.ExeParameters -> Value
PrtgAPI.ObjectProperty.FactoryErrorFormula -> Value
PrtgAPI.ObjectProperty.FactoryErrorMode -> Value
PrtgAPI.ObjectProperty.FactoryMissingDataMode -> Value
PrtgAPI.ObjectProperty.FileSizeUnit -> Value
PrtgAPI.ObjectProperty.GraphType -> Value
PrtgAPI.ObjectProperty.Host -> Value
PrtgAPI.ObjectProperty.Hostv4 -> Value
PrtgAPI.ObjectProperty.Hostv6 -> Value
PrtgAPI.ObjectProperty.HttpRequestMethod -> Value
PrtgAPI.ObjectProperty.InheritAccess -> Value
PrtgAPI.ObjectProperty.InheritAmazonCredentials -> Value
PrtgAPI.ObjectProperty.InheritChannelUnit -> Value
PrtgAPI.ObjectProperty.InheritDBCredentials -> Value
PrtgAPI.ObjectProperty.InheritInterval -> Value
PrtgAPI.ObjectProperty.InheritLinuxCredentials -> Value
PrtgAPI.ObjectProperty.InheritLocation -> Value
PrtgAPI.ObjectProperty.InheritProxy -> Value
PrtgAPI.ObjectProperty.InheritSNMPCompatibility -> Value
PrtgAPI.ObjectProperty.InheritSNMPCredentials -> Value
PrtgAPI.ObjectProperty.InheritTriggers -> Value
PrtgAPI.ObjectProperty.InheritVMwareCredentials -> Value
PrtgAPI.ObjectProperty.InheritWindowsCompatibility -> Value
PrtgAPI.ObjectProperty.InheritWindowsCredentials -> Value
PrtgAPI.ObjectProperty.InstanceName -> Value
PrtgAPI.ObjectProperty.Interval -> Value
PrtgAPI.ObjectProperty.IntervalErrorMode -> Value
PrtgAPI.ObjectProperty.LinuxLoginMode -> Value
PrtgAPI.ObjectProperty.LinuxPassword -> Value
PrtgAPI.ObjectProperty.LinuxPrivateKey -> Value
PrtgAPI.ObjectProperty.LinuxUserName -> Value
PrtgAPI.ObjectProperty.Location -> Value
PrtgAPI.ObjectProperty.LocationName -> Value
PrtgAPI.ObjectProperty.MemoryUsageUnit -> Value
PrtgAPI.ObjectProperty.MonitorPerformance -> Value
PrtgAPI.ObjectProperty.Mutex -> Value
PrtgAPI.ObjectProperty.Name -> Value
PrtgAPI.ObjectProperty.NotifyChanged -> Value
PrtgAPI.ObjectProperty.PingCount -> Value
PrtgAPI.ObjectProperty.PingDelay -> Value
PrtgAPI.ObjectProperty.PingMode -> Value
PrtgAPI.ObjectProperty.PingPacketSize -> Value
PrtgAPI.ObjectProperty.PingRemotePacketSize -> Value
PrtgAPI.ObjectProperty.PostContentType -> Value
PrtgAPI.ObjectProperty.PostData -> Value
PrtgAPI.ObjectProperty.PrimaryChannel -> Value
PrtgAPI.ObjectProperty.Priority -> Value
PrtgAPI.ObjectProperty.ProxyAddress -> Value
PrtgAPI.ObjectProperty.ProxyPassword -> Value
PrtgAPI.ObjectProperty.ProxyPort -> Value
PrtgAPI.ObjectProperty.ProxyUser -> Value
PrtgAPI.ObjectProperty.ServiceUrl -> Value
PrtgAPI.ObjectProperty.SetExeEnvironmentVariables -> Value
PrtgAPI.ObjectProperty.SNMPCommunityStringV1 -> Value
PrtgAPI.ObjectProperty.SNMPCommunityStringV2 -> Value
PrtgAPI.ObjectProperty.SNMPCounterMode -> Value
PrtgAPI.ObjectProperty.SNMPDelay -> Value
PrtgAPI.ObjectProperty.SNMPInterfaceEndIndex -> Value
PrtgAPI.ObjectProperty.SNMPInterfaceStartIndex -> Value
PrtgAPI.ObjectProperty.SNMPOverflowMode -> Value
PrtgAPI.ObjectProperty.SNMPPort -> Value
PrtgAPI.ObjectProperty.SNMPPortIdMode -> Value
PrtgAPI.ObjectProperty.SNMPPortNameTemplate -> Value
PrtgAPI.ObjectProperty.SNMPPortNameUpdateMode -> Value
PrtgAPI.ObjectProperty.SNMPRequestMode -> Value
PrtgAPI.ObjectProperty.SNMPRetryMode -> Value
PrtgAPI.ObjectProperty.SNMPTimeout -> Value
PrtgAPI.ObjectProperty.SNMPv3AuthType -> Value
PrtgAPI.ObjectProperty.SNMPv3Context -> Value
PrtgAPI.ObjectProperty.SNMPv3EncryptionKey -> Value
PrtgAPI.ObjectProperty.SNMPv3EncryptionType -> Value
PrtgAPI.ObjectProperty.SNMPv3Password -> Value
PrtgAPI.ObjectProperty.SNMPv3UserName -> Value
PrtgAPI.ObjectProperty.SNMPVersion -> Value
PrtgAPI.ObjectProperty.SNMPZeroValueMode -> Value
PrtgAPI.ObjectProperty.SqlEncryptionMode -> Value
PrtgAPI.ObjectProperty.SqlInputParameter -> Value
PrtgAPI.ObjectProperty.SqlProcessingMode -> Value
PrtgAPI.ObjectProperty.SqlServerQuery -> Value
PrtgAPI.ObjectProperty.SqlTransactionMode -> Value
PrtgAPI.ObjectProperty.SSHElevationMode -> Value
PrtgAPI.ObjectProperty.SSHElevationPassword -> Value
PrtgAPI.ObjectProperty.SSHElevationSudoUser -> Value
PrtgAPI.ObjectProperty.SSHElevationSuUser -> Value
PrtgAPI.ObjectProperty.SSHEngine -> Value
PrtgAPI.ObjectProperty.SSHPort -> Value
PrtgAPI.ObjectProperty.StartStopped -> Value
PrtgAPI.ObjectProperty.Tags -> Value
PrtgAPI.ObjectProperty.Target -> Value
PrtgAPI.ObjectProperty.Timeout -> Value
PrtgAPI.ObjectProperty.Url -> Value
PrtgAPI.ObjectProperty.UseCustomInstance -> Value
PrtgAPI.ObjectProperty.UseCustomPostContent -> Value
PrtgAPI.ObjectProperty.UseSNIFromUrl -> Value
PrtgAPI.ObjectProperty.UseSqlInputParameter -> Value
PrtgAPI.ObjectProperty.UseWindowsAuthentication -> Value
PrtgAPI.ObjectProperty.VMwarePassword -> Value
PrtgAPI.ObjectProperty.VMwareProtocol -> Value
PrtgAPI.ObjectProperty.VMwareSessionMode -> Value
PrtgAPI.ObjectProperty.VMwareUserName -> Value
PrtgAPI.ObjectProperty.WbemPort -> Value
PrtgAPI.ObjectProperty.WbemPortMode -> Value
PrtgAPI.ObjectProperty.WbemProtocolMode -> Value
PrtgAPI.ObjectProperty.WindowsDomain -> Value
PrtgAPI.ObjectProperty.WindowsPassword -> Value
PrtgAPI.ObjectProperty.WindowsUserName -> Value
PrtgAPI.ObjectProperty.WmiDataSource -> Value
PrtgAPI.ObjectProperty.WmiMode -> Value
PrtgAPI.ObjectProperty.WmiTimeout -> Value
PrtgAPI.ObjectProperty.WmiTimeoutMethod -> Value
PrtgAPI.ObjectResolutionException => Class
PrtgAPI.ObjectResolutionException Data { get; } -> IDictionary
PrtgAPI.ObjectResolutionException Equals(object obj) -> bool
PrtgAPI.ObjectResolutionException GetBaseException() -> Exception
PrtgAPI.ObjectResolutionException GetHashCode() -> int
PrtgAPI.ObjectResolutionException GetObjectData(SerializationInfo info, StreamingContext context) -> void
PrtgAPI.ObjectResolutionException GetType() -> Type
PrtgAPI.ObjectResolutionException GetType() -> Type
PrtgAPI.ObjectResolutionException HelpLink { get; set; } -> string
PrtgAPI.ObjectResolutionException HResult { get; } -> int
PrtgAPI.ObjectResolutionException InnerException { get; } -> Exception
PrtgAPI.ObjectResolutionException Message { get; } -> string
PrtgAPI.ObjectResolutionException Source { get; set; } -> string
PrtgAPI.ObjectResolutionException StackTrace { get; } -> string
PrtgAPI.ObjectResolutionException TargetSite { get; } -> MethodBase
PrtgAPI.ObjectResolutionException ToString() -> string
PrtgAPI.ObjectSettings => Class
PrtgAPI.ObjectSettings Equals(object obj) -> bool
PrtgAPI.ObjectSettings GetHashCode() -> int
PrtgAPI.ObjectSettings GetType() -> Type
PrtgAPI.ObjectSettings ToString() -> string
PrtgAPI.ObjectType => Enum
PrtgAPI.ObjectType.ActiveDirectoryUserOrGroup -> Value
PrtgAPI.ObjectType.Device -> Value
PrtgAPI.ObjectType.Group -> Value
PrtgAPI.ObjectType.Library -> Value
PrtgAPI.ObjectType.Map -> Value
PrtgAPI.ObjectType.Notification -> Value
PrtgAPI.ObjectType.Probe -> Value
PrtgAPI.ObjectType.PrtgUserOrGroup -> Value
PrtgAPI.ObjectType.Report -> Value
PrtgAPI.ObjectType.Schedule -> Value
PrtgAPI.ObjectType.Sensor -> Value
PrtgAPI.ObjectType.System -> Value
PrtgAPI.ObjectType.User -> Value
PrtgAPI.ObjectType.UserGroup -> Value
PrtgAPI.ObjectType.WebServerOptions -> Value
PrtgAPI.Parameter => Enum
PrtgAPI.Parameter.AcknowledgeMessage -> Value
PrtgAPI.Parameter.Action -> Value
PrtgAPI.Parameter.Approve -> Value
PrtgAPI.Parameter.Average -> Value
PrtgAPI.Parameter.Category -> Value
PrtgAPI.Parameter.Channel -> Value
PrtgAPI.Parameter.Columns -> Value
PrtgAPI.Parameter.Content -> Value
PrtgAPI.Parameter.Count -> Value
PrtgAPI.Parameter.Custom -> Value
PrtgAPI.Parameter.DeviceTemplate -> Value
PrtgAPI.Parameter.Duration -> Value
PrtgAPI.Parameter.EndDate -> Value
PrtgAPI.Parameter.FilterXyz -> Value
PrtgAPI.Parameter.Fold -> Value
PrtgAPI.Parameter.Host -> Value
PrtgAPI.Parameter.Id -> Value
PrtgAPI.Parameter.Kind -> Value
PrtgAPI.Parameter.Name -> Value
PrtgAPI.Parameter.NewPos -> Value
PrtgAPI.Parameter.NoSession -> Value
PrtgAPI.Parameter.ObjectType -> Value
PrtgAPI.Parameter.Output -> Value
PrtgAPI.Parameter.PassHash -> Value
PrtgAPI.Parameter.Password -> Value
PrtgAPI.Parameter.PauseMessage -> Value
PrtgAPI.Parameter.SensorType -> Value
PrtgAPI.Parameter.Service -> Value
PrtgAPI.Parameter.Show -> Value
PrtgAPI.Parameter.ShowHide -> Value
PrtgAPI.Parameter.SortBy -> Value
PrtgAPI.Parameter.Start -> Value
PrtgAPI.Parameter.StartDate -> Value
PrtgAPI.Parameter.SubId -> Value
PrtgAPI.Parameter.SubType -> Value
PrtgAPI.Parameter.TargetId -> Value
PrtgAPI.Parameter.Template -> Value
PrtgAPI.Parameter.TmpId -> Value
PrtgAPI.Parameter.UserName -> Value
PrtgAPI.Parameter.Value -> Value
PrtgAPI.Parameters.BaseParameters => Class
PrtgAPI.Parameters.BaseParameters Equals(object obj) -> bool
PrtgAPI.Parameters.BaseParameters GetHashCode() -> int
PrtgAPI.Parameters.BaseParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.BaseParameters GetType() -> Type
PrtgAPI.Parameters.BaseParameters Item { get; set; } -> object
PrtgAPI.Parameters.BaseParameters ToString() -> string
PrtgAPI.Parameters.ChangeTriggerParameters => Class
PrtgAPI.Parameters.ChangeTriggerParameters Action { get; } -> ModifyAction
PrtgAPI.Parameters.ChangeTriggerParameters Equals(object obj) -> bool
PrtgAPI.Parameters.ChangeTriggerParameters GetCustomParameterEnumInt<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.ChangeTriggerParameters GetCustomParameterEnumXml<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.ChangeTriggerParameters GetCustomParameterValue(TriggerProperty property) -> object
PrtgAPI.Parameters.ChangeTriggerParameters GetHashCode() -> int
PrtgAPI.Parameters.ChangeTriggerParameters GetNotificationAction(TriggerProperty actionType) -> NotificationAction
PrtgAPI.Parameters.ChangeTriggerParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.ChangeTriggerParameters GetType() -> Type
PrtgAPI.Parameters.ChangeTriggerParameters Item { get; set; } -> object
PrtgAPI.Parameters.ChangeTriggerParameters ObjectId { get; } -> int
PrtgAPI.Parameters.ChangeTriggerParameters OnNotificationAction { get; set; } -> NotificationAction
PrtgAPI.Parameters.ChangeTriggerParameters SetNotificationAction(TriggerProperty actionType, NotificationAction value) -> void
PrtgAPI.Parameters.ChangeTriggerParameters SubId { get; } -> int?
PrtgAPI.Parameters.ChangeTriggerParameters ToString() -> string
PrtgAPI.Parameters.ChangeTriggerParameters Type { get; } -> TriggerType
PrtgAPI.Parameters.ChangeTriggerParameters UpdateCustomParameter(TriggerProperty property, object value, bool requireValue = false) -> void
PrtgAPI.Parameters.ChannelParameter => Class
PrtgAPI.Parameters.ChannelParameter Equals(object obj) -> bool
PrtgAPI.Parameters.ChannelParameter GetHashCode() -> int
PrtgAPI.Parameters.ChannelParameter GetType() -> Type
PrtgAPI.Parameters.ChannelParameter Property { get; set; } -> ChannelProperty
PrtgAPI.Parameters.ChannelParameter ToString() -> string
PrtgAPI.Parameters.ChannelParameter Value { get; set; } -> object
PrtgAPI.Parameters.ContainerSensorParameters => Class
PrtgAPI.Parameters.ContainerSensorParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.ContainerSensorParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.ContainerSensorParameters DynamicType { get; set; } -> bool
PrtgAPI.Parameters.ContainerSensorParameters Equals(object obj) -> bool
PrtgAPI.Parameters.ContainerSensorParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.ContainerSensorParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.ContainerSensorParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.ContainerSensorParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.ContainerSensorParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.ContainerSensorParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.ContainerSensorParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.ContainerSensorParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.ContainerSensorParameters GetHashCode() -> int
PrtgAPI.Parameters.ContainerSensorParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.ContainerSensorParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.ContainerSensorParameters GetType() -> Type
PrtgAPI.Parameters.ContainerSensorParameters InheritInterval { get; set; } -> bool?
PrtgAPI.Parameters.ContainerSensorParameters InheritTriggers { get; set; } -> bool?
PrtgAPI.Parameters.ContainerSensorParameters Interval { get; set; } -> ScanningInterval
PrtgAPI.Parameters.ContainerSensorParameters IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.Parameters.ContainerSensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.ContainerSensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.ContainerSensorParameters Name { get; set; } -> string
PrtgAPI.Parameters.ContainerSensorParameters Priority { get; set; } -> Priority?
PrtgAPI.Parameters.ContainerSensorParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.ContainerSensorParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.ContainerSensorParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.ContainerSensorParameters SensorType { get; set; } -> string
PrtgAPI.Parameters.ContainerSensorParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.ContainerSensorParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.ContainerSensorParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.ContainerSensorParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.ContainerSensorParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.ContainerSensorParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.ContainerSensorParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.ContainerSensorParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.ContainerSensorParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.ContainerSensorParameters ToString() -> string
PrtgAPI.Parameters.ContentParameters<T> => Class
PrtgAPI.Parameters.ContentParameters<T> Content { get; } -> Content
PrtgAPI.Parameters.ContentParameters<T> Count { get; set; } -> int?
PrtgAPI.Parameters.ContentParameters<T> Equals(object obj) -> bool
PrtgAPI.Parameters.ContentParameters<T> GetHashCode() -> int
PrtgAPI.Parameters.ContentParameters<T> GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.ContentParameters<T> GetType() -> Type
PrtgAPI.Parameters.ContentParameters<T> Item { get; set; } -> object
PrtgAPI.Parameters.ContentParameters<T> Page { get; set; } -> int
PrtgAPI.Parameters.ContentParameters<T> PageSize { get; set; } -> int
PrtgAPI.Parameters.ContentParameters<T> Properties { get; } -> Property[]
PrtgAPI.Parameters.ContentParameters<T> SortBy { get; set; } -> Property?
PrtgAPI.Parameters.ContentParameters<T> SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.ContentParameters<T> Start { get; set; } -> int?
PrtgAPI.Parameters.ContentParameters<T> StartOffset { get; } -> int
PrtgAPI.Parameters.ContentParameters<T> ToString() -> string
PrtgAPI.Parameters.CustomParameter => Class
PrtgAPI.Parameters.CustomParameter Equals(object obj) -> bool
PrtgAPI.Parameters.CustomParameter GetHashCode() -> int
PrtgAPI.Parameters.CustomParameter GetType() -> Type
PrtgAPI.Parameters.CustomParameter Name { get; set; } -> string
PrtgAPI.Parameters.CustomParameter ParameterType { get; set; } -> ParameterType
PrtgAPI.Parameters.CustomParameter ToString() -> string
PrtgAPI.Parameters.CustomParameter Value { get; set; } -> object
PrtgAPI.Parameters.DeviceParameters => Class
PrtgAPI.Parameters.DeviceParameters AddFilters(params SearchFilter[] filters) -> void
PrtgAPI.Parameters.DeviceParameters Content { get; } -> Content
PrtgAPI.Parameters.DeviceParameters Count { get; set; } -> int?
PrtgAPI.Parameters.DeviceParameters Equals(object obj) -> bool
PrtgAPI.Parameters.DeviceParameters GetFilterValue(Property property) -> object
PrtgAPI.Parameters.DeviceParameters GetHashCode() -> int
PrtgAPI.Parameters.DeviceParameters GetMultiParameterFilterValue<TArray>(Property property) -> TArray[]
PrtgAPI.Parameters.DeviceParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.DeviceParameters GetType() -> Type
PrtgAPI.Parameters.DeviceParameters Item { get; set; } -> object
PrtgAPI.Parameters.DeviceParameters Page { get; set; } -> int
PrtgAPI.Parameters.DeviceParameters PageSize { get; set; } -> int
PrtgAPI.Parameters.DeviceParameters Properties { get; } -> Property[]
PrtgAPI.Parameters.DeviceParameters RemoveFilters(params SearchFilter[] filters) -> bool
PrtgAPI.Parameters.DeviceParameters SearchFilters { get; set; } -> List<SearchFilter>
PrtgAPI.Parameters.DeviceParameters SetFilterValue(Property property, object value) -> void
PrtgAPI.Parameters.DeviceParameters SetMultiParameterFilterValue<TArray>(Property property, TArray[] value) -> void
PrtgAPI.Parameters.DeviceParameters SortBy { get; set; } -> Property?
PrtgAPI.Parameters.DeviceParameters SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.DeviceParameters Start { get; set; } -> int?
PrtgAPI.Parameters.DeviceParameters StartOffset { get; } -> int
PrtgAPI.Parameters.DeviceParameters ToString() -> string
PrtgAPI.Parameters.DynamicSensorParameters => Class
PrtgAPI.Parameters.DynamicSensorParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.DynamicSensorParameters Contains(string name, bool ignoreUnderscore = true) -> bool
PrtgAPI.Parameters.DynamicSensorParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.DynamicSensorParameters DynamicType { get; set; } -> bool
PrtgAPI.Parameters.DynamicSensorParameters Equals(object obj) -> bool
PrtgAPI.Parameters.DynamicSensorParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.DynamicSensorParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.DynamicSensorParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.DynamicSensorParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.DynamicSensorParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.DynamicSensorParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.DynamicSensorParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.DynamicSensorParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.DynamicSensorParameters GetHashCode() -> int
PrtgAPI.Parameters.DynamicSensorParameters GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Parameters.DynamicSensorParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.DynamicSensorParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.DynamicSensorParameters GetType() -> Type
PrtgAPI.Parameters.DynamicSensorParameters InheritInterval { get; set; } -> bool?
PrtgAPI.Parameters.DynamicSensorParameters InheritTriggers { get; set; } -> bool?
PrtgAPI.Parameters.DynamicSensorParameters Interval { get; set; } -> ScanningInterval
PrtgAPI.Parameters.DynamicSensorParameters IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.Parameters.DynamicSensorParameters IsLocked() -> bool
PrtgAPI.Parameters.DynamicSensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.DynamicSensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.DynamicSensorParameters Lock() -> void
PrtgAPI.Parameters.DynamicSensorParameters Name { get; set; } -> string
PrtgAPI.Parameters.DynamicSensorParameters Priority { get; set; } -> Priority?
PrtgAPI.Parameters.DynamicSensorParameters Remove(string name, bool ignoreUnderscore = true) -> bool
PrtgAPI.Parameters.DynamicSensorParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.DynamicSensorParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.DynamicSensorParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.DynamicSensorParameters SensorType { get; set; } -> string
PrtgAPI.Parameters.DynamicSensorParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.DynamicSensorParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.DynamicSensorParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.DynamicSensorParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.DynamicSensorParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.DynamicSensorParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.DynamicSensorParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.DynamicSensorParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.DynamicSensorParameters Source { get; } -> Device
PrtgAPI.Parameters.DynamicSensorParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.DynamicSensorParameters Targets { get; } -> Dictionary<string,GenericSensorTarget[]>
PrtgAPI.Parameters.DynamicSensorParameters ToString() -> string
PrtgAPI.Parameters.DynamicSensorParameters Unlock() -> void
PrtgAPI.Parameters.ExeXmlSensorParameters => Class
PrtgAPI.Parameters.ExeXmlSensorParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.ExeXmlSensorParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.ExeXmlSensorParameters DebugMode { get; set; } -> DebugMode
PrtgAPI.Parameters.ExeXmlSensorParameters DynamicType { get; set; } -> bool
PrtgAPI.Parameters.ExeXmlSensorParameters Equals(object obj) -> bool
PrtgAPI.Parameters.ExeXmlSensorParameters ExeFile { get; set; } -> ExeFileTarget
PrtgAPI.Parameters.ExeXmlSensorParameters ExeParameters { get; set; } -> string
PrtgAPI.Parameters.ExeXmlSensorParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.ExeXmlSensorParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.ExeXmlSensorParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.ExeXmlSensorParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.ExeXmlSensorParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.ExeXmlSensorParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.ExeXmlSensorParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.ExeXmlSensorParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.ExeXmlSensorParameters GetHashCode() -> int
PrtgAPI.Parameters.ExeXmlSensorParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.ExeXmlSensorParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.ExeXmlSensorParameters GetType() -> Type
PrtgAPI.Parameters.ExeXmlSensorParameters InheritInterval { get; set; } -> bool?
PrtgAPI.Parameters.ExeXmlSensorParameters InheritTriggers { get; set; } -> bool?
PrtgAPI.Parameters.ExeXmlSensorParameters Interval { get; set; } -> ScanningInterval
PrtgAPI.Parameters.ExeXmlSensorParameters IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.Parameters.ExeXmlSensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.ExeXmlSensorParameters Mutex { get; set; } -> string
PrtgAPI.Parameters.ExeXmlSensorParameters Name { get; set; } -> string
PrtgAPI.Parameters.ExeXmlSensorParameters Priority { get; set; } -> Priority?
PrtgAPI.Parameters.ExeXmlSensorParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.ExeXmlSensorParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.ExeXmlSensorParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.ExeXmlSensorParameters SensorType { get; set; } -> SensorType
PrtgAPI.Parameters.ExeXmlSensorParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.ExeXmlSensorParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.ExeXmlSensorParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.ExeXmlSensorParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.ExeXmlSensorParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.ExeXmlSensorParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.ExeXmlSensorParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.ExeXmlSensorParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.ExeXmlSensorParameters SetExeEnvironmentVariables { get; set; } -> bool
PrtgAPI.Parameters.ExeXmlSensorParameters Source { get; } -> Device
PrtgAPI.Parameters.ExeXmlSensorParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.ExeXmlSensorParameters Timeout { get; set; } -> int
PrtgAPI.Parameters.ExeXmlSensorParameters ToString() -> string
PrtgAPI.Parameters.ExeXmlSensorParameters UseWindowsAuthentication { get; set; } -> bool
PrtgAPI.Parameters.FactorySensorParameters => Class
PrtgAPI.Parameters.FactorySensorParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.FactorySensorParameters ChannelDefinition { get; set; } -> string[]
PrtgAPI.Parameters.FactorySensorParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.FactorySensorParameters DynamicType { get; set; } -> bool
PrtgAPI.Parameters.FactorySensorParameters Equals(object obj) -> bool
PrtgAPI.Parameters.FactorySensorParameters FactoryErrorFormula { get; set; } -> string
PrtgAPI.Parameters.FactorySensorParameters FactoryErrorMode { get; set; } -> FactoryErrorMode
PrtgAPI.Parameters.FactorySensorParameters FactoryMissingDataMode { get; set; } -> FactoryMissingDataMode
PrtgAPI.Parameters.FactorySensorParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.FactorySensorParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.FactorySensorParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.FactorySensorParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.FactorySensorParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.FactorySensorParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.FactorySensorParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.FactorySensorParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.FactorySensorParameters GetHashCode() -> int
PrtgAPI.Parameters.FactorySensorParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.FactorySensorParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.FactorySensorParameters GetType() -> Type
PrtgAPI.Parameters.FactorySensorParameters InheritInterval { get; set; } -> bool?
PrtgAPI.Parameters.FactorySensorParameters InheritTriggers { get; set; } -> bool?
PrtgAPI.Parameters.FactorySensorParameters Interval { get; set; } -> ScanningInterval
PrtgAPI.Parameters.FactorySensorParameters IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.Parameters.FactorySensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.FactorySensorParameters Name { get; set; } -> string
PrtgAPI.Parameters.FactorySensorParameters Priority { get; set; } -> Priority?
PrtgAPI.Parameters.FactorySensorParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.FactorySensorParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.FactorySensorParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.FactorySensorParameters SensorType { get; set; } -> SensorType
PrtgAPI.Parameters.FactorySensorParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.FactorySensorParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.FactorySensorParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.FactorySensorParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.FactorySensorParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.FactorySensorParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.FactorySensorParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.FactorySensorParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.FactorySensorParameters Source { get; } -> Device
PrtgAPI.Parameters.FactorySensorParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.FactorySensorParameters ToString() -> string
PrtgAPI.Parameters.GroupParameters => Class
PrtgAPI.Parameters.GroupParameters AddFilters(params SearchFilter[] filters) -> void
PrtgAPI.Parameters.GroupParameters Content { get; } -> Content
PrtgAPI.Parameters.GroupParameters Count { get; set; } -> int?
PrtgAPI.Parameters.GroupParameters Equals(object obj) -> bool
PrtgAPI.Parameters.GroupParameters GetFilterValue(Property property) -> object
PrtgAPI.Parameters.GroupParameters GetHashCode() -> int
PrtgAPI.Parameters.GroupParameters GetMultiParameterFilterValue<TArray>(Property property) -> TArray[]
PrtgAPI.Parameters.GroupParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.GroupParameters GetType() -> Type
PrtgAPI.Parameters.GroupParameters Item { get; set; } -> object
PrtgAPI.Parameters.GroupParameters Page { get; set; } -> int
PrtgAPI.Parameters.GroupParameters PageSize { get; set; } -> int
PrtgAPI.Parameters.GroupParameters Properties { get; } -> Property[]
PrtgAPI.Parameters.GroupParameters RemoveFilters(params SearchFilter[] filters) -> bool
PrtgAPI.Parameters.GroupParameters SearchFilters { get; set; } -> List<SearchFilter>
PrtgAPI.Parameters.GroupParameters SetFilterValue(Property property, object value) -> void
PrtgAPI.Parameters.GroupParameters SetMultiParameterFilterValue<TArray>(Property property, TArray[] value) -> void
PrtgAPI.Parameters.GroupParameters SortBy { get; set; } -> Property?
PrtgAPI.Parameters.GroupParameters SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.GroupParameters Start { get; set; } -> int?
PrtgAPI.Parameters.GroupParameters StartOffset { get; } -> int
PrtgAPI.Parameters.GroupParameters ToString() -> string
PrtgAPI.Parameters.HttpSensorParameters => Class
PrtgAPI.Parameters.HttpSensorParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.HttpSensorParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.HttpSensorParameters DynamicType { get; set; } -> bool
PrtgAPI.Parameters.HttpSensorParameters Equals(object obj) -> bool
PrtgAPI.Parameters.HttpSensorParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.HttpSensorParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.HttpSensorParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.HttpSensorParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.HttpSensorParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.HttpSensorParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.HttpSensorParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.HttpSensorParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.HttpSensorParameters GetHashCode() -> int
PrtgAPI.Parameters.HttpSensorParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.HttpSensorParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.HttpSensorParameters GetType() -> Type
PrtgAPI.Parameters.HttpSensorParameters HttpRequestMethod { get; set; } -> HttpRequestMethod
PrtgAPI.Parameters.HttpSensorParameters InheritInterval { get; set; } -> bool?
PrtgAPI.Parameters.HttpSensorParameters InheritTriggers { get; set; } -> bool?
PrtgAPI.Parameters.HttpSensorParameters Interval { get; set; } -> ScanningInterval
PrtgAPI.Parameters.HttpSensorParameters IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.Parameters.HttpSensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.HttpSensorParameters Name { get; set; } -> string
PrtgAPI.Parameters.HttpSensorParameters PostContentType { get; set; } -> string
PrtgAPI.Parameters.HttpSensorParameters PostData { get; set; } -> string
PrtgAPI.Parameters.HttpSensorParameters Priority { get; set; } -> Priority?
PrtgAPI.Parameters.HttpSensorParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.HttpSensorParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.HttpSensorParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.HttpSensorParameters SensorType { get; set; } -> SensorType
PrtgAPI.Parameters.HttpSensorParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.HttpSensorParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.HttpSensorParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.HttpSensorParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.HttpSensorParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.HttpSensorParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.HttpSensorParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.HttpSensorParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.HttpSensorParameters Source { get; } -> Device
PrtgAPI.Parameters.HttpSensorParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.HttpSensorParameters Timeout { get; set; } -> int
PrtgAPI.Parameters.HttpSensorParameters ToString() -> string
PrtgAPI.Parameters.HttpSensorParameters Url { get; set; } -> string
PrtgAPI.Parameters.HttpSensorParameters UseCustomPostContent { get; set; } -> bool
PrtgAPI.Parameters.HttpSensorParameters UseSNIFromUrl { get; set; } -> bool
PrtgAPI.Parameters.IParameters => Interface
PrtgAPI.Parameters.IParameters Cookie { get; } -> bool
PrtgAPI.Parameters.IParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.IParameters Item { get; set; } -> object
PrtgAPI.Parameters.ISensorQueryTargetParameters => Interface
PrtgAPI.Parameters.ISensorQueryTargetParameters ToMultiQueryParameters() -> SensorMultiQueryTargetParameters
PrtgAPI.Parameters.LogParameters => Class
PrtgAPI.Parameters.LogParameters AddFilters(params SearchFilter[] filters) -> void
PrtgAPI.Parameters.LogParameters Content { get; } -> Content
PrtgAPI.Parameters.LogParameters Count { get; set; } -> int?
PrtgAPI.Parameters.LogParameters EndDate { get; set; } -> DateTime?
PrtgAPI.Parameters.LogParameters Equals(object obj) -> bool
PrtgAPI.Parameters.LogParameters GetFilterValue(Property property) -> object
PrtgAPI.Parameters.LogParameters GetHashCode() -> int
PrtgAPI.Parameters.LogParameters GetMultiParameterFilterValue<TArray>(Property property) -> TArray[]
PrtgAPI.Parameters.LogParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.LogParameters GetType() -> Type
PrtgAPI.Parameters.LogParameters Item { get; set; } -> object
PrtgAPI.Parameters.LogParameters ObjectId { get; set; } -> int?
PrtgAPI.Parameters.LogParameters Page { get; set; } -> int
PrtgAPI.Parameters.LogParameters PageSize { get; set; } -> int
PrtgAPI.Parameters.LogParameters Properties { get; } -> Property[]
PrtgAPI.Parameters.LogParameters RecordAge { get; set; } -> RecordAge?
PrtgAPI.Parameters.LogParameters RemoveFilters(params SearchFilter[] filters) -> bool
PrtgAPI.Parameters.LogParameters SearchFilters { get; set; } -> List<SearchFilter>
PrtgAPI.Parameters.LogParameters SetFilterValue(Property property, object value) -> void
PrtgAPI.Parameters.LogParameters SetMultiParameterFilterValue<TArray>(Property property, TArray[] value) -> void
PrtgAPI.Parameters.LogParameters SortBy { get; set; } -> Property?
PrtgAPI.Parameters.LogParameters SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.LogParameters Start { get; set; } -> int?
PrtgAPI.Parameters.LogParameters StartDate { get; set; } -> DateTime?
PrtgAPI.Parameters.LogParameters StartOffset { get; } -> int
PrtgAPI.Parameters.LogParameters Status { get; set; } -> LogStatus[]
PrtgAPI.Parameters.LogParameters ToString() -> string
PrtgAPI.Parameters.NewDeviceParameters => Class
PrtgAPI.Parameters.NewDeviceParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.NewDeviceParameters AutoDiscoveryMode { get; set; } -> AutoDiscoveryMode
PrtgAPI.Parameters.NewDeviceParameters AutoDiscoverySchedule { get; set; } -> AutoDiscoverySchedule
PrtgAPI.Parameters.NewDeviceParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewDeviceParameters DeviceTemplates { get; set; } -> List<DeviceTemplate>
PrtgAPI.Parameters.NewDeviceParameters Equals(object obj) -> bool
PrtgAPI.Parameters.NewDeviceParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.NewDeviceParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.NewDeviceParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.NewDeviceParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.NewDeviceParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.NewDeviceParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.NewDeviceParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.NewDeviceParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.NewDeviceParameters GetHashCode() -> int
PrtgAPI.Parameters.NewDeviceParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.NewDeviceParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.NewDeviceParameters GetType() -> Type
PrtgAPI.Parameters.NewDeviceParameters Host { get; set; } -> string
PrtgAPI.Parameters.NewDeviceParameters IPVersion { get; set; } -> IPVersion
PrtgAPI.Parameters.NewDeviceParameters Item { get; set; } -> object
PrtgAPI.Parameters.NewDeviceParameters Name { get; set; } -> string
PrtgAPI.Parameters.NewDeviceParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewDeviceParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.NewDeviceParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewDeviceParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.NewDeviceParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.NewDeviceParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.NewDeviceParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.NewDeviceParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.NewDeviceParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.NewDeviceParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.NewDeviceParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.NewDeviceParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.NewDeviceParameters ToString() -> string
PrtgAPI.Parameters.NewGroupParameters => Class
PrtgAPI.Parameters.NewGroupParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.NewGroupParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewGroupParameters Equals(object obj) -> bool
PrtgAPI.Parameters.NewGroupParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.NewGroupParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.NewGroupParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.NewGroupParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.NewGroupParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.NewGroupParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.NewGroupParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.NewGroupParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.NewGroupParameters GetHashCode() -> int
PrtgAPI.Parameters.NewGroupParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.NewGroupParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.NewGroupParameters GetType() -> Type
PrtgAPI.Parameters.NewGroupParameters Item { get; set; } -> object
PrtgAPI.Parameters.NewGroupParameters Name { get; set; } -> string
PrtgAPI.Parameters.NewGroupParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewGroupParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.NewGroupParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewGroupParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.NewGroupParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.NewGroupParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.NewGroupParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.NewGroupParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.NewGroupParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.NewGroupParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.NewGroupParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.NewGroupParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.NewGroupParameters ToString() -> string
PrtgAPI.Parameters.NewObjectParameters => Class
PrtgAPI.Parameters.NewObjectParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.NewObjectParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewObjectParameters Equals(object obj) -> bool
PrtgAPI.Parameters.NewObjectParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.NewObjectParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.NewObjectParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.NewObjectParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.NewObjectParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.NewObjectParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.NewObjectParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.NewObjectParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.NewObjectParameters GetHashCode() -> int
PrtgAPI.Parameters.NewObjectParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.NewObjectParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.NewObjectParameters GetType() -> Type
PrtgAPI.Parameters.NewObjectParameters Item { get; set; } -> object
PrtgAPI.Parameters.NewObjectParameters Name { get; set; } -> string
PrtgAPI.Parameters.NewObjectParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewObjectParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.NewObjectParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewObjectParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.NewObjectParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.NewObjectParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.NewObjectParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.NewObjectParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.NewObjectParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.NewObjectParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.NewObjectParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.NewObjectParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.NewObjectParameters ToString() -> string
PrtgAPI.Parameters.NewSensorParameters => Class
PrtgAPI.Parameters.NewSensorParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.NewSensorParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewSensorParameters DynamicType { get; set; } -> bool
PrtgAPI.Parameters.NewSensorParameters Equals(object obj) -> bool
PrtgAPI.Parameters.NewSensorParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.NewSensorParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.NewSensorParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.NewSensorParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.NewSensorParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.NewSensorParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.NewSensorParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.NewSensorParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.NewSensorParameters GetHashCode() -> int
PrtgAPI.Parameters.NewSensorParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.NewSensorParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.NewSensorParameters GetType() -> Type
PrtgAPI.Parameters.NewSensorParameters InheritInterval { get; set; } -> bool?
PrtgAPI.Parameters.NewSensorParameters InheritTriggers { get; set; } -> bool?
PrtgAPI.Parameters.NewSensorParameters Interval { get; set; } -> ScanningInterval
PrtgAPI.Parameters.NewSensorParameters IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.Parameters.NewSensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.NewSensorParameters Name { get; set; } -> string
PrtgAPI.Parameters.NewSensorParameters Priority { get; set; } -> Priority?
PrtgAPI.Parameters.NewSensorParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewSensorParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.NewSensorParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.NewSensorParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.NewSensorParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.NewSensorParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.NewSensorParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.NewSensorParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.NewSensorParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.NewSensorParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.NewSensorParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.NewSensorParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.NewSensorParameters ToString() -> string
PrtgAPI.Parameters.NotificationActionParameters => Class
PrtgAPI.Parameters.NotificationActionParameters AddFilters(params SearchFilter[] filters) -> void
PrtgAPI.Parameters.NotificationActionParameters Content { get; } -> Content
PrtgAPI.Parameters.NotificationActionParameters Count { get; set; } -> int?
PrtgAPI.Parameters.NotificationActionParameters Equals(object obj) -> bool
PrtgAPI.Parameters.NotificationActionParameters GetFilterValue(Property property) -> object
PrtgAPI.Parameters.NotificationActionParameters GetHashCode() -> int
PrtgAPI.Parameters.NotificationActionParameters GetMultiParameterFilterValue<TArray>(Property property) -> TArray[]
PrtgAPI.Parameters.NotificationActionParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.NotificationActionParameters GetType() -> Type
PrtgAPI.Parameters.NotificationActionParameters Item { get; set; } -> object
PrtgAPI.Parameters.NotificationActionParameters Page { get; set; } -> int
PrtgAPI.Parameters.NotificationActionParameters PageSize { get; set; } -> int
PrtgAPI.Parameters.NotificationActionParameters Properties { get; } -> Property[]
PrtgAPI.Parameters.NotificationActionParameters RemoveFilters(params SearchFilter[] filters) -> bool
PrtgAPI.Parameters.NotificationActionParameters SearchFilters { get; set; } -> List<SearchFilter>
PrtgAPI.Parameters.NotificationActionParameters SetFilterValue(Property property, object value) -> void
PrtgAPI.Parameters.NotificationActionParameters SetMultiParameterFilterValue<TArray>(Property property, TArray[] value) -> void
PrtgAPI.Parameters.NotificationActionParameters SortBy { get; set; } -> Property?
PrtgAPI.Parameters.NotificationActionParameters SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.NotificationActionParameters Start { get; set; } -> int?
PrtgAPI.Parameters.NotificationActionParameters StartOffset { get; } -> int
PrtgAPI.Parameters.NotificationActionParameters ToString() -> string
PrtgAPI.Parameters.PageableParameters => Class
PrtgAPI.Parameters.PageableParameters Count { get; set; } -> int?
PrtgAPI.Parameters.PageableParameters DefaultPageSize -> int
PrtgAPI.Parameters.PageableParameters Equals(object obj) -> bool
PrtgAPI.Parameters.PageableParameters GetHashCode() -> int
PrtgAPI.Parameters.PageableParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.PageableParameters GetType() -> Type
PrtgAPI.Parameters.PageableParameters Item { get; set; } -> object
PrtgAPI.Parameters.PageableParameters Page { get; set; } -> int
PrtgAPI.Parameters.PageableParameters PageSize { get; set; } -> int
PrtgAPI.Parameters.PageableParameters SortBy { get; set; } -> Property?
PrtgAPI.Parameters.PageableParameters SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.PageableParameters Start { get; set; } -> int?
PrtgAPI.Parameters.PageableParameters StartOffset { get; } -> int
PrtgAPI.Parameters.PageableParameters ToString() -> string
PrtgAPI.Parameters.ProbeParameters => Class
PrtgAPI.Parameters.ProbeParameters AddFilters(params SearchFilter[] filters) -> void
PrtgAPI.Parameters.ProbeParameters Content { get; } -> Content
PrtgAPI.Parameters.ProbeParameters Count { get; set; } -> int?
PrtgAPI.Parameters.ProbeParameters Equals(object obj) -> bool
PrtgAPI.Parameters.ProbeParameters GetFilterValue(Property property) -> object
PrtgAPI.Parameters.ProbeParameters GetHashCode() -> int
PrtgAPI.Parameters.ProbeParameters GetMultiParameterFilterValue<TArray>(Property property) -> TArray[]
PrtgAPI.Parameters.ProbeParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.ProbeParameters GetType() -> Type
PrtgAPI.Parameters.ProbeParameters Item { get; set; } -> object
PrtgAPI.Parameters.ProbeParameters Page { get; set; } -> int
PrtgAPI.Parameters.ProbeParameters PageSize { get; set; } -> int
PrtgAPI.Parameters.ProbeParameters Properties { get; } -> Property[]
PrtgAPI.Parameters.ProbeParameters RemoveFilters(params SearchFilter[] filters) -> bool
PrtgAPI.Parameters.ProbeParameters SearchFilters { get; set; } -> List<SearchFilter>
PrtgAPI.Parameters.ProbeParameters SetFilterValue(Property property, object value) -> void
PrtgAPI.Parameters.ProbeParameters SetMultiParameterFilterValue<TArray>(Property property, TArray[] value) -> void
PrtgAPI.Parameters.ProbeParameters SortBy { get; set; } -> Property?
PrtgAPI.Parameters.ProbeParameters SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.ProbeParameters Start { get; set; } -> int?
PrtgAPI.Parameters.ProbeParameters StartOffset { get; } -> int
PrtgAPI.Parameters.ProbeParameters ToString() -> string
PrtgAPI.Parameters.PropertyParameter => Class
PrtgAPI.Parameters.PropertyParameter Equals(object obj) -> bool
PrtgAPI.Parameters.PropertyParameter GetHashCode() -> int
PrtgAPI.Parameters.PropertyParameter GetType() -> Type
PrtgAPI.Parameters.PropertyParameter Property { get; set; } -> ObjectProperty
PrtgAPI.Parameters.PropertyParameter ToString() -> string
PrtgAPI.Parameters.PropertyParameter Value { get; set; } -> object
PrtgAPI.Parameters.PropertyParameter<T> => Class
PrtgAPI.Parameters.PropertyParameter<T> Equals(object obj) -> bool
PrtgAPI.Parameters.PropertyParameter<T> GetHashCode() -> int
PrtgAPI.Parameters.PropertyParameter<T> GetType() -> Type
PrtgAPI.Parameters.PropertyParameter<T> Property { get; set; } -> T
PrtgAPI.Parameters.PropertyParameter<T> ToString() -> string
PrtgAPI.Parameters.PropertyParameter<T> Value { get; set; } -> object
PrtgAPI.Parameters.PrtgObjectParameters => Class
PrtgAPI.Parameters.PrtgObjectParameters AddFilters(params SearchFilter[] filters) -> void
PrtgAPI.Parameters.PrtgObjectParameters Content { get; } -> Content
PrtgAPI.Parameters.PrtgObjectParameters Count { get; set; } -> int?
PrtgAPI.Parameters.PrtgObjectParameters Equals(object obj) -> bool
PrtgAPI.Parameters.PrtgObjectParameters GetFilterValue(Property property) -> object
PrtgAPI.Parameters.PrtgObjectParameters GetHashCode() -> int
PrtgAPI.Parameters.PrtgObjectParameters GetMultiParameterFilterValue<TArray>(Property property) -> TArray[]
PrtgAPI.Parameters.PrtgObjectParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.PrtgObjectParameters GetType() -> Type
PrtgAPI.Parameters.PrtgObjectParameters Item { get; set; } -> object
PrtgAPI.Parameters.PrtgObjectParameters Page { get; set; } -> int
PrtgAPI.Parameters.PrtgObjectParameters PageSize { get; set; } -> int
PrtgAPI.Parameters.PrtgObjectParameters Properties { get; } -> Property[]
PrtgAPI.Parameters.PrtgObjectParameters RemoveFilters(params SearchFilter[] filters) -> bool
PrtgAPI.Parameters.PrtgObjectParameters SearchFilters { get; set; } -> List<SearchFilter>
PrtgAPI.Parameters.PrtgObjectParameters SetFilterValue(Property property, object value) -> void
PrtgAPI.Parameters.PrtgObjectParameters SetMultiParameterFilterValue<TArray>(Property property, TArray[] value) -> void
PrtgAPI.Parameters.PrtgObjectParameters SortBy { get; set; } -> Property?
PrtgAPI.Parameters.PrtgObjectParameters SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.PrtgObjectParameters Start { get; set; } -> int?
PrtgAPI.Parameters.PrtgObjectParameters StartOffset { get; } -> int
PrtgAPI.Parameters.PrtgObjectParameters ToString() -> string
PrtgAPI.Parameters.RawSensorParameters => Class
PrtgAPI.Parameters.RawSensorParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.RawSensorParameters Contains(string name) -> bool
PrtgAPI.Parameters.RawSensorParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.RawSensorParameters DynamicType { get; set; } -> bool
PrtgAPI.Parameters.RawSensorParameters Equals(object obj) -> bool
PrtgAPI.Parameters.RawSensorParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.RawSensorParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.RawSensorParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.RawSensorParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.RawSensorParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.RawSensorParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.RawSensorParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.RawSensorParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.RawSensorParameters GetHashCode() -> int
PrtgAPI.Parameters.RawSensorParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.RawSensorParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.RawSensorParameters GetType() -> Type
PrtgAPI.Parameters.RawSensorParameters InheritInterval { get; set; } -> bool?
PrtgAPI.Parameters.RawSensorParameters InheritTriggers { get; set; } -> bool?
PrtgAPI.Parameters.RawSensorParameters Interval { get; set; } -> ScanningInterval
PrtgAPI.Parameters.RawSensorParameters IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.Parameters.RawSensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.RawSensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.RawSensorParameters Name { get; set; } -> string
PrtgAPI.Parameters.RawSensorParameters Parameters { get; set; } -> List<CustomParameter>
PrtgAPI.Parameters.RawSensorParameters Priority { get; set; } -> Priority?
PrtgAPI.Parameters.RawSensorParameters Remove(string name) -> bool
PrtgAPI.Parameters.RawSensorParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.RawSensorParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.RawSensorParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.RawSensorParameters SensorType { get; set; } -> string
PrtgAPI.Parameters.RawSensorParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.RawSensorParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.RawSensorParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.RawSensorParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.RawSensorParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.RawSensorParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.RawSensorParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.RawSensorParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.RawSensorParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.RawSensorParameters ToString() -> string
PrtgAPI.Parameters.ScheduleParameters => Class
PrtgAPI.Parameters.ScheduleParameters AddFilters(params SearchFilter[] filters) -> void
PrtgAPI.Parameters.ScheduleParameters Content { get; } -> Content
PrtgAPI.Parameters.ScheduleParameters Count { get; set; } -> int?
PrtgAPI.Parameters.ScheduleParameters Equals(object obj) -> bool
PrtgAPI.Parameters.ScheduleParameters GetFilterValue(Property property) -> object
PrtgAPI.Parameters.ScheduleParameters GetHashCode() -> int
PrtgAPI.Parameters.ScheduleParameters GetMultiParameterFilterValue<TArray>(Property property) -> TArray[]
PrtgAPI.Parameters.ScheduleParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.ScheduleParameters GetType() -> Type
PrtgAPI.Parameters.ScheduleParameters Item { get; set; } -> object
PrtgAPI.Parameters.ScheduleParameters Page { get; set; } -> int
PrtgAPI.Parameters.ScheduleParameters PageSize { get; set; } -> int
PrtgAPI.Parameters.ScheduleParameters Properties { get; } -> Property[]
PrtgAPI.Parameters.ScheduleParameters RemoveFilters(params SearchFilter[] filters) -> bool
PrtgAPI.Parameters.ScheduleParameters SearchFilters { get; set; } -> List<SearchFilter>
PrtgAPI.Parameters.ScheduleParameters SetFilterValue(Property property, object value) -> void
PrtgAPI.Parameters.ScheduleParameters SetMultiParameterFilterValue<TArray>(Property property, TArray[] value) -> void
PrtgAPI.Parameters.ScheduleParameters SortBy { get; set; } -> Property?
PrtgAPI.Parameters.ScheduleParameters SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.ScheduleParameters Start { get; set; } -> int?
PrtgAPI.Parameters.ScheduleParameters StartOffset { get; } -> int
PrtgAPI.Parameters.ScheduleParameters ToString() -> string
PrtgAPI.Parameters.SensorMultiQueryTargetParameters => Class
PrtgAPI.Parameters.SensorMultiQueryTargetParameters Equals(object obj) -> bool
PrtgAPI.Parameters.SensorMultiQueryTargetParameters GetHashCode() -> int
PrtgAPI.Parameters.SensorMultiQueryTargetParameters GetType() -> Type
PrtgAPI.Parameters.SensorMultiQueryTargetParameters Parameters { get; set; } -> SensorQueryTargetParameters
PrtgAPI.Parameters.SensorMultiQueryTargetParameters QueryTarget { get; set; } -> SensorQueryTarget
PrtgAPI.Parameters.SensorMultiQueryTargetParameters ToString() -> string
PrtgAPI.Parameters.SensorParameters => Class
PrtgAPI.Parameters.SensorParameters AddFilters(params SearchFilter[] filters) -> void
PrtgAPI.Parameters.SensorParameters Content { get; } -> Content
PrtgAPI.Parameters.SensorParameters Count { get; set; } -> int?
PrtgAPI.Parameters.SensorParameters Equals(object obj) -> bool
PrtgAPI.Parameters.SensorParameters GetFilterValue(Property property) -> object
PrtgAPI.Parameters.SensorParameters GetHashCode() -> int
PrtgAPI.Parameters.SensorParameters GetMultiParameterFilterValue<TArray>(Property property) -> TArray[]
PrtgAPI.Parameters.SensorParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.SensorParameters GetType() -> Type
PrtgAPI.Parameters.SensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.SensorParameters Page { get; set; } -> int
PrtgAPI.Parameters.SensorParameters PageSize { get; set; } -> int
PrtgAPI.Parameters.SensorParameters Properties { get; } -> Property[]
PrtgAPI.Parameters.SensorParameters RemoveFilters(params SearchFilter[] filters) -> bool
PrtgAPI.Parameters.SensorParameters SearchFilters { get; set; } -> List<SearchFilter>
PrtgAPI.Parameters.SensorParameters SetFilterValue(Property property, object value) -> void
PrtgAPI.Parameters.SensorParameters SetMultiParameterFilterValue<TArray>(Property property, TArray[] value) -> void
PrtgAPI.Parameters.SensorParameters SortBy { get; set; } -> Property?
PrtgAPI.Parameters.SensorParameters SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.SensorParameters Start { get; set; } -> int?
PrtgAPI.Parameters.SensorParameters StartOffset { get; } -> int
PrtgAPI.Parameters.SensorParameters Status { get; set; } -> Status[]
PrtgAPI.Parameters.SensorParameters ToString() -> string
PrtgAPI.Parameters.SensorParametersInternal => Class
PrtgAPI.Parameters.SensorParametersInternal AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.SensorParametersInternal ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.SensorParametersInternal DynamicType { get; set; } -> bool
PrtgAPI.Parameters.SensorParametersInternal Equals(object obj) -> bool
PrtgAPI.Parameters.SensorParametersInternal GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.SensorParametersInternal GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.SensorParametersInternal GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.SensorParametersInternal GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.SensorParametersInternal GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.SensorParametersInternal GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.SensorParametersInternal GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.SensorParametersInternal GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.SensorParametersInternal GetHashCode() -> int
PrtgAPI.Parameters.SensorParametersInternal GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.SensorParametersInternal GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.SensorParametersInternal GetType() -> Type
PrtgAPI.Parameters.SensorParametersInternal InheritInterval { get; set; } -> bool?
PrtgAPI.Parameters.SensorParametersInternal InheritTriggers { get; set; } -> bool?
PrtgAPI.Parameters.SensorParametersInternal Interval { get; set; } -> ScanningInterval
PrtgAPI.Parameters.SensorParametersInternal IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.Parameters.SensorParametersInternal Item { get; set; } -> object
PrtgAPI.Parameters.SensorParametersInternal Name { get; set; } -> string
PrtgAPI.Parameters.SensorParametersInternal Priority { get; set; } -> Priority?
PrtgAPI.Parameters.SensorParametersInternal RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.SensorParametersInternal RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.SensorParametersInternal RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.SensorParametersInternal SensorType { get; set; } -> SensorType
PrtgAPI.Parameters.SensorParametersInternal SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.SensorParametersInternal SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.SensorParametersInternal SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.SensorParametersInternal SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.SensorParametersInternal SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.SensorParametersInternal SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.SensorParametersInternal SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.SensorParametersInternal SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.SensorParametersInternal Source { get; } -> Device
PrtgAPI.Parameters.SensorParametersInternal Tags { get; set; } -> string[]
PrtgAPI.Parameters.SensorParametersInternal ToString() -> string
PrtgAPI.Parameters.SensorQueryTargetParameters => Class
PrtgAPI.Parameters.SensorQueryTargetParameters Add(string key, object value) -> void
PrtgAPI.Parameters.SensorQueryTargetParameters Clear() -> void
PrtgAPI.Parameters.SensorQueryTargetParameters Comparer { get; } -> IEqualityComparer<string>
PrtgAPI.Parameters.SensorQueryTargetParameters ContainsKey(string key) -> bool
PrtgAPI.Parameters.SensorQueryTargetParameters ContainsValue(object value) -> bool
PrtgAPI.Parameters.SensorQueryTargetParameters Count { get; } -> int
PrtgAPI.Parameters.SensorQueryTargetParameters Equals(object obj) -> bool
PrtgAPI.Parameters.SensorQueryTargetParameters GetEnumerator() -> Enumerator<string,object>
PrtgAPI.Parameters.SensorQueryTargetParameters GetHashCode() -> int
PrtgAPI.Parameters.SensorQueryTargetParameters GetObjectData(SerializationInfo info, StreamingContext context) -> void
PrtgAPI.Parameters.SensorQueryTargetParameters GetType() -> Type
PrtgAPI.Parameters.SensorQueryTargetParameters Item { get; set; } -> object
PrtgAPI.Parameters.SensorQueryTargetParameters Keys { get; } -> KeyCollection<string,object>
PrtgAPI.Parameters.SensorQueryTargetParameters OnDeserialization(object sender) -> void
PrtgAPI.Parameters.SensorQueryTargetParameters Remove(string key) -> bool
PrtgAPI.Parameters.SensorQueryTargetParameters ToString() -> string
PrtgAPI.Parameters.SensorQueryTargetParameters TryGetValue(string key, Object& value) -> bool
PrtgAPI.Parameters.SensorQueryTargetParameters Values { get; } -> ValueCollection<string,object>
PrtgAPI.Parameters.SpeedTriggerParameters => Class
PrtgAPI.Parameters.SpeedTriggerParameters Action { get; } -> ModifyAction
PrtgAPI.Parameters.SpeedTriggerParameters Channel { get; set; } -> TriggerChannel
PrtgAPI.Parameters.SpeedTriggerParameters Condition { get; set; } -> TriggerCondition?
PrtgAPI.Parameters.SpeedTriggerParameters Equals(object obj) -> bool
PrtgAPI.Parameters.SpeedTriggerParameters GetCustomParameterEnumInt<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.SpeedTriggerParameters GetCustomParameterEnumXml<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.SpeedTriggerParameters GetCustomParameterValue(TriggerProperty property) -> object
PrtgAPI.Parameters.SpeedTriggerParameters GetHashCode() -> int
PrtgAPI.Parameters.SpeedTriggerParameters GetNotificationAction(TriggerProperty actionType) -> NotificationAction
PrtgAPI.Parameters.SpeedTriggerParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.SpeedTriggerParameters GetType() -> Type
PrtgAPI.Parameters.SpeedTriggerParameters Item { get; set; } -> object
PrtgAPI.Parameters.SpeedTriggerParameters Latency { get; set; } -> int?
PrtgAPI.Parameters.SpeedTriggerParameters ObjectId { get; } -> int
PrtgAPI.Parameters.SpeedTriggerParameters OffNotificationAction { get; set; } -> NotificationAction
PrtgAPI.Parameters.SpeedTriggerParameters OnNotificationAction { get; set; } -> NotificationAction
PrtgAPI.Parameters.SpeedTriggerParameters SetNotificationAction(TriggerProperty actionType, NotificationAction value) -> void
PrtgAPI.Parameters.SpeedTriggerParameters SubId { get; } -> int?
PrtgAPI.Parameters.SpeedTriggerParameters Threshold { get; set; } -> double?
PrtgAPI.Parameters.SpeedTriggerParameters ToString() -> string
PrtgAPI.Parameters.SpeedTriggerParameters Type { get; } -> TriggerType
PrtgAPI.Parameters.SpeedTriggerParameters UnitSize { get; set; } -> DataUnit?
PrtgAPI.Parameters.SpeedTriggerParameters UnitTime { get; set; } -> TimeUnit?
PrtgAPI.Parameters.SpeedTriggerParameters UpdateCustomParameter(TriggerProperty property, object value, bool requireValue = false) -> void
PrtgAPI.Parameters.StateTriggerParameters => Class
PrtgAPI.Parameters.StateTriggerParameters Action { get; } -> ModifyAction
PrtgAPI.Parameters.StateTriggerParameters Equals(object obj) -> bool
PrtgAPI.Parameters.StateTriggerParameters EscalationLatency { get; set; } -> int?
PrtgAPI.Parameters.StateTriggerParameters EscalationNotificationAction { get; set; } -> NotificationAction
PrtgAPI.Parameters.StateTriggerParameters GetCustomParameterEnumInt<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.StateTriggerParameters GetCustomParameterEnumXml<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.StateTriggerParameters GetCustomParameterValue(TriggerProperty property) -> object
PrtgAPI.Parameters.StateTriggerParameters GetHashCode() -> int
PrtgAPI.Parameters.StateTriggerParameters GetNotificationAction(TriggerProperty actionType) -> NotificationAction
PrtgAPI.Parameters.StateTriggerParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.StateTriggerParameters GetType() -> Type
PrtgAPI.Parameters.StateTriggerParameters Item { get; set; } -> object
PrtgAPI.Parameters.StateTriggerParameters Latency { get; set; } -> int?
PrtgAPI.Parameters.StateTriggerParameters ObjectId { get; } -> int
PrtgAPI.Parameters.StateTriggerParameters OffNotificationAction { get; set; } -> NotificationAction
PrtgAPI.Parameters.StateTriggerParameters OnNotificationAction { get; set; } -> NotificationAction
PrtgAPI.Parameters.StateTriggerParameters RepeatInterval { get; set; } -> int?
PrtgAPI.Parameters.StateTriggerParameters SetNotificationAction(TriggerProperty actionType, NotificationAction value) -> void
PrtgAPI.Parameters.StateTriggerParameters State { get; set; } -> TriggerSensorState?
PrtgAPI.Parameters.StateTriggerParameters SubId { get; } -> int?
PrtgAPI.Parameters.StateTriggerParameters ToString() -> string
PrtgAPI.Parameters.StateTriggerParameters Type { get; } -> TriggerType
PrtgAPI.Parameters.StateTriggerParameters UpdateCustomParameter(TriggerProperty property, object value, bool requireValue = false) -> void
PrtgAPI.Parameters.TableParameters<T> => Class
PrtgAPI.Parameters.TableParameters<T> AddFilters(params SearchFilter[] filters) -> void
PrtgAPI.Parameters.TableParameters<T> Content { get; } -> Content
PrtgAPI.Parameters.TableParameters<T> Count { get; set; } -> int?
PrtgAPI.Parameters.TableParameters<T> Equals(object obj) -> bool
PrtgAPI.Parameters.TableParameters<T> GetFilterValue(Property property) -> object
PrtgAPI.Parameters.TableParameters<T> GetHashCode() -> int
PrtgAPI.Parameters.TableParameters<T> GetMultiParameterFilterValue<TArray>(Property property) -> TArray[]
PrtgAPI.Parameters.TableParameters<T> GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.TableParameters<T> GetType() -> Type
PrtgAPI.Parameters.TableParameters<T> Item { get; set; } -> object
PrtgAPI.Parameters.TableParameters<T> Page { get; set; } -> int
PrtgAPI.Parameters.TableParameters<T> PageSize { get; set; } -> int
PrtgAPI.Parameters.TableParameters<T> Properties { get; } -> Property[]
PrtgAPI.Parameters.TableParameters<T> RemoveFilters(params SearchFilter[] filters) -> bool
PrtgAPI.Parameters.TableParameters<T> SearchFilters { get; set; } -> List<SearchFilter>
PrtgAPI.Parameters.TableParameters<T> SetFilterValue(Property property, object value) -> void
PrtgAPI.Parameters.TableParameters<T> SetMultiParameterFilterValue<TArray>(Property property, TArray[] value) -> void
PrtgAPI.Parameters.TableParameters<T> SortBy { get; set; } -> Property?
PrtgAPI.Parameters.TableParameters<T> SortDirection { get; set; } -> SortDirection
PrtgAPI.Parameters.TableParameters<T> Start { get; set; } -> int?
PrtgAPI.Parameters.TableParameters<T> StartOffset { get; } -> int
PrtgAPI.Parameters.TableParameters<T> ToString() -> string
PrtgAPI.Parameters.ThresholdTriggerParameters => Class
PrtgAPI.Parameters.ThresholdTriggerParameters Action { get; } -> ModifyAction
PrtgAPI.Parameters.ThresholdTriggerParameters Channel { get; set; } -> TriggerChannel
PrtgAPI.Parameters.ThresholdTriggerParameters Condition { get; set; } -> TriggerCondition?
PrtgAPI.Parameters.ThresholdTriggerParameters Equals(object obj) -> bool
PrtgAPI.Parameters.ThresholdTriggerParameters GetCustomParameterEnumInt<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.ThresholdTriggerParameters GetCustomParameterEnumXml<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.ThresholdTriggerParameters GetCustomParameterValue(TriggerProperty property) -> object
PrtgAPI.Parameters.ThresholdTriggerParameters GetHashCode() -> int
PrtgAPI.Parameters.ThresholdTriggerParameters GetNotificationAction(TriggerProperty actionType) -> NotificationAction
PrtgAPI.Parameters.ThresholdTriggerParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.ThresholdTriggerParameters GetType() -> Type
PrtgAPI.Parameters.ThresholdTriggerParameters Item { get; set; } -> object
PrtgAPI.Parameters.ThresholdTriggerParameters Latency { get; set; } -> int?
PrtgAPI.Parameters.ThresholdTriggerParameters ObjectId { get; } -> int
PrtgAPI.Parameters.ThresholdTriggerParameters OffNotificationAction { get; set; } -> NotificationAction
PrtgAPI.Parameters.ThresholdTriggerParameters OnNotificationAction { get; set; } -> NotificationAction
PrtgAPI.Parameters.ThresholdTriggerParameters SetNotificationAction(TriggerProperty actionType, NotificationAction value) -> void
PrtgAPI.Parameters.ThresholdTriggerParameters SubId { get; } -> int?
PrtgAPI.Parameters.ThresholdTriggerParameters Threshold { get; set; } -> double?
PrtgAPI.Parameters.ThresholdTriggerParameters ToString() -> string
PrtgAPI.Parameters.ThresholdTriggerParameters Type { get; } -> TriggerType
PrtgAPI.Parameters.ThresholdTriggerParameters UpdateCustomParameter(TriggerProperty property, object value, bool requireValue = false) -> void
PrtgAPI.Parameters.TriggerParameter => Class
PrtgAPI.Parameters.TriggerParameter Equals(object obj) -> bool
PrtgAPI.Parameters.TriggerParameter GetHashCode() -> int
PrtgAPI.Parameters.TriggerParameter GetType() -> Type
PrtgAPI.Parameters.TriggerParameter Property { get; set; } -> TriggerProperty
PrtgAPI.Parameters.TriggerParameter ToString() -> string
PrtgAPI.Parameters.TriggerParameter Value { get; set; } -> object
PrtgAPI.Parameters.TriggerParameters => Class
PrtgAPI.Parameters.TriggerParameters Action { get; } -> ModifyAction
PrtgAPI.Parameters.TriggerParameters Equals(object obj) -> bool
PrtgAPI.Parameters.TriggerParameters GetCustomParameterEnumInt<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.TriggerParameters GetCustomParameterEnumXml<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.TriggerParameters GetCustomParameterValue(TriggerProperty property) -> object
PrtgAPI.Parameters.TriggerParameters GetHashCode() -> int
PrtgAPI.Parameters.TriggerParameters GetNotificationAction(TriggerProperty actionType) -> NotificationAction
PrtgAPI.Parameters.TriggerParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.TriggerParameters GetType() -> Type
PrtgAPI.Parameters.TriggerParameters Item { get; set; } -> object
PrtgAPI.Parameters.TriggerParameters ObjectId { get; } -> int
PrtgAPI.Parameters.TriggerParameters OnNotificationAction { get; set; } -> NotificationAction
PrtgAPI.Parameters.TriggerParameters SetNotificationAction(TriggerProperty actionType, NotificationAction value) -> void
PrtgAPI.Parameters.TriggerParameters SubId { get; } -> int?
PrtgAPI.Parameters.TriggerParameters ToString() -> string
PrtgAPI.Parameters.TriggerParameters Type { get; } -> TriggerType
PrtgAPI.Parameters.TriggerParameters UpdateCustomParameter(TriggerProperty property, object value, bool requireValue = false) -> void
PrtgAPI.Parameters.VolumeTriggerParameters => Class
PrtgAPI.Parameters.VolumeTriggerParameters Action { get; } -> ModifyAction
PrtgAPI.Parameters.VolumeTriggerParameters Channel { get; set; } -> TriggerChannel
PrtgAPI.Parameters.VolumeTriggerParameters Equals(object obj) -> bool
PrtgAPI.Parameters.VolumeTriggerParameters GetCustomParameterEnumInt<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.VolumeTriggerParameters GetCustomParameterEnumXml<T>(TriggerProperty property) -> object
PrtgAPI.Parameters.VolumeTriggerParameters GetCustomParameterValue(TriggerProperty property) -> object
PrtgAPI.Parameters.VolumeTriggerParameters GetHashCode() -> int
PrtgAPI.Parameters.VolumeTriggerParameters GetNotificationAction(TriggerProperty actionType) -> NotificationAction
PrtgAPI.Parameters.VolumeTriggerParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.VolumeTriggerParameters GetType() -> Type
PrtgAPI.Parameters.VolumeTriggerParameters Item { get; set; } -> object
PrtgAPI.Parameters.VolumeTriggerParameters ObjectId { get; } -> int
PrtgAPI.Parameters.VolumeTriggerParameters OnNotificationAction { get; set; } -> NotificationAction
PrtgAPI.Parameters.VolumeTriggerParameters Period { get; set; } -> TriggerPeriod?
PrtgAPI.Parameters.VolumeTriggerParameters SetNotificationAction(TriggerProperty actionType, NotificationAction value) -> void
PrtgAPI.Parameters.VolumeTriggerParameters SubId { get; } -> int?
PrtgAPI.Parameters.VolumeTriggerParameters Threshold { get; set; } -> double?
PrtgAPI.Parameters.VolumeTriggerParameters ToString() -> string
PrtgAPI.Parameters.VolumeTriggerParameters Type { get; } -> TriggerType
PrtgAPI.Parameters.VolumeTriggerParameters UnitSize { get; set; } -> DataUnit?
PrtgAPI.Parameters.VolumeTriggerParameters UpdateCustomParameter(TriggerProperty property, object value, bool requireValue = false) -> void
PrtgAPI.Parameters.WmiServiceSensorParameters => Class
PrtgAPI.Parameters.WmiServiceSensorParameters AddNameOverride(ObjectProperty property, string newName) -> void
PrtgAPI.Parameters.WmiServiceSensorParameters ContainsNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.WmiServiceSensorParameters DynamicType { get; set; } -> bool
PrtgAPI.Parameters.WmiServiceSensorParameters Equals(object obj) -> bool
PrtgAPI.Parameters.WmiServiceSensorParameters GetCustomParameter(ObjectProperty property) -> object
PrtgAPI.Parameters.WmiServiceSensorParameters GetCustomParameterArray(ObjectProperty property, params char[] delim) -> string[]
PrtgAPI.Parameters.WmiServiceSensorParameters GetCustomParameterArray(string name, params char[] delim) -> string[]
PrtgAPI.Parameters.WmiServiceSensorParameters GetCustomParameterBool(ObjectProperty property) -> bool?
PrtgAPI.Parameters.WmiServiceSensorParameters GetCustomParameterBool(string name) -> bool?
PrtgAPI.Parameters.WmiServiceSensorParameters GetCustomParameterEnumXml<T>(ObjectProperty property) -> object
PrtgAPI.Parameters.WmiServiceSensorParameters GetCustomParameterEnumXml<T>(string name) -> object
PrtgAPI.Parameters.WmiServiceSensorParameters GetCustomParameterInternal(string name) -> object
PrtgAPI.Parameters.WmiServiceSensorParameters GetHashCode() -> int
PrtgAPI.Parameters.WmiServiceSensorParameters GetNameOverrides() -> IReadOnlyDictionary<ObjectProperty,string>
PrtgAPI.Parameters.WmiServiceSensorParameters GetParameters() -> IDictionary<Parameter,object>
PrtgAPI.Parameters.WmiServiceSensorParameters GetType() -> Type
PrtgAPI.Parameters.WmiServiceSensorParameters InheritInterval { get; set; } -> bool?
PrtgAPI.Parameters.WmiServiceSensorParameters InheritTriggers { get; set; } -> bool?
PrtgAPI.Parameters.WmiServiceSensorParameters Interval { get; set; } -> ScanningInterval
PrtgAPI.Parameters.WmiServiceSensorParameters IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.Parameters.WmiServiceSensorParameters Item { get; set; } -> object
PrtgAPI.Parameters.WmiServiceSensorParameters MonitorPerformance { get; set; } -> bool
PrtgAPI.Parameters.WmiServiceSensorParameters Name { get; set; } -> string
PrtgAPI.Parameters.WmiServiceSensorParameters NotifyChanged { get; set; } -> bool
PrtgAPI.Parameters.WmiServiceSensorParameters Priority { get; set; } -> Priority?
PrtgAPI.Parameters.WmiServiceSensorParameters RemoveCustomParameter(ObjectProperty property) -> bool
PrtgAPI.Parameters.WmiServiceSensorParameters RemoveCustomParameterInternal(string name) -> bool
PrtgAPI.Parameters.WmiServiceSensorParameters RemoveNameOverride(ObjectProperty property) -> bool
PrtgAPI.Parameters.WmiServiceSensorParameters SensorType { get; set; } -> SensorType
PrtgAPI.Parameters.WmiServiceSensorParameters Services { get; set; } -> List<WmiServiceTarget>
PrtgAPI.Parameters.WmiServiceSensorParameters SetCustomParameter(ObjectProperty property, object value) -> void
PrtgAPI.Parameters.WmiServiceSensorParameters SetCustomParameterArray(ObjectProperty property, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.WmiServiceSensorParameters SetCustomParameterArray(string name, string[] value, params char[] delim) -> void
PrtgAPI.Parameters.WmiServiceSensorParameters SetCustomParameterBool(ObjectProperty property, bool? value) -> void
PrtgAPI.Parameters.WmiServiceSensorParameters SetCustomParameterBool(string name, bool? value) -> void
PrtgAPI.Parameters.WmiServiceSensorParameters SetCustomParameterEnumXml<T>(ObjectProperty property, T enum) -> void
PrtgAPI.Parameters.WmiServiceSensorParameters SetCustomParameterEnumXml<T>(string name, T enum) -> void
PrtgAPI.Parameters.WmiServiceSensorParameters SetCustomParameterInternal(string name, object value) -> void
PrtgAPI.Parameters.WmiServiceSensorParameters Source { get; } -> Device
PrtgAPI.Parameters.WmiServiceSensorParameters StartStopped { get; set; } -> bool
PrtgAPI.Parameters.WmiServiceSensorParameters Tags { get; set; } -> string[]
PrtgAPI.Parameters.WmiServiceSensorParameters ToString() -> string
PrtgAPI.ParameterType => Enum
PrtgAPI.ParameterType.MultiParameter -> Value
PrtgAPI.ParameterType.MultiValue -> Value
PrtgAPI.ParameterType.SingleValue -> Value
PrtgAPI.PauseAction => Enum
PrtgAPI.PauseAction.Pause -> Value
PrtgAPI.PauseAction.Resume -> Value
PrtgAPI.PercentDisplay => Enum
PrtgAPI.PercentDisplay.Actual -> Value
PrtgAPI.PercentDisplay.PercentOfMax -> Value
PrtgAPI.PingMode => Enum
PrtgAPI.PingMode.MultiPing -> Value
PrtgAPI.PingMode.SinglePing -> Value
PrtgAPI.Position => Enum
PrtgAPI.Position.Bottom -> Value
PrtgAPI.Position.Down -> Value
PrtgAPI.Position.Top -> Value
PrtgAPI.Position.Up -> Value
PrtgAPI.Priority => Enum
PrtgAPI.Priority.Five -> Value
PrtgAPI.Priority.Four -> Value
PrtgAPI.Priority.None -> Value
PrtgAPI.Priority.One -> Value
PrtgAPI.Priority.Three -> Value
PrtgAPI.Priority.Two -> Value
PrtgAPI.Probe => Class
PrtgAPI.Probe Access { get; set; } -> Access
PrtgAPI.Probe Active { get; set; } -> bool
PrtgAPI.Probe BaseType { get; set; } -> BaseType
PrtgAPI.Probe Collapsed { get; set; } -> bool
PrtgAPI.Probe Comments { get; set; } -> string
PrtgAPI.Probe Dependency { get; set; } -> string
PrtgAPI.Probe DisplayType { get; set; } -> string
PrtgAPI.Probe DownAcknowledgedSensors { get; set; } -> int
PrtgAPI.Probe DownSensors { get; set; } -> int
PrtgAPI.Probe Equals(object obj) -> bool
PrtgAPI.Probe GetHashCode() -> int
PrtgAPI.Probe GetType() -> Type
PrtgAPI.Probe Id { get; set; } -> int
PrtgAPI.Probe InheritInterval { get; } -> bool
PrtgAPI.Probe Interval { get; set; } -> TimeSpan
PrtgAPI.Probe Message { get; set; } -> string
PrtgAPI.Probe Name { get; set; } -> string
PrtgAPI.Probe NotificationTypes { get; } -> NotificationTypes
PrtgAPI.Probe ParentId { get; set; } -> int
PrtgAPI.Probe PartialDownSensors { get; set; } -> int
PrtgAPI.Probe PausedSensors { get; set; } -> int
PrtgAPI.Probe Position { get; set; } -> int
PrtgAPI.Probe Priority { get; set; } -> Priority
PrtgAPI.Probe ProbeStatus { get; set; } -> ProbeStatus
PrtgAPI.Probe Schedule { get; set; } -> string
PrtgAPI.Probe Status { get; set; } -> Status
PrtgAPI.Probe Tags { get; set; } -> string[]
PrtgAPI.Probe ToString() -> string
PrtgAPI.Probe TotalDevices { get; set; } -> int
PrtgAPI.Probe TotalGroups { get; set; } -> int
PrtgAPI.Probe TotalSensors { get; set; } -> int
PrtgAPI.Probe Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.Probe UnknownSensors { get; set; } -> int
PrtgAPI.Probe UnusualSensors { get; set; } -> int
PrtgAPI.Probe UpSensors { get; set; } -> int
PrtgAPI.Probe Url { get; set; } -> string
PrtgAPI.Probe WarningSensors { get; set; } -> int
PrtgAPI.ProbeApproval => Enum
PrtgAPI.ProbeApproval.Allow -> Value
PrtgAPI.ProbeApproval.AllowAndDiscover -> Value
PrtgAPI.ProbeApproval.Deny -> Value
PrtgAPI.ProbeRestartOption => Enum
PrtgAPI.ProbeRestartOption.DoNothing -> Value
PrtgAPI.ProbeRestartOption.RebootSystem -> Value
PrtgAPI.ProbeRestartOption.RestartServices -> Value
PrtgAPI.ProbeRestartProgress => Class
PrtgAPI.ProbeRestartProgress Disconnected { get; set; } -> bool
PrtgAPI.ProbeRestartProgress Equals(object obj) -> bool
PrtgAPI.ProbeRestartProgress GetHashCode() -> int
PrtgAPI.ProbeRestartProgress GetType() -> Type
PrtgAPI.ProbeRestartProgress Id { get; } -> int
PrtgAPI.ProbeRestartProgress InitialStatus { get; } -> ProbeStatus
PrtgAPI.ProbeRestartProgress Name { get; } -> string
PrtgAPI.ProbeRestartProgress Reconnected { get; set; } -> bool
PrtgAPI.ProbeRestartProgress ToString() -> string
PrtgAPI.ProbeSettings => Class
PrtgAPI.ProbeSettings Active { get; set; } -> bool
PrtgAPI.ProbeSettings AmazonAccessKey { get; set; } -> string
PrtgAPI.ProbeSettings BandwidthSpeedUnit { get; set; } -> DataUnit?
PrtgAPI.ProbeSettings BandwidthTimeUnit { get; set; } -> TimeUnit?
PrtgAPI.ProbeSettings BandwidthVolumeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.ProbeSettings Coordinates { get; } -> Coordinates
PrtgAPI.ProbeSettings DBAuthMode { get; set; } -> DBAuthMode
PrtgAPI.ProbeSettings DBPort { get; set; } -> int?
PrtgAPI.ProbeSettings DBPortMode { get; set; } -> AutoMode
PrtgAPI.ProbeSettings DBTimeout { get; set; } -> int
PrtgAPI.ProbeSettings DBUserName { get; set; } -> string
PrtgAPI.ProbeSettings DependencyDelay { get; set; } -> int?
PrtgAPI.ProbeSettings DependencyType { get; set; } -> DependencyType?
PrtgAPI.ProbeSettings DependentObjectId { get; set; } -> int?
PrtgAPI.ProbeSettings DiskSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.ProbeSettings Equals(object obj) -> bool
PrtgAPI.ProbeSettings FileSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.ProbeSettings GetHashCode() -> int
PrtgAPI.ProbeSettings GetType() -> Type
PrtgAPI.ProbeSettings HasAmazonSecretKey { get; } -> bool
PrtgAPI.ProbeSettings HasDBPassword { get; } -> bool
PrtgAPI.ProbeSettings HasLinuxPassword { get; } -> bool
PrtgAPI.ProbeSettings HasLinuxPrivateKey { get; } -> bool
PrtgAPI.ProbeSettings HasProxyPassword { get; } -> bool
PrtgAPI.ProbeSettings HasSNMPv3EncryptionKey { get; } -> bool
PrtgAPI.ProbeSettings HasSNMPv3Password { get; } -> bool
PrtgAPI.ProbeSettings HasSSHElevationPassword { get; } -> bool
PrtgAPI.ProbeSettings HasVMwarePassword { get; } -> bool
PrtgAPI.ProbeSettings HasWindowsPassword { get; } -> bool
PrtgAPI.ProbeSettings InheritAmazonCredentials { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritChannelUnit { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritDBCredentials { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritDependency { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritInterval { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritLinuxCredentials { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritLocation { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritProxy { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritSNMPCompatibility { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritSNMPCredentials { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritVMwareCredentials { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritWindowsCompatibility { get; set; } -> bool?
PrtgAPI.ProbeSettings InheritWindowsCredentials { get; set; } -> bool?
PrtgAPI.ProbeSettings Interval { get; } -> ScanningInterval
PrtgAPI.ProbeSettings IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.ProbeSettings LinuxLoginMode { get; set; } -> LinuxLoginMode
PrtgAPI.ProbeSettings LinuxUserName { get; set; } -> string
PrtgAPI.ProbeSettings Location { get; set; } -> string
PrtgAPI.ProbeSettings MaintenanceEnabled { get; set; } -> bool?
PrtgAPI.ProbeSettings MaintenanceEnd { get; } -> DateTime?
PrtgAPI.ProbeSettings MaintenanceStart { get; } -> DateTime?
PrtgAPI.ProbeSettings MemoryUsageUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.ProbeSettings Name { get; set; } -> string
PrtgAPI.ProbeSettings Priority { get; set; } -> Priority?
PrtgAPI.ProbeSettings ProbeApproved { get; set; } -> bool
PrtgAPI.ProbeSettings ProxyAddress { get; set; } -> string
PrtgAPI.ProbeSettings ProxyPort { get; set; } -> int?
PrtgAPI.ProbeSettings ProxyUser { get; set; } -> string
PrtgAPI.ProbeSettings Schedule { get; } -> Schedule
PrtgAPI.ProbeSettings SNMPCommunityStringV1 { get; set; } -> string
PrtgAPI.ProbeSettings SNMPCommunityStringV2 { get; set; } -> string
PrtgAPI.ProbeSettings SNMPCounterMode { get; set; } -> SNMPCounterMode
PrtgAPI.ProbeSettings SNMPDelay { get; set; } -> int
PrtgAPI.ProbeSettings SNMPInterfaceEndIndex { get; set; } -> int
PrtgAPI.ProbeSettings SNMPInterfaceStartIndex { get; set; } -> int
PrtgAPI.ProbeSettings SNMPOverflowMode { get; set; } -> SNMPOverflowMode
PrtgAPI.ProbeSettings SNMPPort { get; set; } -> int
PrtgAPI.ProbeSettings SNMPPortIdMode { get; set; } -> SNMPPortIdentification
PrtgAPI.ProbeSettings SNMPPortNameTemplate { get; set; } -> string
PrtgAPI.ProbeSettings SNMPPortNameUpdateMode { get; set; } -> SNMPPortNameUpdateMode
PrtgAPI.ProbeSettings SNMPRequestMode { get; set; } -> SNMPRequestMode
PrtgAPI.ProbeSettings SNMPRetryMode { get; set; } -> RetryMode
PrtgAPI.ProbeSettings SNMPTimeout { get; set; } -> int
PrtgAPI.ProbeSettings SNMPv3AuthType { get; set; } -> HashType
PrtgAPI.ProbeSettings SNMPv3Context { get; set; } -> string
PrtgAPI.ProbeSettings SNMPv3EncryptionType { get; set; } -> EncryptionType
PrtgAPI.ProbeSettings SNMPv3UserName { get; set; } -> string
PrtgAPI.ProbeSettings SNMPVersion { get; set; } -> SNMPVersion
PrtgAPI.ProbeSettings SNMPZeroValueMode { get; set; } -> SNMPZeroValueMode
PrtgAPI.ProbeSettings SSHElevationMode { get; set; } -> SSHElevationMode
PrtgAPI.ProbeSettings SSHElevationSudoUser { get; set; } -> string
PrtgAPI.ProbeSettings SSHElevationSuUser { get; set; } -> string
PrtgAPI.ProbeSettings SSHEngine { get; set; } -> SSHEngine?
PrtgAPI.ProbeSettings SSHPort { get; set; } -> int
PrtgAPI.ProbeSettings Tags { get; set; } -> string[]
PrtgAPI.ProbeSettings ToString() -> string
PrtgAPI.ProbeSettings VMwareProtocol { get; set; } -> HttpMode
PrtgAPI.ProbeSettings VMwareSessionMode { get; set; } -> VMwareSessionMode?
PrtgAPI.ProbeSettings VMwareUserName { get; set; } -> string
PrtgAPI.ProbeSettings WbemPort { get; set; } -> string
PrtgAPI.ProbeSettings WbemPortMode { get; set; } -> AutoMode
PrtgAPI.ProbeSettings WbemProtocolMode { get; set; } -> HttpMode
PrtgAPI.ProbeSettings WindowsDomain { get; set; } -> string
PrtgAPI.ProbeSettings WindowsUserName { get; set; } -> string
PrtgAPI.ProbeSettings WmiDataSource { get; set; } -> WmiDataSource
PrtgAPI.ProbeSettings WmiTimeout { get; set; } -> string
PrtgAPI.ProbeSettings WmiTimeoutMethod { get; set; } -> WmiTimeoutMethod
PrtgAPI.ProbeStatus => Enum
PrtgAPI.ProbeStatus.Connected -> Value
PrtgAPI.ProbeStatus.Disconnected -> Value
PrtgAPI.Property => Enum
PrtgAPI.Property.Access -> Value
PrtgAPI.Property.Actions -> Value
PrtgAPI.Property.Active -> Value
PrtgAPI.Property.BaseType -> Value
PrtgAPI.Property.Collapsed -> Value
PrtgAPI.Property.Comments -> Value
PrtgAPI.Property.Condition -> Value
PrtgAPI.Property.Content -> Value
PrtgAPI.Property.Coverage -> Value
PrtgAPI.Property.DataCollectedSince -> Value
PrtgAPI.Property.DateOnly -> Value
PrtgAPI.Property.DateTime -> Value
PrtgAPI.Property.Dependency -> Value
PrtgAPI.Property.Device -> Value
PrtgAPI.Property.DeviceIcon -> Value
PrtgAPI.Property.DownAcknowledgedSensors -> Value
PrtgAPI.Property.DownDuration -> Value
PrtgAPI.Property.DownSensors -> Value
PrtgAPI.Property.Downtime -> Value
PrtgAPI.Property.Email -> Value
PrtgAPI.Property.EndDate -> Value
PrtgAPI.Property.Favorite -> Value
PrtgAPI.Property.Group -> Value
PrtgAPI.Property.GrpDev -> Value
PrtgAPI.Property.Host -> Value
PrtgAPI.Property.Icon -> Value
PrtgAPI.Property.Id -> Value
PrtgAPI.Property.Interval -> Value
PrtgAPI.Property.LastCheck -> Value
PrtgAPI.Property.LastDown -> Value
PrtgAPI.Property.LastRun -> Value
PrtgAPI.Property.LastUp -> Value
PrtgAPI.Property.LastValue -> Value
PrtgAPI.Property.Location -> Value
PrtgAPI.Property.Message -> Value
PrtgAPI.Property.MiniGraph -> Value
PrtgAPI.Property.ModifiedBy -> Value
PrtgAPI.Property.Name -> Value
PrtgAPI.Property.NextRun -> Value
PrtgAPI.Property.NotificationTypes -> Value
PrtgAPI.Property.Parent -> Value
PrtgAPI.Property.ParentId -> Value
PrtgAPI.Property.PartialDownSensors -> Value
PrtgAPI.Property.PausedSensors -> Value
PrtgAPI.Property.Period -> Value
PrtgAPI.Property.Position -> Value
PrtgAPI.Property.Priority -> Value
PrtgAPI.Property.Probe -> Value
PrtgAPI.Property.ProbeStatus -> Value
PrtgAPI.Property.RecordAge -> Value
PrtgAPI.Property.Schedule -> Value
PrtgAPI.Property.Sensor -> Value
PrtgAPI.Property.Size -> Value
PrtgAPI.Property.StartDate -> Value
PrtgAPI.Property.Status -> Value
PrtgAPI.Property.Tags -> Value
PrtgAPI.Property.Template -> Value
PrtgAPI.Property.TicketType -> Value
PrtgAPI.Property.TimeOnly -> Value
PrtgAPI.Property.TotalDevices -> Value
PrtgAPI.Property.TotalDowntime -> Value
PrtgAPI.Property.TotalGroups -> Value
PrtgAPI.Property.TotalMonitorTime -> Value
PrtgAPI.Property.TotalSensors -> Value
PrtgAPI.Property.TotalUptime -> Value
PrtgAPI.Property.Type -> Value
PrtgAPI.Property.UnknownSensors -> Value
PrtgAPI.Property.UnusualSensors -> Value
PrtgAPI.Property.UpDuration -> Value
PrtgAPI.Property.UpSensors -> Value
PrtgAPI.Property.Uptime -> Value
PrtgAPI.Property.Url -> Value
PrtgAPI.Property.UserName -> Value
PrtgAPI.Property.Value -> Value
PrtgAPI.Property.WarningSensors -> Value
PrtgAPI.PrtgClient => Class
PrtgAPI.PrtgClient AcknowledgeSensor(Either<Sensor,int> sensorOrId, int? duration = null, string message = null) -> void
PrtgAPI.PrtgClient AcknowledgeSensor(int[] sensorIds, int? duration = null, string message = null) -> void
PrtgAPI.PrtgClient AcknowledgeSensorAsync(Either<Sensor,int> sensorOrId, int? duration = null, string message = null, CancellationToken token = default(CancellationToken)) -> Task
PrtgAPI.PrtgClient AcknowledgeSensorAsync(int[] sensorIds, int? duration = null, string message = null, CancellationToken token = default(CancellationToken)) -> Task
PrtgAPI.PrtgClient AddDevice(Either<GroupOrProbe,int> parent, NewDeviceParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) -> Device
PrtgAPI.PrtgClient AddDevice(Either<GroupOrProbe,int> parent, string name, string host = null, AutoDiscoveryMode discoveryMode = AutoDiscoveryMode.Manual, bool resolve = true, CancellationToken token = default(CancellationToken)) -> Device
PrtgAPI.PrtgClient AddDeviceAsync(Either<GroupOrProbe,int> parent, NewDeviceParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) -> Task<Device>
PrtgAPI.PrtgClient AddDeviceAsync(Either<GroupOrProbe,int> parent, string name, string host = null, AutoDiscoveryMode discoveryMode = AutoDiscoveryMode.Manual, bool resolve = true, CancellationToken token = default(CancellationToken)) -> Task<Device>
PrtgAPI.PrtgClient AddGroup(Either<GroupOrProbe,int> parent, NewGroupParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) -> Group
PrtgAPI.PrtgClient AddGroup(Either<GroupOrProbe,int> parent, string name, bool resolve = true, CancellationToken token = default(CancellationToken)) -> Group
PrtgAPI.PrtgClient AddGroupAsync(Either<GroupOrProbe,int> parent, NewGroupParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) -> Task<Group>
PrtgAPI.PrtgClient AddGroupAsync(Either<GroupOrProbe,int> parent, string name, bool resolve = true, CancellationToken token = default(CancellationToken)) -> Task<Group>
PrtgAPI.PrtgClient AddNotificationTrigger(TriggerParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) -> NotificationTrigger
PrtgAPI.PrtgClient AddNotificationTriggerAsync(TriggerParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) -> Task<NotificationTrigger>
PrtgAPI.PrtgClient AddSensor(Either<Device,int> deviceOrId, NewSensorParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) -> List<Sensor>
PrtgAPI.PrtgClient AddSensorAsync(Either<Device,int> deviceOrId, NewSensorParameters parameters, bool resolve = true, CancellationToken token = default(CancellationToken)) -> Task<List<Sensor>>
PrtgAPI.PrtgClient ApproveProbe(Either<Probe,int> probeOrId, ProbeApproval action) -> void
PrtgAPI.PrtgClient ApproveProbeAsync(Either<Probe,int> probeOrId, ProbeApproval action) -> Task
PrtgAPI.PrtgClient ApproveProbeAsync(Either<Probe,int> probeOrId, ProbeApproval action, CancellationToken token) -> Task
PrtgAPI.PrtgClient AutoDiscover(Either<IPrtgObject,int> objectOrId, params DeviceTemplate[] templates) -> void
PrtgAPI.PrtgClient AutoDiscoverAsync(Either<IPrtgObject,int> objectOrId, DeviceTemplate[] templates, CancellationToken token) -> Task
PrtgAPI.PrtgClient AutoDiscoverAsync(Either<IPrtgObject,int> objectOrId, params DeviceTemplate[] templates) -> Task
PrtgAPI.PrtgClient BackupConfigDatabase() -> void
PrtgAPI.PrtgClient BackupConfigDatabaseAsync() -> Task
PrtgAPI.PrtgClient BackupConfigDatabaseAsync(CancellationToken token) -> Task
PrtgAPI.PrtgClient ClearSystemCache(SystemCacheType cacheType) -> void
PrtgAPI.PrtgClient ClearSystemCacheAsync(SystemCacheType cacheType) -> Task
PrtgAPI.PrtgClient ClearSystemCacheAsync(SystemCacheType cacheType, CancellationToken token) -> Task
PrtgAPI.PrtgClient CloneObject(Either<Device,int> deviceOrId, string cloneName, string host, Either<GroupOrProbe,int> destinationObjectOrId) -> int
PrtgAPI.PrtgClient CloneObject(Either<IPrtgObject,int> objectOrId, string cloneName, Either<DeviceOrGroupOrProbe,int> destinationObjectOrId) -> int
PrtgAPI.PrtgClient CloneObjectAsync(Either<Device,int> deviceOrId, string cloneName, string host, Either<GroupOrProbe,int> destinationObjectOrId) -> Task<int>
PrtgAPI.PrtgClient CloneObjectAsync(Either<Device,int> deviceOrId, string cloneName, string host, Either<GroupOrProbe,int> destinationObjectOrId, CancellationToken token) -> Task<int>
PrtgAPI.PrtgClient CloneObjectAsync(Either<IPrtgObject,int> objectOrId, string cloneName, Either<DeviceOrGroupOrProbe,int> destinationObjectOrId) -> Task<int>
PrtgAPI.PrtgClient CloneObjectAsync(Either<IPrtgObject,int> objectOrId, string cloneName, Either<DeviceOrGroupOrProbe,int> destinationObjectOrId, CancellationToken token) -> Task<int>
PrtgAPI.PrtgClient Equals(object obj) -> bool
PrtgAPI.PrtgClient GetChannel(Either<Sensor,int> sensorOrId, int id) -> Channel
PrtgAPI.PrtgClient GetChannel(Either<Sensor,int> sensorOrId, string name) -> Channel
PrtgAPI.PrtgClient GetChannelAsync(Either<Sensor,int> sensorOrId, int id) -> Task<Channel>
PrtgAPI.PrtgClient GetChannelAsync(Either<Sensor,int> sensorOrId, int id, CancellationToken token) -> Task<Channel>
PrtgAPI.PrtgClient GetChannelAsync(Either<Sensor,int> sensorOrId, string name) -> Task<Channel>
PrtgAPI.PrtgClient GetChannelAsync(Either<Sensor,int> sensorOrId, string name, CancellationToken token) -> Task<Channel>
PrtgAPI.PrtgClient GetChannels(Either<Sensor,int> sensorOrId) -> List<Channel>
PrtgAPI.PrtgClient GetChannels(Either<Sensor,int> sensorOrId, string name) -> List<Channel>
PrtgAPI.PrtgClient GetChannelsAsync(Either<Sensor,int> sensorOrId) -> Task<List<Channel>>
PrtgAPI.PrtgClient GetChannelsAsync(Either<Sensor,int> sensorOrId, CancellationToken token) -> Task<List<Channel>>
PrtgAPI.PrtgClient GetChannelsAsync(Either<Sensor,int> sensorOrId, string name) -> Task<List<Channel>>
PrtgAPI.PrtgClient GetChannelsAsync(Either<Sensor,int> sensorOrId, string name, CancellationToken token) -> Task<List<Channel>>
PrtgAPI.PrtgClient GetDevice(int id) -> Device
PrtgAPI.PrtgClient GetDeviceAsync(int id) -> Task<Device>
PrtgAPI.PrtgClient GetDeviceAsync(int id, CancellationToken token) -> Task<Device>
PrtgAPI.PrtgClient GetDeviceProperties(Either<Device,int> device) -> DeviceSettings
PrtgAPI.PrtgClient GetDevicePropertiesAsync(Either<Device,int> device) -> Task<DeviceSettings>
PrtgAPI.PrtgClient GetDevicePropertiesAsync(Either<Device,int> device, CancellationToken token) -> Task<DeviceSettings>
PrtgAPI.PrtgClient GetDevices() -> List<Device>
PrtgAPI.PrtgClient GetDevices(DeviceParameters parameters) -> List<Device>
PrtgAPI.PrtgClient GetDevices(DeviceParameters parameters, CancellationToken token) -> List<Device>
PrtgAPI.PrtgClient GetDevices(params SearchFilter[] filters) -> List<Device>
PrtgAPI.PrtgClient GetDevices(Property property, FilterOperator operator, object value) -> List<Device>
PrtgAPI.PrtgClient GetDevices(Property property, object value) -> List<Device>
PrtgAPI.PrtgClient GetDevicesAsync() -> Task<List<Device>>
PrtgAPI.PrtgClient GetDevicesAsync(CancellationToken token) -> Task<List<Device>>
PrtgAPI.PrtgClient GetDevicesAsync(DeviceParameters parameters) -> Task<List<Device>>
PrtgAPI.PrtgClient GetDevicesAsync(DeviceParameters parameters, CancellationToken token) -> Task<List<Device>>
PrtgAPI.PrtgClient GetDevicesAsync(params SearchFilter[] filters) -> Task<List<Device>>
PrtgAPI.PrtgClient GetDevicesAsync(Property property, FilterOperator operator, object value) -> Task<List<Device>>
PrtgAPI.PrtgClient GetDevicesAsync(Property property, FilterOperator operator, object value, CancellationToken token) -> Task<List<Device>>
PrtgAPI.PrtgClient GetDevicesAsync(Property property, object value) -> Task<List<Device>>
PrtgAPI.PrtgClient GetDevicesAsync(Property property, object value, CancellationToken token) -> Task<List<Device>>
PrtgAPI.PrtgClient GetDevicesAsync(SearchFilter[] filters, CancellationToken token) -> Task<List<Device>>
PrtgAPI.PrtgClient GetDeviceTemplates(int deviceId = 40) -> List<DeviceTemplate>
PrtgAPI.PrtgClient GetDeviceTemplatesAsync(int deviceId = 40, CancellationToken token = default(CancellationToken)) -> Task<List<DeviceTemplate>>
PrtgAPI.PrtgClient GetDynamicSensorParameters(Either<Device,int> deviceOrId, string sensorType, Func<int,bool> progressCallback = null, int timeout = 60, ISensorQueryTargetParameters queryParameters = null, CancellationToken token = default(CancellationToken)) -> DynamicSensorParameters
PrtgAPI.PrtgClient GetDynamicSensorParametersAsync(Either<Device,int> deviceOrId, string sensorType, Func<int,bool> progressCallback = null, int timeout = 60, ISensorQueryTargetParameters queryParameters = null, CancellationToken token = default(CancellationToken)) -> Task<DynamicSensorParameters>
PrtgAPI.PrtgClient GetGroup(int id) -> Group
PrtgAPI.PrtgClient GetGroupAsync(int id) -> Task<Group>
PrtgAPI.PrtgClient GetGroupAsync(int id, CancellationToken token) -> Task<Group>
PrtgAPI.PrtgClient GetGroupProperties(Either<Group,int> group) -> GroupSettings
PrtgAPI.PrtgClient GetGroupPropertiesAsync(Either<Group,int> group) -> Task<GroupSettings>
PrtgAPI.PrtgClient GetGroupPropertiesAsync(Either<Group,int> group, CancellationToken token) -> Task<GroupSettings>
PrtgAPI.PrtgClient GetGroups() -> List<Group>
PrtgAPI.PrtgClient GetGroups(GroupParameters parameters) -> List<Group>
PrtgAPI.PrtgClient GetGroups(GroupParameters parameters, CancellationToken token) -> List<Group>
PrtgAPI.PrtgClient GetGroups(params SearchFilter[] filters) -> List<Group>
PrtgAPI.PrtgClient GetGroups(Property property, FilterOperator operator, object value) -> List<Group>
PrtgAPI.PrtgClient GetGroups(Property property, object value) -> List<Group>
PrtgAPI.PrtgClient GetGroupsAsync() -> Task<List<Group>>
PrtgAPI.PrtgClient GetGroupsAsync(CancellationToken token) -> Task<List<Group>>
PrtgAPI.PrtgClient GetGroupsAsync(GroupParameters parameters) -> Task<List<Group>>
PrtgAPI.PrtgClient GetGroupsAsync(GroupParameters parameters, CancellationToken token) -> Task<List<Group>>
PrtgAPI.PrtgClient GetGroupsAsync(params SearchFilter[] filters) -> Task<List<Group>>
PrtgAPI.PrtgClient GetGroupsAsync(Property property, FilterOperator operator, object value) -> Task<List<Group>>
PrtgAPI.PrtgClient GetGroupsAsync(Property property, FilterOperator operator, object value, CancellationToken token) -> Task<List<Group>>
PrtgAPI.PrtgClient GetGroupsAsync(Property property, object value) -> Task<List<Group>>
PrtgAPI.PrtgClient GetGroupsAsync(Property property, object value, CancellationToken token) -> Task<List<Group>>
PrtgAPI.PrtgClient GetGroupsAsync(SearchFilter[] filters, CancellationToken token) -> Task<List<Group>>
PrtgAPI.PrtgClient GetHashCode() -> int
PrtgAPI.PrtgClient GetLogs(DateTime? startDate, DateTime? endDate = null, int? count = 500, params LogStatus[] status) -> List<Log>
PrtgAPI.PrtgClient GetLogs(int objectId, DateTime? startDate = null, DateTime? endDate = null, int? count = 500, params LogStatus[] status) -> List<Log>
PrtgAPI.PrtgClient GetLogs(int objectId, RecordAge recordAge, int? count = 500, params LogStatus[] status) -> List<Log>
PrtgAPI.PrtgClient GetLogs(LogParameters parameters) -> List<Log>
PrtgAPI.PrtgClient GetLogs(LogParameters parameters, CancellationToken token) -> List<Log>
PrtgAPI.PrtgClient GetLogs(RecordAge recordAge = RecordAge.LastWeek, int? count = 500, params LogStatus[] status) -> List<Log>
PrtgAPI.PrtgClient GetLogsAsync(DateTime? startDate, DateTime? endDate = null, int? count = 500, params LogStatus[] status) -> Task<List<Log>>
PrtgAPI.PrtgClient GetLogsAsync(DateTime? startDate, DateTime? endDate, int? count, LogStatus[] status, CancellationToken token) -> Task<List<Log>>
PrtgAPI.PrtgClient GetLogsAsync(int objectId, DateTime? startDate = null, DateTime? endDate = null, int? count = 500, params LogStatus[] status) -> Task<List<Log>>
PrtgAPI.PrtgClient GetLogsAsync(int objectId, DateTime? startDate, DateTime? endDate, int? count, LogStatus[] status, CancellationToken token) -> Task<List<Log>>
PrtgAPI.PrtgClient GetLogsAsync(int objectId, RecordAge recordAge, int? count = 500, params LogStatus[] status) -> Task<List<Log>>
PrtgAPI.PrtgClient GetLogsAsync(int objectId, RecordAge recordAge, int? count, LogStatus[] status, CancellationToken token) -> Task<List<Log>>
PrtgAPI.PrtgClient GetLogsAsync(LogParameters parameters) -> Task<List<Log>>
PrtgAPI.PrtgClient GetLogsAsync(LogParameters parameters, CancellationToken token) -> Task<List<Log>>
PrtgAPI.PrtgClient GetLogsAsync(RecordAge recordAge = RecordAge.LastWeek, int? count = 500, params LogStatus[] status) -> Task<List<Log>>
PrtgAPI.PrtgClient GetLogsAsync(RecordAge recordAge, int? count, LogStatus[] status, CancellationToken token) -> Task<List<Log>>
PrtgAPI.PrtgClient GetModificationHistory(Either<IPrtgObject,int> objectOrId) -> List<ModificationEvent>
PrtgAPI.PrtgClient GetModificationHistoryAsync(Either<IPrtgObject,int> objectOrId) -> Task<List<ModificationEvent>>
PrtgAPI.PrtgClient GetModificationHistoryAsync(Either<IPrtgObject,int> objectOrId, CancellationToken token) -> Task<List<ModificationEvent>>
PrtgAPI.PrtgClient GetNotificationAction(int id) -> NotificationAction
PrtgAPI.PrtgClient GetNotificationAction(string name) -> NotificationAction
PrtgAPI.PrtgClient GetNotificationActionAsync(int id) -> Task<NotificationAction>
PrtgAPI.PrtgClient GetNotificationActionAsync(int id, CancellationToken token) -> Task<NotificationAction>
PrtgAPI.PrtgClient GetNotificationActionAsync(string name) -> Task<NotificationAction>
PrtgAPI.PrtgClient GetNotificationActionAsync(string name, CancellationToken token) -> Task<NotificationAction>
PrtgAPI.PrtgClient GetNotificationActions() -> List<NotificationAction>
PrtgAPI.PrtgClient GetNotificationActions(params SearchFilter[] filters) -> List<NotificationAction>
PrtgAPI.PrtgClient GetNotificationActions(Property property, object value) -> List<NotificationAction>
PrtgAPI.PrtgClient GetNotificationActionsAsync() -> Task<List<NotificationAction>>
PrtgAPI.PrtgClient GetNotificationActionsAsync(CancellationToken token) -> Task<List<NotificationAction>>
PrtgAPI.PrtgClient GetNotificationActionsAsync(params SearchFilter[] filters) -> Task<List<NotificationAction>>
PrtgAPI.PrtgClient GetNotificationActionsAsync(Property property, object value) -> Task<List<NotificationAction>>
PrtgAPI.PrtgClient GetNotificationActionsAsync(Property property, object value, CancellationToken token) -> Task<List<NotificationAction>>
PrtgAPI.PrtgClient GetNotificationActionsAsync(SearchFilter[] filters, CancellationToken token) -> Task<List<NotificationAction>>
PrtgAPI.PrtgClient GetNotificationTriggers(Either<IPrtgObject,int> objectOrId) -> List<NotificationTrigger>
PrtgAPI.PrtgClient GetNotificationTriggersAsync(Either<IPrtgObject,int> objectOrId) -> Task<List<NotificationTrigger>>
PrtgAPI.PrtgClient GetNotificationTriggersAsync(Either<IPrtgObject,int> objectOrId, CancellationToken token) -> Task<List<NotificationTrigger>>
PrtgAPI.PrtgClient GetNotificationTriggerTypes(Either<IPrtgObject,int> objectOrId) -> List<TriggerType>
PrtgAPI.PrtgClient GetNotificationTriggerTypesAsync(Either<IPrtgObject,int> objectOrId) -> Task<List<TriggerType>>
PrtgAPI.PrtgClient GetNotificationTriggerTypesAsync(Either<IPrtgObject,int> objectOrId, CancellationToken token) -> Task<List<TriggerType>>
PrtgAPI.PrtgClient GetObject(int id, bool resolve = false) -> PrtgObject
PrtgAPI.PrtgClient GetObjectAsync(int id, bool resolve = false, CancellationToken token = default(CancellationToken)) -> Task<PrtgObject>
PrtgAPI.PrtgClient GetObjectPropertiesRaw(Either<IPrtgObject,int> objectOrId, ObjectType objectType) -> Dictionary<string,string>
PrtgAPI.PrtgClient GetObjectPropertiesRaw(Either<IPrtgObject,int> objectOrId, string objectType = null) -> Dictionary<string,string>
PrtgAPI.PrtgClient GetObjectPropertiesRawAsync(Either<IPrtgObject,int> objectOrId, ObjectType objectType) -> Task<Dictionary<string,string>>
PrtgAPI.PrtgClient GetObjectPropertiesRawAsync(Either<IPrtgObject,int> objectOrId, ObjectType objectType, CancellationToken token) -> Task<Dictionary<string,string>>
PrtgAPI.PrtgClient GetObjectPropertiesRawAsync(Either<IPrtgObject,int> objectOrId, string objectType = null, CancellationToken token = default(CancellationToken)) -> Task<Dictionary<string,string>>
PrtgAPI.PrtgClient GetObjectProperty(Either<IPrtgObject,int> objectOrId, ObjectProperty property) -> object
PrtgAPI.PrtgClient GetObjectProperty<T>(Either<IPrtgObject,int> objectOrId, ObjectProperty property) -> T
PrtgAPI.PrtgClient GetObjectPropertyAsync(Either<IPrtgObject,int> objectOrId, ObjectProperty property) -> Task<object>
PrtgAPI.PrtgClient GetObjectPropertyAsync(Either<IPrtgObject,int> objectOrId, ObjectProperty property, CancellationToken token) -> Task<object>
PrtgAPI.PrtgClient GetObjectPropertyAsync<T>(Either<IPrtgObject,int> objectOrId, ObjectProperty property) -> Task<T>
PrtgAPI.PrtgClient GetObjectPropertyAsync<T>(Either<IPrtgObject,int> objectOrId, ObjectProperty property, CancellationToken token) -> Task<T>
PrtgAPI.PrtgClient GetObjectPropertyRaw(Either<IPrtgObject,int> objectOrId, int subId, string subType, string property, bool text = false) -> string
PrtgAPI.PrtgClient GetObjectPropertyRaw(Either<IPrtgObject,int> objectOrId, string property, bool text = false) -> string
PrtgAPI.PrtgClient GetObjectPropertyRawAsync(Either<IPrtgObject,int> objectOrId, int subId, string subType, string property, bool text = false, CancellationToken token = default(CancellationToken)) -> Task<string>
PrtgAPI.PrtgClient GetObjectPropertyRawAsync(Either<IPrtgObject,int> objectOrId, string property, bool text = false, CancellationToken token = default(CancellationToken)) -> Task<string>
PrtgAPI.PrtgClient GetObjects() -> List<PrtgObject>
PrtgAPI.PrtgClient GetObjects(params SearchFilter[] filters) -> List<PrtgObject>
PrtgAPI.PrtgClient GetObjects(Property property, FilterOperator operator, object value) -> List<PrtgObject>
PrtgAPI.PrtgClient GetObjects(Property property, object value) -> List<PrtgObject>
PrtgAPI.PrtgClient GetObjects(PrtgObjectParameters parameters) -> List<PrtgObject>
PrtgAPI.PrtgClient GetObjects(PrtgObjectParameters parameters, CancellationToken token) -> List<PrtgObject>
PrtgAPI.PrtgClient GetObjectsAsync() -> Task<List<PrtgObject>>
PrtgAPI.PrtgClient GetObjectsAsync(CancellationToken token) -> Task<List<PrtgObject>>
PrtgAPI.PrtgClient GetObjectsAsync(params SearchFilter[] filters) -> Task<List<PrtgObject>>
PrtgAPI.PrtgClient GetObjectsAsync(Property property, FilterOperator operator, object value) -> Task<List<PrtgObject>>
PrtgAPI.PrtgClient GetObjectsAsync(Property property, FilterOperator operator, object value, CancellationToken token) -> Task<List<PrtgObject>>
PrtgAPI.PrtgClient GetObjectsAsync(Property property, object value) -> Task<List<PrtgObject>>
PrtgAPI.PrtgClient GetObjectsAsync(Property property, object value, CancellationToken token) -> Task<List<PrtgObject>>
PrtgAPI.PrtgClient GetObjectsAsync(PrtgObjectParameters parameters) -> Task<List<PrtgObject>>
PrtgAPI.PrtgClient GetObjectsAsync(PrtgObjectParameters parameters, CancellationToken token) -> Task<List<PrtgObject>>
PrtgAPI.PrtgClient GetObjectsAsync(SearchFilter[] filters, CancellationToken token) -> Task<List<PrtgObject>>
PrtgAPI.PrtgClient GetProbe(int id) -> Probe
PrtgAPI.PrtgClient GetProbeAsync(int id) -> Task<Probe>
PrtgAPI.PrtgClient GetProbeAsync(int id, CancellationToken token) -> Task<Probe>
PrtgAPI.PrtgClient GetProbeProperties(Either<Probe,int> probe) -> ProbeSettings
PrtgAPI.PrtgClient GetProbePropertiesAsync(Either<Probe,int> probe) -> Task<ProbeSettings>
PrtgAPI.PrtgClient GetProbePropertiesAsync(Either<Probe,int> probe, CancellationToken token) -> Task<ProbeSettings>
PrtgAPI.PrtgClient GetProbes() -> List<Probe>
PrtgAPI.PrtgClient GetProbes(params SearchFilter[] filters) -> List<Probe>
PrtgAPI.PrtgClient GetProbes(ProbeParameters parameters) -> List<Probe>
PrtgAPI.PrtgClient GetProbes(ProbeParameters parameters, CancellationToken token) -> List<Probe>
PrtgAPI.PrtgClient GetProbes(Property property, FilterOperator operator, object value) -> List<Probe>
PrtgAPI.PrtgClient GetProbes(Property property, object value) -> List<Probe>
PrtgAPI.PrtgClient GetProbesAsync() -> Task<List<Probe>>
PrtgAPI.PrtgClient GetProbesAsync(CancellationToken token) -> Task<List<Probe>>
PrtgAPI.PrtgClient GetProbesAsync(params SearchFilter[] filters) -> Task<List<Probe>>
PrtgAPI.PrtgClient GetProbesAsync(ProbeParameters parameters) -> Task<List<Probe>>
PrtgAPI.PrtgClient GetProbesAsync(ProbeParameters parameters, CancellationToken token) -> Task<List<Probe>>
PrtgAPI.PrtgClient GetProbesAsync(Property property, FilterOperator operator, object value) -> Task<List<Probe>>
PrtgAPI.PrtgClient GetProbesAsync(Property property, FilterOperator operator, object value, CancellationToken token) -> Task<List<Probe>>
PrtgAPI.PrtgClient GetProbesAsync(Property property, object value) -> Task<List<Probe>>
PrtgAPI.PrtgClient GetProbesAsync(Property property, object value, CancellationToken token) -> Task<List<Probe>>
PrtgAPI.PrtgClient GetProbesAsync(SearchFilter[] filters, CancellationToken token) -> Task<List<Probe>>
PrtgAPI.PrtgClient GetSchedule(int id) -> Schedule
PrtgAPI.PrtgClient GetSchedule(string name) -> Schedule
PrtgAPI.PrtgClient GetScheduleAsync(int id) -> Task<Schedule>
PrtgAPI.PrtgClient GetScheduleAsync(int id, CancellationToken token) -> Task<Schedule>
PrtgAPI.PrtgClient GetScheduleAsync(string name) -> Task<Schedule>
PrtgAPI.PrtgClient GetScheduleAsync(string name, CancellationToken token) -> Task<Schedule>
PrtgAPI.PrtgClient GetSchedules() -> List<Schedule>
PrtgAPI.PrtgClient GetSchedules(params SearchFilter[] filters) -> List<Schedule>
PrtgAPI.PrtgClient GetSchedules(Property property, object value) -> List<Schedule>
PrtgAPI.PrtgClient GetSchedulesAsync() -> Task<List<Schedule>>
PrtgAPI.PrtgClient GetSchedulesAsync(CancellationToken token) -> Task<List<Schedule>>
PrtgAPI.PrtgClient GetSchedulesAsync(params SearchFilter[] filters) -> Task<List<Schedule>>
PrtgAPI.PrtgClient GetSchedulesAsync(Property property, object value) -> Task<List<Schedule>>
PrtgAPI.PrtgClient GetSchedulesAsync(Property property, object value, CancellationToken token) -> Task<List<Schedule>>
PrtgAPI.PrtgClient GetSchedulesAsync(SearchFilter[] filters, CancellationToken token) -> Task<List<Schedule>>
PrtgAPI.PrtgClient GetSensor(int id) -> Sensor
PrtgAPI.PrtgClient GetSensorAsync(int id) -> Task<Sensor>
PrtgAPI.PrtgClient GetSensorAsync(int id, CancellationToken token) -> Task<Sensor>
PrtgAPI.PrtgClient GetSensorHistory(Either<Sensor,int> sensorOrId, int average = 300, DateTime? startDate = null, DateTime? endDate = null, int? count = null) -> List<SensorHistoryRecord>
PrtgAPI.PrtgClient GetSensorHistoryAsync(Either<Sensor,int> sensorOrId, int average = 300, DateTime? startDate = null, DateTime? endDate = null, int? count = null, CancellationToken token = default(CancellationToken)) -> Task<List<SensorHistoryRecord>>
PrtgAPI.PrtgClient GetSensorHistoryReport(Either<Sensor,int> sensorOrId, DateTime? startDate = null, DateTime? endDate = null) -> List<SensorHistoryReportItem>
PrtgAPI.PrtgClient GetSensorHistoryReportAsync(Either<Sensor,int> sensorOrId, DateTime? startDate = null, DateTime? endDate = null, CancellationToken token = default(CancellationToken)) -> Task<List<SensorHistoryReportItem>>
PrtgAPI.PrtgClient GetSensorProperties(Either<Sensor,int> sensor) -> SensorSettings
PrtgAPI.PrtgClient GetSensorPropertiesAsync(Either<Sensor,int> sensor) -> Task<SensorSettings>
PrtgAPI.PrtgClient GetSensorPropertiesAsync(Either<Sensor,int> sensor, CancellationToken token) -> Task<SensorSettings>
PrtgAPI.PrtgClient GetSensors() -> List<Sensor>
PrtgAPI.PrtgClient GetSensors(params SearchFilter[] filters) -> List<Sensor>
PrtgAPI.PrtgClient GetSensors(params Status[] statuses) -> List<Sensor>
PrtgAPI.PrtgClient GetSensors(Property property, FilterOperator operator, object value) -> List<Sensor>
PrtgAPI.PrtgClient GetSensors(Property property, object value) -> List<Sensor>
PrtgAPI.PrtgClient GetSensors(SensorParameters parameters) -> List<Sensor>
PrtgAPI.PrtgClient GetSensors(SensorParameters parameters, CancellationToken token) -> List<Sensor>
PrtgAPI.PrtgClient GetSensorsAsync() -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(CancellationToken token) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(params SearchFilter[] filters) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(params Status[] statuses) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(Property property, FilterOperator operator, object value) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(Property property, FilterOperator operator, object value, CancellationToken token) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(Property property, object value) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(Property property, object value, CancellationToken token) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(SearchFilter[] filters, CancellationToken token) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(SensorParameters parameters) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(SensorParameters parameters, CancellationToken token) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorsAsync(Status[] statuses, CancellationToken token) -> Task<List<Sensor>>
PrtgAPI.PrtgClient GetSensorTotals() -> SensorTotals
PrtgAPI.PrtgClient GetSensorTotalsAsync() -> Task<SensorTotals>
PrtgAPI.PrtgClient GetSensorTotalsAsync(CancellationToken token) -> Task<SensorTotals>
PrtgAPI.PrtgClient GetSensorTypes(int objectId = 1) -> List<SensorTypeDescriptor>
PrtgAPI.PrtgClient GetSensorTypesAsync(int objectId = 1, CancellationToken token = default(CancellationToken)) -> Task<List<SensorTypeDescriptor>>
PrtgAPI.PrtgClient GetStatus() -> ServerStatus
PrtgAPI.PrtgClient GetStatusAsync() -> Task<ServerStatus>
PrtgAPI.PrtgClient GetStatusAsync(CancellationToken token) -> Task<ServerStatus>
PrtgAPI.PrtgClient GetSystemInfo(Either<Device,int> deviceOrId) -> SystemInfo
PrtgAPI.PrtgClient GetSystemInfo(Either<Device,int> deviceOrId, SystemInfoType type) -> List<IDeviceInfo>
PrtgAPI.PrtgClient GetSystemInfo<T>(Either<Device,int> deviceOrId) -> List<T>
PrtgAPI.PrtgClient GetSystemInfoAsync(Either<Device,int> deviceOrId) -> Task<SystemInfo>
PrtgAPI.PrtgClient GetSystemInfoAsync(Either<Device,int> deviceOrId, CancellationToken token) -> Task<SystemInfo>
PrtgAPI.PrtgClient GetSystemInfoAsync(Either<Device,int> deviceOrId, SystemInfoType type) -> Task<List<IDeviceInfo>>
PrtgAPI.PrtgClient GetSystemInfoAsync(Either<Device,int> deviceOrId, SystemInfoType type, CancellationToken token) -> Task<List<IDeviceInfo>>
PrtgAPI.PrtgClient GetSystemInfoAsync<T>(Either<Device,int> deviceOrId) -> Task<List<T>>
PrtgAPI.PrtgClient GetSystemInfoAsync<T>(Either<Device,int> deviceOrId, CancellationToken token) -> Task<List<T>>
PrtgAPI.PrtgClient GetTotalObjects(Content content) -> int
PrtgAPI.PrtgClient GetTotalObjects(Content content, params SearchFilter[] filters) -> int
PrtgAPI.PrtgClient GetTotalObjectsAsync(Content content) -> Task<int>
PrtgAPI.PrtgClient GetTotalObjectsAsync(Content content, CancellationToken token) -> Task<int>
PrtgAPI.PrtgClient GetTotalObjectsAsync(Content content, params SearchFilter[] filters) -> Task<int>
PrtgAPI.PrtgClient GetTotalObjectsAsync(Content content, SearchFilter[] filters, CancellationToken token) -> Task<int>
PrtgAPI.PrtgClient GetTree(Either<PrtgObject,int> objectOrId, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken)) -> PrtgNode
PrtgAPI.PrtgClient GetTree(PrtgObject value = null, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken)) -> PrtgNode
PrtgAPI.PrtgClient GetTreeAsync(Either<PrtgObject,int> objectOrId, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken)) -> Task<PrtgNode>
PrtgAPI.PrtgClient GetTreeAsync(PrtgObject value = null, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken)) -> Task<PrtgNode>
PrtgAPI.PrtgClient GetTreeLazy(Either<PrtgObject,int> objectOrId, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken)) -> PrtgNode
PrtgAPI.PrtgClient GetTreeLazy(PrtgObject value = null, FlagEnum<TreeParseOption>? options = null, ITreeProgressCallback progressCallback = null, CancellationToken token = default(CancellationToken)) -> PrtgNode
PrtgAPI.PrtgClient GetType() -> Type
PrtgAPI.PrtgClient LoadConfigFiles(ConfigFileType fileType) -> void
PrtgAPI.PrtgClient LoadConfigFilesAsync(ConfigFileType fileType) -> Task
PrtgAPI.PrtgClient LoadConfigFilesAsync(ConfigFileType fileType, CancellationToken token) -> Task
PrtgAPI.PrtgClient LogLevel { get; set; } -> LogLevel
PrtgAPI.PrtgClient LogVerbose -> EventHandler<LogVerboseEventArgs>
PrtgAPI.PrtgClient MoveObject(Either<IPrtgObject,int> objectOrId, Either<GroupOrProbe,int> destination) -> void
PrtgAPI.PrtgClient MoveObjectAsync(Either<IPrtgObject,int> objectOrId, Either<GroupOrProbe,int> destination) -> Task
PrtgAPI.PrtgClient MoveObjectAsync(Either<IPrtgObject,int> objectOrId, Either<GroupOrProbe,int> destination, CancellationToken token) -> Task
PrtgAPI.PrtgClient PassHash { get; } -> string
PrtgAPI.PrtgClient PauseObject(Either<IPrtgObject,int> objectOrId, int? duration = null, string message = null) -> void
PrtgAPI.PrtgClient PauseObject(int[] objectIds, int? duration = null, string message = null) -> void
PrtgAPI.PrtgClient PauseObjectAsync(Either<IPrtgObject,int> objectOrId, int? duration = null, string message = null, CancellationToken token = default(CancellationToken)) -> Task
PrtgAPI.PrtgClient PauseObjectAsync(int[] objectIds, int? duration = null, string message = null, CancellationToken token = default(CancellationToken)) -> Task
PrtgAPI.PrtgClient QueryDevices() -> IQueryable<Device>
PrtgAPI.PrtgClient QueryDevices(bool strict) -> IQueryable<Device>
PrtgAPI.PrtgClient QueryDevices(Expression<Func<Device,bool>> predicate) -> IQueryable<Device>
PrtgAPI.PrtgClient QueryDevices(Expression<Func<Device,bool>> predicate, bool strict) -> IQueryable<Device>
PrtgAPI.PrtgClient QueryGroups() -> IQueryable<Group>
PrtgAPI.PrtgClient QueryGroups(bool strict) -> IQueryable<Group>
PrtgAPI.PrtgClient QueryGroups(Expression<Func<Group,bool>> predicate) -> IQueryable<Group>
PrtgAPI.PrtgClient QueryGroups(Expression<Func<Group,bool>> predicate, bool strict) -> IQueryable<Group>
PrtgAPI.PrtgClient QueryLogs() -> IQueryable<Log>
PrtgAPI.PrtgClient QueryLogs(bool strict) -> IQueryable<Log>
PrtgAPI.PrtgClient QueryLogs(Expression<Func<Log,bool>> predicate) -> IQueryable<Log>
PrtgAPI.PrtgClient QueryLogs(Expression<Func<Log,bool>> predicate, bool strict) -> IQueryable<Log>
PrtgAPI.PrtgClient QueryProbes() -> IQueryable<Probe>
PrtgAPI.PrtgClient QueryProbes(bool strict) -> IQueryable<Probe>
PrtgAPI.PrtgClient QueryProbes(Expression<Func<Probe,bool>> predicate) -> IQueryable<Probe>
PrtgAPI.PrtgClient QueryProbes(Expression<Func<Probe,bool>> predicate, bool strict) -> IQueryable<Probe>
PrtgAPI.PrtgClient QuerySensors() -> IQueryable<Sensor>
PrtgAPI.PrtgClient QuerySensors(bool strict) -> IQueryable<Sensor>
PrtgAPI.PrtgClient QuerySensors(Expression<Func<Sensor,bool>> predicate) -> IQueryable<Sensor>
PrtgAPI.PrtgClient QuerySensors(Expression<Func<Sensor,bool>> predicate, bool strict) -> IQueryable<Sensor>
PrtgAPI.PrtgClient RefreshObject(params int[] objectIds) -> void
PrtgAPI.PrtgClient RefreshObjectAsync(int[] objectIds, CancellationToken token) -> Task
PrtgAPI.PrtgClient RefreshObjectAsync(params int[] objectIds) -> Task
PrtgAPI.PrtgClient RefreshSystemInfo(Either<Device,int> deviceOrId, params SystemInfoType[] types) -> void
PrtgAPI.PrtgClient RefreshSystemInfoAsync(Either<Device,int> deviceOrId, params SystemInfoType[] types) -> Task
PrtgAPI.PrtgClient RefreshSystemInfoAsync(Either<Device,int> deviceOrId, SystemInfoType[] types, CancellationToken token) -> Task
PrtgAPI.PrtgClient RemoveNotificationTrigger(NotificationTrigger trigger) -> void
PrtgAPI.PrtgClient RemoveNotificationTriggerAsync(NotificationTrigger trigger) -> Task
PrtgAPI.PrtgClient RemoveNotificationTriggerAsync(NotificationTrigger trigger, CancellationToken token) -> Task
PrtgAPI.PrtgClient RemoveObject(params int[] objectIds) -> void
PrtgAPI.PrtgClient RemoveObjectAsync(int[] objectIds, CancellationToken token) -> Task
PrtgAPI.PrtgClient RemoveObjectAsync(params int[] objectIds) -> Task
PrtgAPI.PrtgClient RenameObject(Either<IPrtgObject,int> objectOrId, string name) -> void
PrtgAPI.PrtgClient RenameObject(int[] objectIds, string name) -> void
PrtgAPI.PrtgClient RenameObjectAsync(Either<IPrtgObject,int> objectOrId, string name) -> Task
PrtgAPI.PrtgClient RenameObjectAsync(Either<IPrtgObject,int> objectOrId, string name, CancellationToken token) -> Task
PrtgAPI.PrtgClient RenameObjectAsync(int[] objectIds, string name) -> Task
PrtgAPI.PrtgClient RenameObjectAsync(int[] objectIds, string name, CancellationToken token) -> Task
PrtgAPI.PrtgClient RestartCore(bool waitForRestart = false, Func<RestartCoreStage,bool> progressCallback = null, CancellationToken token = default(CancellationToken)) -> void
PrtgAPI.PrtgClient RestartCoreAsync(bool waitForRestart = false, Func<RestartCoreStage,bool> progressCallback = null, CancellationToken token = default(CancellationToken)) -> Task
PrtgAPI.PrtgClient RestartProbe(Either<Probe,int> probeOrId, bool waitForRestart = false, Func<ProbeRestartProgress,bool> progressCallback = null, CancellationToken token = default(CancellationToken)) -> void
PrtgAPI.PrtgClient RestartProbe(int[] probeIds = null, bool waitForRestart = false, Func<ProbeRestartProgress[],bool> progressCallback = null, CancellationToken token = default(CancellationToken)) -> void
PrtgAPI.PrtgClient RestartProbeAsync(Either<Probe,int> probeOrId, bool waitForRestart = false, Func<ProbeRestartProgress,bool> progressCallback = null, CancellationToken token = default(CancellationToken)) -> Task
PrtgAPI.PrtgClient RestartProbeAsync(int[] probeIds = null, bool waitForRestart = false, Func<ProbeRestartProgress[],bool> progressCallback = null, CancellationToken token = default(CancellationToken)) -> Task
PrtgAPI.PrtgClient ResumeObject(params int[] objectIds) -> void
PrtgAPI.PrtgClient ResumeObjectAsync(int[] objectIds, CancellationToken token) -> Task
PrtgAPI.PrtgClient ResumeObjectAsync(params int[] objectIds) -> Task
PrtgAPI.PrtgClient RetryCount { get; set; } -> int
PrtgAPI.PrtgClient RetryDelay { get; set; } -> int
PrtgAPI.PrtgClient RetryRequest -> EventHandler<RetryRequestEventArgs>
PrtgAPI.PrtgClient Server { get; } -> string
PrtgAPI.PrtgClient SetChannelProperty(Channel channel, ChannelParameter[] parameters, CancellationToken token) -> void
PrtgAPI.PrtgClient SetChannelProperty(Channel channel, ChannelProperty property, object value) -> void
PrtgAPI.PrtgClient SetChannelProperty(Channel channel, ChannelProperty property, object value, CancellationToken token) -> void
PrtgAPI.PrtgClient SetChannelProperty(Channel channel, params ChannelParameter[] parameters) -> void
PrtgAPI.PrtgClient SetChannelProperty(Either<Sensor,int> sensorOrId, int channelId, ChannelParameter[] parameters, CancellationToken token) -> void
PrtgAPI.PrtgClient SetChannelProperty(Either<Sensor,int> sensorOrId, int channelId, ChannelProperty property, object value) -> void
PrtgAPI.PrtgClient SetChannelProperty(Either<Sensor,int> sensorOrId, int channelId, ChannelProperty property, object value, CancellationToken token) -> void
PrtgAPI.PrtgClient SetChannelProperty(Either<Sensor,int> sensorOrId, int channelId, params ChannelParameter[] parameters) -> void
PrtgAPI.PrtgClient SetChannelProperty(IEnumerable<Channel> channels, ChannelParameter[] parameters, CancellationToken token) -> void
PrtgAPI.PrtgClient SetChannelProperty(IEnumerable<Channel> channels, ChannelProperty property, object value) -> void
PrtgAPI.PrtgClient SetChannelProperty(IEnumerable<Channel> channels, ChannelProperty property, object value, CancellationToken token) -> void
PrtgAPI.PrtgClient SetChannelProperty(IEnumerable<Channel> channels, params ChannelParameter[] parameters) -> void
PrtgAPI.PrtgClient SetChannelProperty(int[] sensorIds, int channelId, ChannelParameter[] parameters, CancellationToken token) -> void
PrtgAPI.PrtgClient SetChannelProperty(int[] sensorIds, int channelId, ChannelProperty property, object value) -> void
PrtgAPI.PrtgClient SetChannelProperty(int[] sensorIds, int channelId, ChannelProperty property, object value, CancellationToken token) -> void
PrtgAPI.PrtgClient SetChannelProperty(int[] sensorIds, int channelId, params ChannelParameter[] parameters) -> void
PrtgAPI.PrtgClient SetChannelPropertyAsync(Channel channel, ChannelParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(Channel channel, ChannelProperty property, object value) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(Channel channel, ChannelProperty property, object value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(Channel channel, params ChannelParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(Either<Sensor,int> sensorOrId, int channelId, ChannelParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(Either<Sensor,int> sensorOrId, int channelId, ChannelProperty property, object value) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(Either<Sensor,int> sensorOrId, int channelId, ChannelProperty property, object value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(Either<Sensor,int> sensorOrId, int channelId, params ChannelParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(IEnumerable<Channel> channels, ChannelParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(IEnumerable<Channel> channels, ChannelProperty property, object value) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(IEnumerable<Channel> channels, ChannelProperty property, object value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(IEnumerable<Channel> channels, params ChannelParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(int[] sensorIds, int channelId, ChannelParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(int[] sensorIds, int channelId, ChannelProperty property, object value) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(int[] sensorIds, int channelId, ChannelProperty property, object value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetChannelPropertyAsync(int[] sensorIds, int channelId, params ChannelParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetNotificationTrigger(TriggerParameters parameters) -> void
PrtgAPI.PrtgClient SetNotificationTriggerAsync(TriggerParameters parameters) -> Task
PrtgAPI.PrtgClient SetNotificationTriggerAsync(TriggerParameters parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetObjectProperty(Either<IPrtgObject,int> objectOrId, ObjectProperty property, object value) -> void
PrtgAPI.PrtgClient SetObjectProperty(Either<IPrtgObject,int> objectOrId, params PropertyParameter[] parameters) -> void
PrtgAPI.PrtgClient SetObjectProperty(int[] objectIds, ObjectProperty property, object value) -> void
PrtgAPI.PrtgClient SetObjectProperty(int[] objectIds, params PropertyParameter[] parameters) -> void
PrtgAPI.PrtgClient SetObjectPropertyAsync(Either<IPrtgObject,int> objectOrId, ObjectProperty property, object value) -> Task
PrtgAPI.PrtgClient SetObjectPropertyAsync(Either<IPrtgObject,int> objectOrId, ObjectProperty property, object value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetObjectPropertyAsync(Either<IPrtgObject,int> objectOrId, params PropertyParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetObjectPropertyAsync(Either<IPrtgObject,int> objectOrId, PropertyParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetObjectPropertyAsync(int[] objectIds, ObjectProperty property, object value) -> Task
PrtgAPI.PrtgClient SetObjectPropertyAsync(int[] objectIds, ObjectProperty property, object value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetObjectPropertyAsync(int[] objectIds, params PropertyParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetObjectPropertyAsync(int[] objectIds, PropertyParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetObjectPropertyRaw(Either<IPrtgObject,int> objectOrId, params CustomParameter[] parameters) -> void
PrtgAPI.PrtgClient SetObjectPropertyRaw(Either<IPrtgObject,int> objectOrId, string property, string value) -> void
PrtgAPI.PrtgClient SetObjectPropertyRaw(int[] objectIds, params CustomParameter[] parameters) -> void
PrtgAPI.PrtgClient SetObjectPropertyRaw(int[] objectIds, string property, string value) -> void
PrtgAPI.PrtgClient SetObjectPropertyRawAsync(Either<IPrtgObject,int> objectOrId, CustomParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetObjectPropertyRawAsync(Either<IPrtgObject,int> objectOrId, params CustomParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetObjectPropertyRawAsync(Either<IPrtgObject,int> objectOrId, string property, string value) -> Task
PrtgAPI.PrtgClient SetObjectPropertyRawAsync(Either<IPrtgObject,int> objectOrId, string property, string value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetObjectPropertyRawAsync(int[] objectIds, CustomParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetObjectPropertyRawAsync(int[] objectIds, params CustomParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetObjectPropertyRawAsync(int[] objectIds, string property, string value) -> Task
PrtgAPI.PrtgClient SetObjectPropertyRawAsync(int[] objectIds, string property, string value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetPosition(Either<IPrtgObject,int> objectOrId, Position position) -> void
PrtgAPI.PrtgClient SetPosition(SensorOrDeviceOrGroupOrProbe obj, int position) -> void
PrtgAPI.PrtgClient SetPositionAsync(Either<IPrtgObject,int> objectOrId, Position position) -> Task
PrtgAPI.PrtgClient SetPositionAsync(Either<IPrtgObject,int> objectOrId, Position position, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetPositionAsync(SensorOrDeviceOrGroupOrProbe obj, int position) -> Task
PrtgAPI.PrtgClient SetPositionAsync(SensorOrDeviceOrGroupOrProbe obj, int position, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetTriggerProperty(Either<IPrtgObject,int> objectOrId, int triggerId, params TriggerParameter[] parameters) -> void
PrtgAPI.PrtgClient SetTriggerProperty(Either<IPrtgObject,int> objectOrId, int triggerId, TriggerProperty property, object value) -> void
PrtgAPI.PrtgClient SetTriggerProperty(IEnumerable<NotificationTrigger> triggers, params TriggerParameter[] parameters) -> void
PrtgAPI.PrtgClient SetTriggerProperty(IEnumerable<NotificationTrigger> triggers, TriggerParameter[] parameters, CancellationToken token) -> void
PrtgAPI.PrtgClient SetTriggerProperty(IEnumerable<NotificationTrigger> triggers, TriggerProperty property, object value) -> void
PrtgAPI.PrtgClient SetTriggerProperty(IEnumerable<NotificationTrigger> triggers, TriggerProperty property, object value, CancellationToken token) -> void
PrtgAPI.PrtgClient SetTriggerProperty(NotificationTrigger trigger, params TriggerParameter[] parameters) -> void
PrtgAPI.PrtgClient SetTriggerProperty(NotificationTrigger trigger, TriggerParameter[] parameters, CancellationToken token) -> void
PrtgAPI.PrtgClient SetTriggerProperty(NotificationTrigger trigger, TriggerProperty property, object value) -> void
PrtgAPI.PrtgClient SetTriggerProperty(NotificationTrigger trigger, TriggerProperty property, object value, CancellationToken token) -> void
PrtgAPI.PrtgClient SetTriggerPropertyAsync(Either<IPrtgObject,int> objectOrId, int triggerId, params TriggerParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(Either<IPrtgObject,int> objectOrId, int triggerId, TriggerParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(Either<IPrtgObject,int> objectOrId, int triggerId, TriggerProperty property, object value) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(Either<IPrtgObject,int> objectOrId, int triggerId, TriggerProperty property, object value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(IEnumerable<NotificationTrigger> triggers, params TriggerParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(IEnumerable<NotificationTrigger> triggers, TriggerParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(IEnumerable<NotificationTrigger> triggers, TriggerProperty property, object value) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(IEnumerable<NotificationTrigger> triggers, TriggerProperty property, object value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(NotificationTrigger trigger, params TriggerParameter[] parameters) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(NotificationTrigger trigger, TriggerParameter[] parameters, CancellationToken token) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(NotificationTrigger trigger, TriggerProperty property, object value) -> Task
PrtgAPI.PrtgClient SetTriggerPropertyAsync(NotificationTrigger trigger, TriggerProperty property, object value, CancellationToken token) -> Task
PrtgAPI.PrtgClient SimulateError(params int[] sensorIds) -> void
PrtgAPI.PrtgClient SimulateErrorAsync(int[] sensorIds, CancellationToken token) -> Task
PrtgAPI.PrtgClient SimulateErrorAsync(params int[] sensorIds) -> Task
PrtgAPI.PrtgClient SortAlphabetically(Either<IPrtgObject,int> objectOrId) -> void
PrtgAPI.PrtgClient SortAlphabeticallyAsync(Either<IPrtgObject,int> objectOrId) -> Task
PrtgAPI.PrtgClient SortAlphabeticallyAsync(Either<IPrtgObject,int> objectOrId, CancellationToken token) -> Task
PrtgAPI.PrtgClient StreamDevices(bool serial = false) -> IEnumerable<Device>
PrtgAPI.PrtgClient StreamDevices(DeviceParameters parameters, bool serial = false) -> IEnumerable<Device>
PrtgAPI.PrtgClient StreamDevices(params SearchFilter[] filters) -> IEnumerable<Device>
PrtgAPI.PrtgClient StreamDevices(Property property, FilterOperator operator, object value) -> IEnumerable<Device>
PrtgAPI.PrtgClient StreamDevices(Property property, object value) -> IEnumerable<Device>
PrtgAPI.PrtgClient StreamGroups(bool serial = false) -> IEnumerable<Group>
PrtgAPI.PrtgClient StreamGroups(GroupParameters parameters, bool serial = false) -> IEnumerable<Group>
PrtgAPI.PrtgClient StreamGroups(params SearchFilter[] filters) -> IEnumerable<Group>
PrtgAPI.PrtgClient StreamGroups(Property property, FilterOperator operator, object value) -> IEnumerable<Group>
PrtgAPI.PrtgClient StreamGroups(Property property, object value) -> IEnumerable<Group>
PrtgAPI.PrtgClient StreamLogs(DateTime? startDate, DateTime? endDate = null, int? count = null, bool serial = false, params LogStatus[] status) -> IEnumerable<Log>
PrtgAPI.PrtgClient StreamLogs(int objectId, DateTime? startDate = null, DateTime? endDate = null, int? count = null, bool serial = false, params LogStatus[] status) -> IEnumerable<Log>
PrtgAPI.PrtgClient StreamLogs(int objectId, RecordAge recordAge, int? count = null, bool serial = false, params LogStatus[] status) -> IEnumerable<Log>
PrtgAPI.PrtgClient StreamLogs(LogParameters parameters, bool serial = false) -> IEnumerable<Log>
PrtgAPI.PrtgClient StreamLogs(RecordAge recordAge = RecordAge.LastWeek, int? count = null, bool serial = false, params LogStatus[] status) -> IEnumerable<Log>
PrtgAPI.PrtgClient StreamObjects(bool serial = false) -> IEnumerable<PrtgObject>
PrtgAPI.PrtgClient StreamObjects(params SearchFilter[] filters) -> IEnumerable<PrtgObject>
PrtgAPI.PrtgClient StreamObjects(Property property, FilterOperator operator, object value) -> IEnumerable<PrtgObject>
PrtgAPI.PrtgClient StreamObjects(Property property, object value) -> IEnumerable<PrtgObject>
PrtgAPI.PrtgClient StreamObjects(PrtgObjectParameters parameters, bool serial = false) -> IEnumerable<PrtgObject>
PrtgAPI.PrtgClient StreamProbes(bool serial = false) -> IEnumerable<Probe>
PrtgAPI.PrtgClient StreamProbes(params SearchFilter[] filters) -> IEnumerable<Probe>
PrtgAPI.PrtgClient StreamProbes(ProbeParameters parameters, bool serial = false) -> IEnumerable<Probe>
PrtgAPI.PrtgClient StreamProbes(Property property, FilterOperator operator, object value) -> IEnumerable<Probe>
PrtgAPI.PrtgClient StreamProbes(Property property, object value) -> IEnumerable<Probe>
PrtgAPI.PrtgClient StreamSensorHistory(Either<Sensor,int> sensorOrId, int average = 300, DateTime? startDate = null, DateTime? endDate = null) -> IEnumerable<SensorHistoryRecord>
PrtgAPI.PrtgClient StreamSensors(bool serial = false) -> IEnumerable<Sensor>
PrtgAPI.PrtgClient StreamSensors(params SearchFilter[] filters) -> IEnumerable<Sensor>
PrtgAPI.PrtgClient StreamSensors(params Status[] statuses) -> IEnumerable<Sensor>
PrtgAPI.PrtgClient StreamSensors(Property property, FilterOperator operator, object value) -> IEnumerable<Sensor>
PrtgAPI.PrtgClient StreamSensors(Property property, object value) -> IEnumerable<Sensor>
PrtgAPI.PrtgClient StreamSensors(SensorParameters parameters, bool serial = false) -> IEnumerable<Sensor>
PrtgAPI.PrtgClient Targets { get; } -> PrtgTargetHelper
PrtgAPI.PrtgClient ToString() -> string
PrtgAPI.PrtgClient UserName { get; } -> string
PrtgAPI.PrtgClient Version { get; } -> Version
PrtgAPI.PrtgClient WatchLogs(Either<IPrtgObject,int> objectOrId, LogStatus[] status = null, int interval = 1, DateTime? startDate = null, Func<int,bool> progressCallback = null, CancellationToken token = default(CancellationToken)) -> IEnumerable<Log>
PrtgAPI.PrtgClient WatchLogs(LogStatus[] status = null, int interval = 1, DateTime? startDate = null, Func<int,bool> progressCallback = null, CancellationToken token = default(CancellationToken)) -> IEnumerable<Log>
PrtgAPI.PrtgObject => Class
PrtgAPI.PrtgObject Active { get; set; } -> bool
PrtgAPI.PrtgObject DisplayType { get; set; } -> string
PrtgAPI.PrtgObject Equals(object obj) -> bool
PrtgAPI.PrtgObject GetHashCode() -> int
PrtgAPI.PrtgObject GetType() -> Type
PrtgAPI.PrtgObject Id { get; set; } -> int
PrtgAPI.PrtgObject Name { get; set; } -> string
PrtgAPI.PrtgObject ParentId { get; set; } -> int
PrtgAPI.PrtgObject Tags { get; set; } -> string[]
PrtgAPI.PrtgObject ToString() -> string
PrtgAPI.PrtgObject Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.PrtgRequestException => Class
PrtgAPI.PrtgRequestException Data { get; } -> IDictionary
PrtgAPI.PrtgRequestException Equals(object obj) -> bool
PrtgAPI.PrtgRequestException GetBaseException() -> Exception
PrtgAPI.PrtgRequestException GetHashCode() -> int
PrtgAPI.PrtgRequestException GetObjectData(SerializationInfo info, StreamingContext context) -> void
PrtgAPI.PrtgRequestException GetType() -> Type
PrtgAPI.PrtgRequestException GetType() -> Type
PrtgAPI.PrtgRequestException HelpLink { get; set; } -> string
PrtgAPI.PrtgRequestException HResult { get; } -> int
PrtgAPI.PrtgRequestException InnerException { get; } -> Exception
PrtgAPI.PrtgRequestException Message { get; } -> string
PrtgAPI.PrtgRequestException Source { get; set; } -> string
PrtgAPI.PrtgRequestException StackTrace { get; } -> string
PrtgAPI.PrtgRequestException TargetSite { get; } -> MethodBase
PrtgAPI.PrtgRequestException ToString() -> string
PrtgAPI.RecordAge => Enum
PrtgAPI.RecordAge.All -> Value
PrtgAPI.RecordAge.LastMonth -> Value
PrtgAPI.RecordAge.LastSixMonths -> Value
PrtgAPI.RecordAge.LastWeek -> Value
PrtgAPI.RecordAge.LastYear -> Value
PrtgAPI.RecordAge.Today -> Value
PrtgAPI.RecordAge.Yesterday -> Value
PrtgAPI.Request.PrtgTargetHelper => Class
PrtgAPI.Request.PrtgTargetHelper Equals(object obj) -> bool
PrtgAPI.Request.PrtgTargetHelper GetExeXmlFiles(Either<Device,int> deviceOrId, Func<int,bool> progressCallback = null, int timeout = 60, CancellationToken token = default(CancellationToken)) -> List<ExeFileTarget>
PrtgAPI.Request.PrtgTargetHelper GetExeXmlFilesAsync(Either<Device,int> deviceOrId, Func<int,bool> progressCallback = null, int timeout = 60, CancellationToken token = default(CancellationToken)) -> Task<List<ExeFileTarget>>
PrtgAPI.Request.PrtgTargetHelper GetHashCode() -> int
PrtgAPI.Request.PrtgTargetHelper GetSensorTargets(Either<Device,int> deviceOrId, string sensorType, string tableName = null, Func<int,bool> progressCallback = null, int timeout = 60, ISensorQueryTargetParameters queryParameters = null, CancellationToken token = default(CancellationToken)) -> List<GenericSensorTarget>
PrtgAPI.Request.PrtgTargetHelper GetSensorTargetsAsync(Either<Device,int> deviceOrId, string sensorType, string tableName = null, Func<int,bool> progressCallback = null, int timeout = 60, ISensorQueryTargetParameters queryParameters = null, CancellationToken token = default(CancellationToken)) -> Task<List<GenericSensorTarget>>
PrtgAPI.Request.PrtgTargetHelper GetSqlServerQueries(Either<Device,int> deviceOrId, Func<int,bool> progressCallback = null, int timeout = 60, CancellationToken token = default(CancellationToken)) -> List<SqlServerQueryTarget>
PrtgAPI.Request.PrtgTargetHelper GetSqlServerQueriesAsync(Either<Device,int> deviceOrId, Func<int,bool> progressCallback = null, int timeout = 60, CancellationToken token = default(CancellationToken)) -> Task<List<SqlServerQueryTarget>>
PrtgAPI.Request.PrtgTargetHelper GetType() -> Type
PrtgAPI.Request.PrtgTargetHelper GetWmiServices(Either<Device,int> deviceOrId, Func<int,bool> progressCallback = null, int timeout = 60, CancellationToken token = default(CancellationToken)) -> List<WmiServiceTarget>
PrtgAPI.Request.PrtgTargetHelper GetWmiServicesAsync(Either<Device,int> deviceOrId, Func<int,bool> progressCallback = null, int timeout = 60, CancellationToken token = default(CancellationToken)) -> Task<List<WmiServiceTarget>>
PrtgAPI.Request.PrtgTargetHelper ToString() -> string
PrtgAPI.RestartCoreStage => Enum
PrtgAPI.RestartCoreStage.Completed -> Value
PrtgAPI.RestartCoreStage.Restart -> Value
PrtgAPI.RestartCoreStage.Shutdown -> Value
PrtgAPI.RestartCoreStage.Startup -> Value
PrtgAPI.RetryMode => Enum
PrtgAPI.RetryMode.DoNotRetry -> Value
PrtgAPI.RetryMode.Retry -> Value
PrtgAPI.RetryRequestEventArgs => Class
PrtgAPI.RetryRequestEventArgs Equals(object obj) -> bool
PrtgAPI.RetryRequestEventArgs Exception { get; set; } -> Exception
PrtgAPI.RetryRequestEventArgs GetHashCode() -> int
PrtgAPI.RetryRequestEventArgs GetType() -> Type
PrtgAPI.RetryRequestEventArgs RetriesRemaining { get; set; } -> int
PrtgAPI.RetryRequestEventArgs ToString() -> string
PrtgAPI.RetryRequestEventArgs Url { get; set; } -> string
PrtgAPI.ScanningInterval => Class
PrtgAPI.ScanningInterval Equals(object other) -> bool
PrtgAPI.ScanningInterval Equals(ScanningInterval other) -> bool
PrtgAPI.ScanningInterval FifteenMinutes -> ScanningInterval
PrtgAPI.ScanningInterval FiveMinutes -> ScanningInterval
PrtgAPI.ScanningInterval FourHours -> ScanningInterval
PrtgAPI.ScanningInterval GetHashCode() -> int
PrtgAPI.ScanningInterval GetType() -> Type
PrtgAPI.ScanningInterval OneHour -> ScanningInterval
PrtgAPI.ScanningInterval op_Implicit(StandardScanningInterval interval) -> ScanningInterval
PrtgAPI.ScanningInterval op_Implicit(TimeSpan interval) -> ScanningInterval
PrtgAPI.ScanningInterval Parse(object value) -> ScanningInterval
PrtgAPI.ScanningInterval SixHours -> ScanningInterval
PrtgAPI.ScanningInterval SixtySeconds -> ScanningInterval
PrtgAPI.ScanningInterval TenMinutes -> ScanningInterval
PrtgAPI.ScanningInterval ThirtyMinutes -> ScanningInterval
PrtgAPI.ScanningInterval ThirtySeconds -> ScanningInterval
PrtgAPI.ScanningInterval TimeSpan { get; } -> TimeSpan
PrtgAPI.ScanningInterval ToString() -> string
PrtgAPI.ScanningInterval TryParse(object value, ScanningInterval& result) -> bool
PrtgAPI.ScanningInterval TwelveHours -> ScanningInterval
PrtgAPI.ScanningInterval TwentyFourHours -> ScanningInterval
PrtgAPI.Schedule => Class
PrtgAPI.Schedule Active { get; set; } -> bool
PrtgAPI.Schedule DisplayType { get; set; } -> string
PrtgAPI.Schedule Equals(object other) -> bool
PrtgAPI.Schedule Equals(Schedule other) -> bool
PrtgAPI.Schedule GetHashCode() -> int
PrtgAPI.Schedule GetType() -> Type
PrtgAPI.Schedule Id { get; set; } -> int
PrtgAPI.Schedule Name { get; set; } -> string
PrtgAPI.Schedule ParentId { get; set; } -> int
PrtgAPI.Schedule Tags { get; set; } -> string[]
PrtgAPI.Schedule TimeTable { get; set; } -> TimeTable
PrtgAPI.Schedule ToString() -> string
PrtgAPI.Schedule Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.Schedule Url { get; set; } -> string
PrtgAPI.Schedules.TimeSlot => Class
PrtgAPI.Schedules.TimeSlot Active { get; } -> bool
PrtgAPI.Schedules.TimeSlot CompareTo(object other) -> int
PrtgAPI.Schedules.TimeSlot CompareTo(TimeSlot other) -> int
PrtgAPI.Schedules.TimeSlot Day { get; } -> DayOfWeek
PrtgAPI.Schedules.TimeSlot Equals(object other) -> bool
PrtgAPI.Schedules.TimeSlot Equals(TimeSlot other) -> bool
PrtgAPI.Schedules.TimeSlot GetHashCode() -> int
PrtgAPI.Schedules.TimeSlot GetType() -> Type
PrtgAPI.Schedules.TimeSlot Hour { get; } -> int
PrtgAPI.Schedules.TimeSlot ToString() -> string
PrtgAPI.Schedules.TimeSlotRow => Class
PrtgAPI.Schedules.TimeSlotRow CompareTo(object other) -> int
PrtgAPI.Schedules.TimeSlotRow CompareTo(TimeSlotRow other) -> int
PrtgAPI.Schedules.TimeSlotRow Equals(object other) -> bool
PrtgAPI.Schedules.TimeSlotRow Equals(TimeSlotRow other) -> bool
PrtgAPI.Schedules.TimeSlotRow Friday { get; } -> bool
PrtgAPI.Schedules.TimeSlotRow GetHashCode() -> int
PrtgAPI.Schedules.TimeSlotRow GetType() -> Type
PrtgAPI.Schedules.TimeSlotRow Hour { get; } -> int
PrtgAPI.Schedules.TimeSlotRow Monday { get; } -> bool
PrtgAPI.Schedules.TimeSlotRow Saturday { get; } -> bool
PrtgAPI.Schedules.TimeSlotRow Sunday { get; } -> bool
PrtgAPI.Schedules.TimeSlotRow Thursday { get; } -> bool
PrtgAPI.Schedules.TimeSlotRow Time { get; } -> string
PrtgAPI.Schedules.TimeSlotRow ToString() -> string
PrtgAPI.Schedules.TimeSlotRow Tuesday { get; } -> bool
PrtgAPI.Schedules.TimeSlotRow Wednesday { get; } -> bool
PrtgAPI.Schedules.TimeTable => Class
PrtgAPI.Schedules.TimeTable Equals(object other) -> bool
PrtgAPI.Schedules.TimeTable Equals(TimeTable other) -> bool
PrtgAPI.Schedules.TimeTable GetEnumerator() -> IEnumerator<TimeSlotRow>
PrtgAPI.Schedules.TimeTable GetHashCode() -> int
PrtgAPI.Schedules.TimeTable GetType() -> Type
PrtgAPI.Schedules.TimeTable Grid { get; } -> IReadOnlyDictionary<DayOfWeek,TimeSlot[]>
PrtgAPI.Schedules.TimeTable Item { get; } -> TimeSlot
PrtgAPI.Schedules.TimeTable Item { get; } -> TimeSlot
PrtgAPI.Schedules.TimeTable Item { get; } -> TimeSlot[]
PrtgAPI.Schedules.TimeTable Item { get; } -> TimeSlot[]
PrtgAPI.Schedules.TimeTable Item { get; } -> TimeSlot[]
PrtgAPI.Schedules.TimeTable Rows { get; } -> List<TimeSlotRow>
PrtgAPI.Schedules.TimeTable ToString() -> string
PrtgAPI.SearchFilter => Class
PrtgAPI.SearchFilter Equals(object obj) -> bool
PrtgAPI.SearchFilter FilterMode { get; set; } -> FilterMode
PrtgAPI.SearchFilter GetHashCode() -> int
PrtgAPI.SearchFilter GetType() -> Type
PrtgAPI.SearchFilter Operator { get; set; } -> FilterOperator
PrtgAPI.SearchFilter Property { get; set; } -> Property
PrtgAPI.SearchFilter ToString() -> string
PrtgAPI.SearchFilter Value { get; set; } -> object
PrtgAPI.Sensor => Class
PrtgAPI.Sensor Access { get; set; } -> Access
PrtgAPI.Sensor Active { get; set; } -> bool
PrtgAPI.Sensor BaseType { get; set; } -> BaseType
PrtgAPI.Sensor Comments { get; set; } -> string
PrtgAPI.Sensor DataCollectedSince { get; set; } -> DateTime?
PrtgAPI.Sensor Dependency { get; set; } -> string
PrtgAPI.Sensor Device { get; set; } -> string
PrtgAPI.Sensor DisplayLastValue { get; set; } -> string
PrtgAPI.Sensor DisplayType { get; set; } -> string
PrtgAPI.Sensor DownDuration { get; set; } -> TimeSpan?
PrtgAPI.Sensor Downtime { get; set; } -> double?
PrtgAPI.Sensor Equals(object obj) -> bool
PrtgAPI.Sensor Favorite { get; set; } -> bool
PrtgAPI.Sensor GetHashCode() -> int
PrtgAPI.Sensor GetType() -> Type
PrtgAPI.Sensor Group { get; set; } -> string
PrtgAPI.Sensor Id { get; set; } -> int
PrtgAPI.Sensor InheritInterval { get; } -> bool
PrtgAPI.Sensor Interval { get; set; } -> TimeSpan
PrtgAPI.Sensor LastCheck { get; set; } -> DateTime?
PrtgAPI.Sensor LastDown { get; set; } -> DateTime?
PrtgAPI.Sensor LastUp { get; set; } -> DateTime?
PrtgAPI.Sensor LastValue { get; set; } -> double?
PrtgAPI.Sensor Message { get; set; } -> string
PrtgAPI.Sensor MiniGraph { get; set; } -> string
PrtgAPI.Sensor Name { get; set; } -> string
PrtgAPI.Sensor NotificationTypes { get; } -> NotificationTypes
PrtgAPI.Sensor ParentId { get; set; } -> int
PrtgAPI.Sensor Position { get; set; } -> int
PrtgAPI.Sensor Priority { get; set; } -> Priority
PrtgAPI.Sensor Probe { get; set; } -> string
PrtgAPI.Sensor Schedule { get; set; } -> string
PrtgAPI.Sensor Status { get; set; } -> Status
PrtgAPI.Sensor Tags { get; set; } -> string[]
PrtgAPI.Sensor ToString() -> string
PrtgAPI.Sensor TotalDowntime { get; set; } -> TimeSpan?
PrtgAPI.Sensor TotalMonitorTime { get; set; } -> TimeSpan
PrtgAPI.Sensor TotalUptime { get; set; } -> TimeSpan?
PrtgAPI.Sensor Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.Sensor UpDuration { get; set; } -> TimeSpan?
PrtgAPI.Sensor Uptime { get; set; } -> double?
PrtgAPI.Sensor Url { get; set; } -> string
PrtgAPI.SensorHistoryRecord => Class
PrtgAPI.SensorHistoryRecord ChannelRecords { get; set; } -> List<ChannelHistoryRecord>
PrtgAPI.SensorHistoryRecord Coverage { get; } -> int
PrtgAPI.SensorHistoryRecord DateTime { get; set; } -> DateTime
PrtgAPI.SensorHistoryRecord Equals(object obj) -> bool
PrtgAPI.SensorHistoryRecord GetHashCode() -> int
PrtgAPI.SensorHistoryRecord GetType() -> Type
PrtgAPI.SensorHistoryRecord SensorId { get; set; } -> int
PrtgAPI.SensorHistoryRecord ToString() -> string
PrtgAPI.SensorHistoryReportItem => Class
PrtgAPI.SensorHistoryReportItem Duration { get; } -> TimeSpan
PrtgAPI.SensorHistoryReportItem EndDate { get; } -> DateTime
PrtgAPI.SensorHistoryReportItem Equals(object obj) -> bool
PrtgAPI.SensorHistoryReportItem GetHashCode() -> int
PrtgAPI.SensorHistoryReportItem GetType() -> Type
PrtgAPI.SensorHistoryReportItem SensorId { get; } -> int
PrtgAPI.SensorHistoryReportItem StartDate { get; } -> DateTime
PrtgAPI.SensorHistoryReportItem Status { get; } -> Status
PrtgAPI.SensorHistoryReportItem ToString() -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbe => Class
PrtgAPI.SensorOrDeviceOrGroupOrProbe Access { get; set; } -> Access
PrtgAPI.SensorOrDeviceOrGroupOrProbe Active { get; set; } -> bool
PrtgAPI.SensorOrDeviceOrGroupOrProbe BaseType { get; set; } -> BaseType
PrtgAPI.SensorOrDeviceOrGroupOrProbe Comments { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbe Dependency { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbe DisplayType { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbe Equals(object obj) -> bool
PrtgAPI.SensorOrDeviceOrGroupOrProbe GetHashCode() -> int
PrtgAPI.SensorOrDeviceOrGroupOrProbe GetType() -> Type
PrtgAPI.SensorOrDeviceOrGroupOrProbe Id { get; set; } -> int
PrtgAPI.SensorOrDeviceOrGroupOrProbe InheritInterval { get; } -> bool
PrtgAPI.SensorOrDeviceOrGroupOrProbe Interval { get; set; } -> TimeSpan
PrtgAPI.SensorOrDeviceOrGroupOrProbe Message { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbe Name { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbe NotificationTypes { get; } -> NotificationTypes
PrtgAPI.SensorOrDeviceOrGroupOrProbe ParentId { get; set; } -> int
PrtgAPI.SensorOrDeviceOrGroupOrProbe Position { get; set; } -> int
PrtgAPI.SensorOrDeviceOrGroupOrProbe Priority { get; set; } -> Priority
PrtgAPI.SensorOrDeviceOrGroupOrProbe Schedule { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbe Status { get; set; } -> Status
PrtgAPI.SensorOrDeviceOrGroupOrProbe Tags { get; set; } -> string[]
PrtgAPI.SensorOrDeviceOrGroupOrProbe ToString() -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbe Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.SensorOrDeviceOrGroupOrProbe Url { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket => Class
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket Active { get; set; } -> bool
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket DisplayType { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket Equals(object obj) -> bool
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket GetHashCode() -> int
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket GetType() -> Type
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket Id { get; set; } -> int
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket Message { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket Name { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket ParentId { get; set; } -> int
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket Priority { get; set; } -> Priority
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket Tags { get; set; } -> string[]
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket ToString() -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicket Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData => Class
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData Active { get; set; } -> bool
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData DisplayType { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData Equals(object obj) -> bool
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData GetHashCode() -> int
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData GetType() -> Type
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData Id { get; set; } -> int
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData Message { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData Name { get; set; } -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData ParentId { get; set; } -> int
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData Tags { get; set; } -> string[]
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData ToString() -> string
PrtgAPI.SensorOrDeviceOrGroupOrProbeOrTicketOrTicketData Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.SensorQueryTarget => Class
PrtgAPI.SensorQueryTarget Equals(object obj) -> bool
PrtgAPI.SensorQueryTarget GetHashCode() -> int
PrtgAPI.SensorQueryTarget GetType() -> Type
PrtgAPI.SensorQueryTarget op_Implicit(string value) -> SensorQueryTarget
PrtgAPI.SensorQueryTarget ToString() -> string
PrtgAPI.SensorQueryTarget Value { get; set; } -> string
PrtgAPI.SensorSettings => Class
PrtgAPI.SensorSettings AutoAcknowledge { get; set; } -> bool?
PrtgAPI.SensorSettings BandwidthSpeedUnit { get; set; } -> DataUnit?
PrtgAPI.SensorSettings BandwidthTimeUnit { get; set; } -> TimeUnit?
PrtgAPI.SensorSettings BandwidthVolumeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.SensorSettings ChannelDefinition { get; set; } -> string[]
PrtgAPI.SensorSettings Database { get; set; } -> string
PrtgAPI.SensorSettings DebugMode { get; set; } -> DebugMode?
PrtgAPI.SensorSettings DependencyDelay { get; set; } -> int?
PrtgAPI.SensorSettings DependencyType { get; set; } -> DependencyType?
PrtgAPI.SensorSettings DependentObjectId { get; set; } -> int?
PrtgAPI.SensorSettings DiskSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.SensorSettings Equals(object obj) -> bool
PrtgAPI.SensorSettings ExeFile { get; } -> ExeFileTarget
PrtgAPI.SensorSettings ExeParameters { get; set; } -> string
PrtgAPI.SensorSettings FactoryErrorFormula { get; set; } -> string
PrtgAPI.SensorSettings FactoryErrorMode { get; set; } -> FactoryErrorMode?
PrtgAPI.SensorSettings FactoryMissingDataMode { get; set; } -> FactoryMissingDataMode?
PrtgAPI.SensorSettings FileSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.SensorSettings GetHashCode() -> int
PrtgAPI.SensorSettings GetType() -> Type
PrtgAPI.SensorSettings GraphType { get; set; } -> GraphType
PrtgAPI.SensorSettings HasProxyPassword { get; } -> bool
PrtgAPI.SensorSettings HttpRequestMethod { get; set; } -> HttpRequestMethod?
PrtgAPI.SensorSettings InheritAccess { get; set; } -> bool?
PrtgAPI.SensorSettings InheritChannelUnit { get; set; } -> bool?
PrtgAPI.SensorSettings InheritDependency { get; set; } -> bool?
PrtgAPI.SensorSettings InheritInterval { get; set; } -> bool?
PrtgAPI.SensorSettings InheritProxy { get; set; } -> bool?
PrtgAPI.SensorSettings InstanceName { get; set; } -> string
PrtgAPI.SensorSettings Interval { get; } -> ScanningInterval
PrtgAPI.SensorSettings IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.SensorSettings MaintenanceEnabled { get; set; } -> bool?
PrtgAPI.SensorSettings MaintenanceEnd { get; } -> DateTime?
PrtgAPI.SensorSettings MaintenanceStart { get; } -> DateTime?
PrtgAPI.SensorSettings MemoryUsageUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.SensorSettings MonitorPerformance { get; set; } -> bool?
PrtgAPI.SensorSettings Mutex { get; set; } -> string
PrtgAPI.SensorSettings Name { get; set; } -> string
PrtgAPI.SensorSettings NotifyChanged { get; set; } -> bool?
PrtgAPI.SensorSettings ParentTags { get; set; } -> string[]
PrtgAPI.SensorSettings PingCount { get; set; } -> int?
PrtgAPI.SensorSettings PingDelay { get; set; } -> int?
PrtgAPI.SensorSettings PingMode { get; set; } -> PingMode?
PrtgAPI.SensorSettings PingPacketSize { get; set; } -> int?
PrtgAPI.SensorSettings PingRemotePacketSize { get; set; } -> int?
PrtgAPI.SensorSettings PostContentType { get; set; } -> string
PrtgAPI.SensorSettings PostData { get; set; } -> string
PrtgAPI.SensorSettings PrimaryChannel { get; } -> Channel
PrtgAPI.SensorSettings Priority { get; set; } -> Priority?
PrtgAPI.SensorSettings ProxyAddress { get; set; } -> string
PrtgAPI.SensorSettings ProxyPort { get; set; } -> int?
PrtgAPI.SensorSettings ProxyUser { get; set; } -> string
PrtgAPI.SensorSettings Schedule { get; } -> Schedule
PrtgAPI.SensorSettings ServiceName { get; set; } -> string
PrtgAPI.SensorSettings SetExeEnvironmentVariables { get; set; } -> bool?
PrtgAPI.SensorSettings SqlEncryptionMode { get; set; } -> SqlEncryptionMode?
PrtgAPI.SensorSettings SqlInputParameter { get; set; } -> string
PrtgAPI.SensorSettings SqlTransactionMode { get; set; } -> SqlTransactionMode?
PrtgAPI.SensorSettings StartStopped { get; set; } -> bool?
PrtgAPI.SensorSettings Tags { get; set; } -> string[]
PrtgAPI.SensorSettings Target { get; set; } -> string
PrtgAPI.SensorSettings Timeout { get; set; } -> int?
PrtgAPI.SensorSettings ToString() -> string
PrtgAPI.SensorSettings Url { get; set; } -> string
PrtgAPI.SensorSettings UseCustomInstance { get; set; } -> bool?
PrtgAPI.SensorSettings UseCustomPostContent { get; set; } -> bool?
PrtgAPI.SensorSettings UseSNIFromUrl { get; set; } -> bool?
PrtgAPI.SensorSettings UseSqlInputParameter { get; set; } -> bool?
PrtgAPI.SensorSettings UseWindowsAuthentication { get; set; } -> bool?
PrtgAPI.SensorSettings WmiMode { get; set; } -> WmiMode?
PrtgAPI.SensorTotals => Class
PrtgAPI.SensorTotals DownAcknowledgedSensors { get; } -> int
PrtgAPI.SensorTotals DownSensors { get; } -> int
PrtgAPI.SensorTotals Equals(object obj) -> bool
PrtgAPI.SensorTotals GetHashCode() -> int
PrtgAPI.SensorTotals GetType() -> Type
PrtgAPI.SensorTotals PartialDownSensors { get; } -> int
PrtgAPI.SensorTotals PausedSensors { get; } -> int
PrtgAPI.SensorTotals ToString() -> string
PrtgAPI.SensorTotals TotalSensors { get; } -> int
PrtgAPI.SensorTotals UndefinedSensors { get; } -> int
PrtgAPI.SensorTotals UnusualSensors { get; } -> int
PrtgAPI.SensorTotals UpSensors { get; } -> int
PrtgAPI.SensorTotals WarningSensors { get; } -> int
PrtgAPI.SensorType => Enum
PrtgAPI.SensorType.ExeXml -> Value
PrtgAPI.SensorType.Factory -> Value
PrtgAPI.SensorType.Http -> Value
PrtgAPI.SensorType.SqlServerDB -> Value
PrtgAPI.SensorType.WmiService -> Value
PrtgAPI.SensorTypeDescriptor => Class
PrtgAPI.SensorTypeDescriptor Description { get; set; } -> string
PrtgAPI.SensorTypeDescriptor Equals(object obj) -> bool
PrtgAPI.SensorTypeDescriptor GetHashCode() -> int
PrtgAPI.SensorTypeDescriptor GetType() -> Type
PrtgAPI.SensorTypeDescriptor Id { get; set; } -> string
PrtgAPI.SensorTypeDescriptor Name { get; set; } -> string
PrtgAPI.SensorTypeDescriptor QueryTargets { get; set; } -> List<SensorQueryTarget>
PrtgAPI.SensorTypeDescriptor ToString() -> string
PrtgAPI.ServerStatus => Class
PrtgAPI.ServerStatus AcknowledgedAlarms { get; } -> int
PrtgAPI.ServerStatus Activated { get; } -> bool?
PrtgAPI.ServerStatus Alarms { get; } -> int
PrtgAPI.ServerStatus AutoDiscoveryTasks { get; set; } -> int
PrtgAPI.ServerStatus BackgroundTasks { get; set; } -> int
PrtgAPI.ServerStatus ClusterNodeName { get; } -> string
PrtgAPI.ServerStatus ClusterNodeType { get; } -> ClusterNodeType?
PrtgAPI.ServerStatus CommercialExpiryDays { get; } -> int?
PrtgAPI.ServerStatus CorrelationTasks { get; set; } -> int
PrtgAPI.ServerStatus DateTime { get; } -> DateTime
PrtgAPI.ServerStatus Equals(object obj) -> bool
PrtgAPI.ServerStatus Favorites { get; set; } -> int
PrtgAPI.ServerStatus GetHashCode() -> int
PrtgAPI.ServerStatus GetType() -> Type
PrtgAPI.ServerStatus HostId { get; set; } -> string
PrtgAPI.ServerStatus Is64Bit { get; } -> bool
PrtgAPI.ServerStatus IsAdminUser { get; set; } -> bool
PrtgAPI.ServerStatus IsCluster { get; } -> bool
PrtgAPI.ServerStatus LicenseType { get; } -> LicenseType
PrtgAPI.ServerStatus LowMemory { get; set; } -> bool
PrtgAPI.ServerStatus MaintenanceExpiryDays { get; } -> int?
PrtgAPI.ServerStatus MaxSensorCount { get; } -> int?
PrtgAPI.ServerStatus NewAlarms { get; set; } -> int
PrtgAPI.ServerStatus NewLogs { get; set; } -> int
PrtgAPI.ServerStatus NewTickets { get; } -> int
PrtgAPI.ServerStatus OverloadProtection { get; set; } -> bool
PrtgAPI.ServerStatus PartialAlarms { get; } -> int
PrtgAPI.ServerStatus PausedSensors { get; } -> int
PrtgAPI.ServerStatus ReadOnlyAllowAcknowledge { get; } -> bool
PrtgAPI.ServerStatus ReadOnlyUser { get; } -> bool
PrtgAPI.ServerStatus ReportTasks { get; set; } -> int
PrtgAPI.ServerStatus TicketUser { get; } -> bool
PrtgAPI.ServerStatus ToString() -> string
PrtgAPI.ServerStatus TrialExpiryDays { get; } -> int?
PrtgAPI.ServerStatus UnknownSensors { get; } -> int
PrtgAPI.ServerStatus UnusualSensors { get; } -> int
PrtgAPI.ServerStatus UpdateAvailable { get; set; } -> bool
PrtgAPI.ServerStatus UpSensors { get; } -> int
PrtgAPI.ServerStatus UserId { get; set; } -> string
PrtgAPI.ServerStatus UserTimeZone { get; set; } -> string
PrtgAPI.ServerStatus Version { get; } -> Version
PrtgAPI.ServerStatus WarningSensors { get; } -> int
PrtgAPI.SNMPCounterMode => Enum
PrtgAPI.SNMPCounterMode.Use32BitOnly -> Value
PrtgAPI.SNMPCounterMode.Use64BitIfAvailable -> Value
PrtgAPI.SNMPOverflowMode => Enum
PrtgAPI.SNMPOverflowMode.Handle -> Value
PrtgAPI.SNMPOverflowMode.Ignore -> Value
PrtgAPI.SNMPPortIdentification => Enum
PrtgAPI.SNMPPortIdentification.Automatic -> Value
PrtgAPI.SNMPPortIdentification.NoPortUpdate -> Value
PrtgAPI.SNMPPortIdentification.UseIfAlias -> Value
PrtgAPI.SNMPPortIdentification.UseIfDescr -> Value
PrtgAPI.SNMPPortIdentification.UseIfName -> Value
PrtgAPI.SNMPPortNameUpdateMode => Enum
PrtgAPI.SNMPPortNameUpdateMode.Automatic -> Value
PrtgAPI.SNMPPortNameUpdateMode.Manual -> Value
PrtgAPI.SNMPRequestMode => Enum
PrtgAPI.SNMPRequestMode.MultiGet -> Value
PrtgAPI.SNMPRequestMode.SingleGet -> Value
PrtgAPI.SNMPVersion => Enum
PrtgAPI.SNMPVersion.v1 -> Value
PrtgAPI.SNMPVersion.v2c -> Value
PrtgAPI.SNMPVersion.v3 -> Value
PrtgAPI.SNMPZeroValueMode => Enum
PrtgAPI.SNMPZeroValueMode.Handle -> Value
PrtgAPI.SNMPZeroValueMode.Ignore -> Value
PrtgAPI.SortDirection => Enum
PrtgAPI.SortDirection.Ascending -> Value
PrtgAPI.SortDirection.Descending -> Value
PrtgAPI.SqlEncryptionMode => Enum
PrtgAPI.SqlEncryptionMode.Default -> Value
PrtgAPI.SqlEncryptionMode.Encrypt -> Value
PrtgAPI.SqlEncryptionMode.EncryptAndValidate -> Value
PrtgAPI.SqlProcessingMode => Enum
PrtgAPI.SqlProcessingMode.CountRows -> Value
PrtgAPI.SqlProcessingMode.Execute -> Value
PrtgAPI.SqlTransactionMode => Enum
PrtgAPI.SqlTransactionMode.CommitOnSuccess -> Value
PrtgAPI.SqlTransactionMode.None -> Value
PrtgAPI.SqlTransactionMode.Rollback -> Value
PrtgAPI.SSHElevationMode => Enum
PrtgAPI.SSHElevationMode.RunAsAnotherViaSu -> Value
PrtgAPI.SSHElevationMode.RunAsAnotherWithoutPasswordViaSudo -> Value
PrtgAPI.SSHElevationMode.RunAsAnotherWithPasswordViaSudo -> Value
PrtgAPI.SSHElevationMode.RunAsUser -> Value
PrtgAPI.SSHEngine => Enum
PrtgAPI.SSHEngine.CompatibilityMode -> Value
PrtgAPI.SSHEngine.Default -> Value
PrtgAPI.StandardScanningInterval => Enum
PrtgAPI.StandardScanningInterval.FifteenMinutes -> Value
PrtgAPI.StandardScanningInterval.FiveMinutes -> Value
PrtgAPI.StandardScanningInterval.FourHours -> Value
PrtgAPI.StandardScanningInterval.OneHour -> Value
PrtgAPI.StandardScanningInterval.SixHours -> Value
PrtgAPI.StandardScanningInterval.SixtySeconds -> Value
PrtgAPI.StandardScanningInterval.TenMinutes -> Value
PrtgAPI.StandardScanningInterval.ThirtyMinutes -> Value
PrtgAPI.StandardScanningInterval.ThirtySeconds -> Value
PrtgAPI.StandardScanningInterval.TwelveHours -> Value
PrtgAPI.StandardScanningInterval.TwentyFourHours -> Value
PrtgAPI.StandardTriggerChannel => Enum
PrtgAPI.StandardTriggerChannel.Primary -> Value
PrtgAPI.StandardTriggerChannel.Total -> Value
PrtgAPI.StandardTriggerChannel.TrafficIn -> Value
PrtgAPI.StandardTriggerChannel.TrafficOut -> Value
PrtgAPI.Status => Enum
PrtgAPI.Status.Collecting -> Value
PrtgAPI.Status.Down -> Value
PrtgAPI.Status.DownAcknowledged -> Value
PrtgAPI.Status.DownPartial -> Value
PrtgAPI.Status.None -> Value
PrtgAPI.Status.NoProbe -> Value
PrtgAPI.Status.Paused -> Value
PrtgAPI.Status.PausedByDependency -> Value
PrtgAPI.Status.PausedByLicense -> Value
PrtgAPI.Status.PausedBySchedule -> Value
PrtgAPI.Status.PausedByUser -> Value
PrtgAPI.Status.PausedUntil -> Value
PrtgAPI.Status.Unknown -> Value
PrtgAPI.Status.Unusual -> Value
PrtgAPI.Status.Up -> Value
PrtgAPI.Status.Warning -> Value
PrtgAPI.StringEnum<TEnum> => Class
PrtgAPI.StringEnum<TEnum> Equals(object obj) -> bool
PrtgAPI.StringEnum<TEnum> Equals(StringEnum<TEnum> other) -> bool
PrtgAPI.StringEnum<TEnum> GetHashCode() -> int
PrtgAPI.StringEnum<TEnum> GetType() -> Type
PrtgAPI.StringEnum<TEnum> op_Equality(StringEnum<TEnum> first, StringEnum<TEnum> second) -> bool
PrtgAPI.StringEnum<TEnum> op_Implicit(string value) -> StringEnum<TEnum>
PrtgAPI.StringEnum<TEnum> op_Implicit(TEnum enumValue) -> StringEnum<TEnum>
PrtgAPI.StringEnum<TEnum> op_Inequality(StringEnum<TEnum> first, StringEnum<TEnum> second) -> bool
PrtgAPI.StringEnum<TEnum> StringValue { get; } -> string
PrtgAPI.StringEnum<TEnum> ToString() -> string
PrtgAPI.StringEnum<TEnum> Value { get; } -> TEnum?
PrtgAPI.SummaryMode => Enum
PrtgAPI.SummaryMode.AfterFirstDown -> Value
PrtgAPI.SummaryMode.AfterFirstDownUp -> Value
PrtgAPI.SummaryMode.All -> Value
PrtgAPI.SummaryMode.AllButDown -> Value
PrtgAPI.SummaryMode.AllButDownAndUp -> Value
PrtgAPI.SummaryMode.None -> Value
PrtgAPI.SyslogEncoding => Enum
PrtgAPI.SyslogEncoding.ANSI -> Value
PrtgAPI.SyslogEncoding.UTF8 -> Value
PrtgAPI.SyslogFacility => Enum
PrtgAPI.SyslogFacility.Local0 -> Value
PrtgAPI.SyslogFacility.Local1 -> Value
PrtgAPI.SyslogFacility.Local2 -> Value
PrtgAPI.SyslogFacility.Local3 -> Value
PrtgAPI.SyslogFacility.Local4 -> Value
PrtgAPI.SyslogFacility.Local5 -> Value
PrtgAPI.SyslogFacility.Local6 -> Value
PrtgAPI.SyslogFacility.Local7 -> Value
PrtgAPI.SyslogFacility.UserLevel -> Value
PrtgAPI.SystemCacheType => Enum
PrtgAPI.SystemCacheType.General -> Value
PrtgAPI.SystemCacheType.GraphData -> Value
PrtgAPI.SystemInfo => Class
PrtgAPI.SystemInfo DeviceId { get; } -> int
PrtgAPI.SystemInfo Equals(object obj) -> bool
PrtgAPI.SystemInfo GetHashCode() -> int
PrtgAPI.SystemInfo GetType() -> Type
PrtgAPI.SystemInfo Hardware { get; } -> List<DeviceHardwareInfo>
PrtgAPI.SystemInfo Processes { get; } -> List<DeviceProcessInfo>
PrtgAPI.SystemInfo Services { get; } -> List<DeviceServiceInfo>
PrtgAPI.SystemInfo Software { get; } -> List<DeviceSoftwareInfo>
PrtgAPI.SystemInfo System { get; } -> List<DeviceSystemInfo>
PrtgAPI.SystemInfo ToString() -> string
PrtgAPI.SystemInfo Users { get; } -> List<DeviceUserInfo>
PrtgAPI.SystemInfoType => Enum
PrtgAPI.SystemInfoType.Hardware -> Value
PrtgAPI.SystemInfoType.Processes -> Value
PrtgAPI.SystemInfoType.Services -> Value
PrtgAPI.SystemInfoType.Software -> Value
PrtgAPI.SystemInfoType.System -> Value
PrtgAPI.SystemInfoType.Users -> Value
PrtgAPI.TableSettings => Class
PrtgAPI.TableSettings BandwidthSpeedUnit { get; set; } -> DataUnit?
PrtgAPI.TableSettings BandwidthTimeUnit { get; set; } -> TimeUnit?
PrtgAPI.TableSettings BandwidthVolumeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.TableSettings DependencyDelay { get; set; } -> int?
PrtgAPI.TableSettings DependencyType { get; set; } -> DependencyType?
PrtgAPI.TableSettings DependentObjectId { get; set; } -> int?
PrtgAPI.TableSettings DiskSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.TableSettings Equals(object obj) -> bool
PrtgAPI.TableSettings FileSizeUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.TableSettings GetHashCode() -> int
PrtgAPI.TableSettings GetType() -> Type
PrtgAPI.TableSettings HasProxyPassword { get; } -> bool
PrtgAPI.TableSettings InheritChannelUnit { get; set; } -> bool?
PrtgAPI.TableSettings InheritDependency { get; set; } -> bool?
PrtgAPI.TableSettings InheritInterval { get; set; } -> bool?
PrtgAPI.TableSettings InheritProxy { get; set; } -> bool?
PrtgAPI.TableSettings Interval { get; } -> ScanningInterval
PrtgAPI.TableSettings IntervalErrorMode { get; set; } -> IntervalErrorMode?
PrtgAPI.TableSettings MaintenanceEnabled { get; set; } -> bool?
PrtgAPI.TableSettings MaintenanceEnd { get; } -> DateTime?
PrtgAPI.TableSettings MaintenanceStart { get; } -> DateTime?
PrtgAPI.TableSettings MemoryUsageUnit { get; set; } -> DataVolumeUnit?
PrtgAPI.TableSettings Name { get; set; } -> string
PrtgAPI.TableSettings Priority { get; set; } -> Priority?
PrtgAPI.TableSettings ProxyAddress { get; set; } -> string
PrtgAPI.TableSettings ProxyPort { get; set; } -> int?
PrtgAPI.TableSettings ProxyUser { get; set; } -> string
PrtgAPI.TableSettings Schedule { get; } -> Schedule
PrtgAPI.TableSettings Tags { get; set; } -> string[]
PrtgAPI.TableSettings ToString() -> string
PrtgAPI.Targets.ExeFileTarget => Class
PrtgAPI.Targets.ExeFileTarget Equals(ExeFileTarget other) -> bool
PrtgAPI.Targets.ExeFileTarget Equals(object other) -> bool
PrtgAPI.Targets.ExeFileTarget GetHashCode() -> int
PrtgAPI.Targets.ExeFileTarget GetType() -> Type
PrtgAPI.Targets.ExeFileTarget Name { get; } -> string
PrtgAPI.Targets.ExeFileTarget op_Implicit(string exeFile) -> ExeFileTarget
PrtgAPI.Targets.ExeFileTarget Parse(object exeFile) -> ExeFileTarget
PrtgAPI.Targets.ExeFileTarget ToString() -> string
PrtgAPI.Targets.ExeFileTarget Type { get; } -> ExeType
PrtgAPI.Targets.GenericSensorTarget => Class
PrtgAPI.Targets.GenericSensorTarget Equals(GenericSensorTarget other) -> bool
PrtgAPI.Targets.GenericSensorTarget Equals(object other) -> bool
PrtgAPI.Targets.GenericSensorTarget GetHashCode() -> int
PrtgAPI.Targets.GenericSensorTarget GetType() -> Type
PrtgAPI.Targets.GenericSensorTarget Name { get; } -> string
PrtgAPI.Targets.GenericSensorTarget Properties { get; } -> string[]
PrtgAPI.Targets.GenericSensorTarget ToString() -> string
PrtgAPI.Targets.GenericSensorTarget Value { get; set; } -> string
PrtgAPI.Targets.SensorTarget<T> => Class
PrtgAPI.Targets.SensorTarget<T> CreateFromCheckbox(string response, string name, Func<string,T> createObj) -> List<T>
PrtgAPI.Targets.SensorTarget<T> CreateFromDropDownOptions(string response, string name, Func<string,T> createObj) -> List<T>
PrtgAPI.Targets.SensorTarget<T> Equals(object other) -> bool
PrtgAPI.Targets.SensorTarget<T> Equals(T other) -> bool
PrtgAPI.Targets.SensorTarget<T> GetHashCode() -> int
PrtgAPI.Targets.SensorTarget<T> GetType() -> Type
PrtgAPI.Targets.SensorTarget<T> Name { get; } -> string
PrtgAPI.Targets.SensorTarget<T> ToDropDownOption(string name) -> string
PrtgAPI.Targets.SensorTarget<T> ToString() -> string
PrtgAPI.Targets.SqlServerQueryTarget => Class
PrtgAPI.Targets.SqlServerQueryTarget Equals(object other) -> bool
PrtgAPI.Targets.SqlServerQueryTarget Equals(SqlServerQueryTarget other) -> bool
PrtgAPI.Targets.SqlServerQueryTarget GetHashCode() -> int
PrtgAPI.Targets.SqlServerQueryTarget GetType() -> Type
PrtgAPI.Targets.SqlServerQueryTarget Name { get; } -> string
PrtgAPI.Targets.SqlServerQueryTarget op_Implicit(string sqlQuery) -> SqlServerQueryTarget
PrtgAPI.Targets.SqlServerQueryTarget Parse(object sqlQuery) -> SqlServerQueryTarget
PrtgAPI.Targets.SqlServerQueryTarget ToString() -> string
PrtgAPI.Targets.WmiServiceTarget => Class
PrtgAPI.Targets.WmiServiceTarget Description { get; } -> string
PrtgAPI.Targets.WmiServiceTarget DisplayName { get; } -> string
PrtgAPI.Targets.WmiServiceTarget Equals(object other) -> bool
PrtgAPI.Targets.WmiServiceTarget Equals(WmiServiceTarget other) -> bool
PrtgAPI.Targets.WmiServiceTarget GetHashCode() -> int
PrtgAPI.Targets.WmiServiceTarget GetType() -> Type
PrtgAPI.Targets.WmiServiceTarget Name { get; } -> string
PrtgAPI.Targets.WmiServiceTarget Status { get; } -> WmiServiceStatus
PrtgAPI.Targets.WmiServiceTarget ToString() -> string
PrtgAPI.TimeUnit => Enum
PrtgAPI.TimeUnit.Day -> Value
PrtgAPI.TimeUnit.Hour -> Value
PrtgAPI.TimeUnit.Minute -> Value
PrtgAPI.TimeUnit.Second -> Value
PrtgAPI.Tree.CompareNode => Class
PrtgAPI.Tree.CompareNode Accept(CompareNodeVisitor visitor) -> void
PrtgAPI.Tree.CompareNode Accept<T>(CompareNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.CompareNode Ancestors() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNode AncestorsAndSelf() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNode Children { get; } -> INodeList<CompareNode>
PrtgAPI.Tree.CompareNode Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.CompareNode Contains(CompareNode node) -> bool
PrtgAPI.Tree.CompareNode DescendantNodes() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNode DescendantNodesAndSelf() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNode Difference { get; } -> FlagEnum<TreeNodeDifference>
PrtgAPI.Tree.CompareNode Equals(object obj) -> bool
PrtgAPI.Tree.CompareNode First { get; } -> PrtgNode
PrtgAPI.Tree.CompareNode GetHashCode() -> int
PrtgAPI.Tree.CompareNode GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.CompareNode GetType() -> Type
PrtgAPI.Tree.CompareNode Item { get; } -> CompareNode
PrtgAPI.Tree.CompareNode Item { get; } -> CompareNode
PrtgAPI.Tree.CompareNode Name { get; } -> string
PrtgAPI.Tree.CompareNode Parent { get; } -> CompareNode
PrtgAPI.Tree.CompareNode Parent { get; } -> TreeNode
PrtgAPI.Tree.CompareNode Second { get; } -> PrtgNode
PrtgAPI.Tree.CompareNode ToString() -> string
PrtgAPI.Tree.CompareNode TreeDifference { get; } -> FlagEnum<TreeNodeDifference>
PrtgAPI.Tree.CompareNode Type { get; } -> TreeNodeType
PrtgAPI.Tree.CompareNode Update(IEnumerable<CompareNode> children) -> CompareNode
PrtgAPI.Tree.CompareNodeCollection => Class
PrtgAPI.Tree.CompareNodeCollection Accept(CompareNodeVisitor visitor) -> void
PrtgAPI.Tree.CompareNodeCollection Accept<T>(CompareNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.CompareNodeCollection Ancestors() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeCollection AncestorsAndSelf() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeCollection Children { get; } -> INodeList<CompareNode>
PrtgAPI.Tree.CompareNodeCollection Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.CompareNodeCollection Contains(CompareNode node) -> bool
PrtgAPI.Tree.CompareNodeCollection DescendantNodes() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeCollection DescendantNodesAndSelf() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeCollection Difference { get; } -> FlagEnum<TreeNodeDifference>
PrtgAPI.Tree.CompareNodeCollection Equals(object obj) -> bool
PrtgAPI.Tree.CompareNodeCollection First { get; } -> PrtgNode
PrtgAPI.Tree.CompareNodeCollection GetHashCode() -> int
PrtgAPI.Tree.CompareNodeCollection GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.CompareNodeCollection GetType() -> Type
PrtgAPI.Tree.CompareNodeCollection Item { get; } -> CompareNode
PrtgAPI.Tree.CompareNodeCollection Item { get; } -> CompareNode
PrtgAPI.Tree.CompareNodeCollection Name { get; } -> string
PrtgAPI.Tree.CompareNodeCollection Parent { get; } -> CompareNode
PrtgAPI.Tree.CompareNodeCollection Parent { get; } -> TreeNode
PrtgAPI.Tree.CompareNodeCollection Second { get; } -> PrtgNode
PrtgAPI.Tree.CompareNodeCollection ToString() -> string
PrtgAPI.Tree.CompareNodeCollection TreeDifference { get; } -> FlagEnum<TreeNodeDifference>
PrtgAPI.Tree.CompareNodeCollection Type { get; } -> TreeNodeType
PrtgAPI.Tree.CompareNodeCollection Update(IEnumerable<CompareNode> children) -> CompareNode
PrtgAPI.Tree.CompareNodeGrouping => Class
PrtgAPI.Tree.CompareNodeGrouping Accept(CompareNodeVisitor visitor) -> void
PrtgAPI.Tree.CompareNodeGrouping Accept<T>(CompareNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.CompareNodeGrouping Ancestors() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeGrouping AncestorsAndSelf() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeGrouping Children { get; } -> INodeList<CompareNode>
PrtgAPI.Tree.CompareNodeGrouping Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.CompareNodeGrouping Contains(CompareNode node) -> bool
PrtgAPI.Tree.CompareNodeGrouping DescendantNodes() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeGrouping DescendantNodesAndSelf() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeGrouping Difference { get; } -> FlagEnum<TreeNodeDifference>
PrtgAPI.Tree.CompareNodeGrouping Equals(object obj) -> bool
PrtgAPI.Tree.CompareNodeGrouping First { get; } -> PrtgNode
PrtgAPI.Tree.CompareNodeGrouping GetHashCode() -> int
PrtgAPI.Tree.CompareNodeGrouping GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.CompareNodeGrouping GetType() -> Type
PrtgAPI.Tree.CompareNodeGrouping Group { get; } -> IReadOnlyList<CompareNode>
PrtgAPI.Tree.CompareNodeGrouping Item { get; } -> CompareNode
PrtgAPI.Tree.CompareNodeGrouping Item { get; } -> CompareNode
PrtgAPI.Tree.CompareNodeGrouping Name { get; } -> string
PrtgAPI.Tree.CompareNodeGrouping Parent { get; } -> CompareNode
PrtgAPI.Tree.CompareNodeGrouping Parent { get; } -> TreeNode
PrtgAPI.Tree.CompareNodeGrouping Second { get; } -> PrtgNode
PrtgAPI.Tree.CompareNodeGrouping ToString() -> string
PrtgAPI.Tree.CompareNodeGrouping TreeDifference { get; } -> FlagEnum<TreeNodeDifference>
PrtgAPI.Tree.CompareNodeGrouping Type { get; } -> TreeNodeType
PrtgAPI.Tree.CompareNodeGrouping Update(IEnumerable<CompareNode> children) -> CompareNode
PrtgAPI.Tree.CompareNodeRewriter => Class
PrtgAPI.Tree.CompareNodeRewriter Equals(object obj) -> bool
PrtgAPI.Tree.CompareNodeRewriter GetHashCode() -> int
PrtgAPI.Tree.CompareNodeRewriter GetType() -> Type
PrtgAPI.Tree.CompareNodeRewriter ToString() -> string
PrtgAPI.Tree.CompareNodeRewriter Visit(CompareNode node) -> CompareNode
PrtgAPI.Tree.CompareNodeRewriter VisitCollection(CompareNodeCollection node) -> CompareNode
PrtgAPI.Tree.CompareNodeRewriter VisitList(INodeList<CompareNode> nodes) -> IReadOnlyList<CompareNode>
PrtgAPI.Tree.CompareNodeRewriter VisitNode(CompareNode node) -> CompareNode
PrtgAPI.Tree.CompareNodeRoot => Class
PrtgAPI.Tree.CompareNodeRoot Accept(CompareNodeVisitor visitor) -> void
PrtgAPI.Tree.CompareNodeRoot Accept<T>(CompareNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.CompareNodeRoot Ancestors() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeRoot AncestorsAndSelf() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeRoot Children { get; } -> INodeList<CompareNode>
PrtgAPI.Tree.CompareNodeRoot Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.CompareNodeRoot Contains(CompareNode node) -> bool
PrtgAPI.Tree.CompareNodeRoot DescendantNodes() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeRoot DescendantNodesAndSelf() -> IEnumerable<CompareNode>
PrtgAPI.Tree.CompareNodeRoot Difference { get; } -> FlagEnum<TreeNodeDifference>
PrtgAPI.Tree.CompareNodeRoot Equals(object obj) -> bool
PrtgAPI.Tree.CompareNodeRoot First { get; } -> PrtgNode
PrtgAPI.Tree.CompareNodeRoot GetHashCode() -> int
PrtgAPI.Tree.CompareNodeRoot GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.CompareNodeRoot GetType() -> Type
PrtgAPI.Tree.CompareNodeRoot Item { get; } -> CompareNode
PrtgAPI.Tree.CompareNodeRoot Item { get; } -> CompareNode
PrtgAPI.Tree.CompareNodeRoot Name { get; } -> string
PrtgAPI.Tree.CompareNodeRoot Parent { get; } -> CompareNode
PrtgAPI.Tree.CompareNodeRoot Parent { get; } -> TreeNode
PrtgAPI.Tree.CompareNodeRoot Second { get; } -> PrtgNode
PrtgAPI.Tree.CompareNodeRoot ToString() -> string
PrtgAPI.Tree.CompareNodeRoot TreeDifference { get; } -> FlagEnum<TreeNodeDifference>
PrtgAPI.Tree.CompareNodeRoot Type { get; } -> TreeNodeType
PrtgAPI.Tree.CompareNodeRoot Update(IEnumerable<CompareNode> children) -> CompareNode
PrtgAPI.Tree.CompareNodeVisitor => Class
PrtgAPI.Tree.CompareNodeVisitor Equals(object obj) -> bool
PrtgAPI.Tree.CompareNodeVisitor GetHashCode() -> int
PrtgAPI.Tree.CompareNodeVisitor GetType() -> Type
PrtgAPI.Tree.CompareNodeVisitor ToString() -> string
PrtgAPI.Tree.CompareNodeVisitor Visit(CompareNode node) -> void
PrtgAPI.Tree.CompareNodeVisitor VisitCollection(CompareNodeCollection node) -> void
PrtgAPI.Tree.CompareNodeVisitor VisitNode(CompareNode node) -> void
PrtgAPI.Tree.CompareNodeVisitor<TResult> => Class
PrtgAPI.Tree.CompareNodeVisitor<TResult> Equals(object obj) -> bool
PrtgAPI.Tree.CompareNodeVisitor<TResult> GetHashCode() -> int
PrtgAPI.Tree.CompareNodeVisitor<TResult> GetType() -> Type
PrtgAPI.Tree.CompareNodeVisitor<TResult> ToString() -> string
PrtgAPI.Tree.CompareNodeVisitor<TResult> Visit(CompareNode node) -> TResult
PrtgAPI.Tree.CompareNodeVisitor<TResult> VisitCollection(CompareNodeCollection node) -> TResult
PrtgAPI.Tree.CompareNodeVisitor<TResult> VisitNode(CompareNode node) -> TResult
PrtgAPI.Tree.CompareNodeWalker => Class
PrtgAPI.Tree.CompareNodeWalker Equals(object obj) -> bool
PrtgAPI.Tree.CompareNodeWalker GetHashCode() -> int
PrtgAPI.Tree.CompareNodeWalker GetType() -> Type
PrtgAPI.Tree.CompareNodeWalker ToString() -> string
PrtgAPI.Tree.CompareNodeWalker Visit(CompareNode node) -> void
PrtgAPI.Tree.CompareNodeWalker VisitCollection(CompareNodeCollection node) -> void
PrtgAPI.Tree.CompareNodeWalker VisitNode(CompareNode node) -> void
PrtgAPI.Tree.Converters.Text.PrettyColorLine => Class
PrtgAPI.Tree.Converters.Text.PrettyColorLine Branch { get; } -> string
PrtgAPI.Tree.Converters.Text.PrettyColorLine Equals(object obj) -> bool
PrtgAPI.Tree.Converters.Text.PrettyColorLine GetHashCode() -> int
PrtgAPI.Tree.Converters.Text.PrettyColorLine GetType() -> Type
PrtgAPI.Tree.Converters.Text.PrettyColorLine Node { get; } -> TreeNode
PrtgAPI.Tree.Converters.Text.PrettyColorLine Text { get; } -> string
PrtgAPI.Tree.Converters.Text.PrettyColorLine ToString() -> string
PrtgAPI.Tree.Converters.Text.PrettyColorLine Value { get; } -> string
PrtgAPI.Tree.Converters.Text.PrettyColorLine ValueColor { get; } -> ConsoleColor?
PrtgAPI.Tree.Converters.Text.PrettyLine => Class
PrtgAPI.Tree.Converters.Text.PrettyLine Equals(object obj) -> bool
PrtgAPI.Tree.Converters.Text.PrettyLine GetHashCode() -> int
PrtgAPI.Tree.Converters.Text.PrettyLine GetType() -> Type
PrtgAPI.Tree.Converters.Text.PrettyLine Node { get; } -> TreeNode
PrtgAPI.Tree.Converters.Text.PrettyLine Text { get; } -> string
PrtgAPI.Tree.Converters.Text.PrettyLine ToString() -> string
PrtgAPI.Tree.Converters.Text.Writers.PrettyColorWriter => Class
PrtgAPI.Tree.Converters.Text.Writers.PrettyColorWriter Equals(object obj) -> bool
PrtgAPI.Tree.Converters.Text.Writers.PrettyColorWriter Execute(List<PrettyLine> lines) -> void
PrtgAPI.Tree.Converters.Text.Writers.PrettyColorWriter GetHashCode() -> int
PrtgAPI.Tree.Converters.Text.Writers.PrettyColorWriter GetType() -> Type
PrtgAPI.Tree.Converters.Text.Writers.PrettyColorWriter ToString() -> string
PrtgAPI.Tree.Converters.Text.Writers.PrettyColorWriter Write(string value) -> void
PrtgAPI.Tree.Converters.Text.Writers.PrettyColorWriter WriteFooter() -> void
PrtgAPI.Tree.Converters.Text.Writers.PrettyColorWriter WriteHeader() -> void
PrtgAPI.Tree.Converters.Text.Writers.PrettyColorWriter WriteLine(ConsoleColor? valueColor, string value) -> void
PrtgAPI.Tree.Converters.Text.Writers.PrettyWriter => Class
PrtgAPI.Tree.Converters.Text.Writers.PrettyWriter Equals(object obj) -> bool
PrtgAPI.Tree.Converters.Text.Writers.PrettyWriter Execute(List<PrettyLine> lines) -> void
PrtgAPI.Tree.Converters.Text.Writers.PrettyWriter GetHashCode() -> int
PrtgAPI.Tree.Converters.Text.Writers.PrettyWriter GetType() -> Type
PrtgAPI.Tree.Converters.Text.Writers.PrettyWriter ToString() -> string
PrtgAPI.Tree.Converters.Text.Writers.PrettyWriter WriteFooter() -> void
PrtgAPI.Tree.Converters.Text.Writers.PrettyWriter WriteHeader() -> void
PrtgAPI.Tree.DeviceNode => Class
PrtgAPI.Tree.DeviceNode Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.DeviceNode Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.DeviceNode Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.DeviceNode AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.DeviceNode Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.DeviceNode Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.DeviceNode Contains(PrtgNode node) -> bool
PrtgAPI.Tree.DeviceNode DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.DeviceNode DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.DeviceNode Equals(object obj) -> bool
PrtgAPI.Tree.DeviceNode GetHashCode() -> int
PrtgAPI.Tree.DeviceNode GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.DeviceNode GetType() -> Type
PrtgAPI.Tree.DeviceNode Item { get; } -> PrtgNode
PrtgAPI.Tree.DeviceNode Item { get; } -> PrtgNode
PrtgAPI.Tree.DeviceNode Name { get; } -> string
PrtgAPI.Tree.DeviceNode Parent { get; } -> PrtgNode
PrtgAPI.Tree.DeviceNode Parent { get; } -> TreeNode
PrtgAPI.Tree.DeviceNode ToString() -> string
PrtgAPI.Tree.DeviceNode Type { get; } -> PrtgNodeType
PrtgAPI.Tree.DeviceNode Type { get; } -> TreeNodeType
PrtgAPI.Tree.DeviceNode Update(IDevice device, IEnumerable<PrtgNode> children) -> PrtgNode<IDevice>
PrtgAPI.Tree.DeviceNode Value { get; } -> IDevice
PrtgAPI.Tree.DeviceNode Value { get; } -> ITreeValue
PrtgAPI.Tree.DeviceNode WithValue(IDevice value) -> PrtgNode<IDevice>
PrtgAPI.Tree.GroupNode => Class
PrtgAPI.Tree.GroupNode Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.GroupNode Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.GroupNode Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.GroupNode AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.GroupNode Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.GroupNode Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.GroupNode Contains(PrtgNode node) -> bool
PrtgAPI.Tree.GroupNode DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.GroupNode DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.GroupNode Equals(object obj) -> bool
PrtgAPI.Tree.GroupNode GetHashCode() -> int
PrtgAPI.Tree.GroupNode GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.GroupNode GetType() -> Type
PrtgAPI.Tree.GroupNode Item { get; } -> PrtgNode
PrtgAPI.Tree.GroupNode Item { get; } -> PrtgNode
PrtgAPI.Tree.GroupNode Name { get; } -> string
PrtgAPI.Tree.GroupNode Parent { get; } -> PrtgNode
PrtgAPI.Tree.GroupNode Parent { get; } -> TreeNode
PrtgAPI.Tree.GroupNode ToString() -> string
PrtgAPI.Tree.GroupNode Type { get; } -> PrtgNodeType
PrtgAPI.Tree.GroupNode Type { get; } -> TreeNodeType
PrtgAPI.Tree.GroupNode Update(IGroup group, IEnumerable<PrtgNode> children) -> PrtgNode<IGroup>
PrtgAPI.Tree.GroupNode Value { get; } -> IGroup
PrtgAPI.Tree.GroupNode Value { get; } -> ITreeValue
PrtgAPI.Tree.GroupNode WithValue(IGroup value) -> PrtgNode<IGroup>
PrtgAPI.Tree.INodeList<T> => Interface
PrtgAPI.Tree.INodeList<T> Add(T node) -> INodeList<T>
PrtgAPI.Tree.INodeList<T> AddRange(IEnumerable<T> nodes) -> INodeList<T>
PrtgAPI.Tree.INodeList<T> IndexOf(T node) -> int
PrtgAPI.Tree.INodeList<T> Insert(int index, T node) -> INodeList<T>
PrtgAPI.Tree.INodeList<T> InsertRange(int index, IEnumerable<T> nodes) -> INodeList<T>
PrtgAPI.Tree.INodeList<T> Remove(T node) -> INodeList<T>
PrtgAPI.Tree.INodeList<T> RemoveAt(int index) -> INodeList<T>
PrtgAPI.Tree.INodeList<T> Replace(T oldNode, T newNode) -> INodeList<T>
PrtgAPI.Tree.INodeList<T> ReplaceRange(T oldNode, IEnumerable<T> newNodes) -> INodeList<T>
PrtgAPI.Tree.ITreeValue => Interface
PrtgAPI.Tree.ITreeValue Id { get; } -> int?
PrtgAPI.Tree.ITreeValue Name { get; } -> string
PrtgAPI.Tree.ITreeValue ParentId { get; } -> int
PrtgAPI.Tree.NodeExtensions => Class
PrtgAPI.Tree.NodeExtensions CompareTo(PrtgNode node, PrtgNode other, params TreeNodeDifference[] differences) -> CompareNode
PrtgAPI.Tree.NodeExtensions Equals(object obj) -> bool
PrtgAPI.Tree.NodeExtensions FindNode(CompareNode root, Func<CompareNode,bool> predicate) -> CompareNode
PrtgAPI.Tree.NodeExtensions FindNode(PrtgNode root, Func<PrtgNode,bool> predicate) -> PrtgNode
PrtgAPI.Tree.NodeExtensions FindNode<TNode>(PrtgNode root, Func<TNode,bool> predicate = null) -> TNode
PrtgAPI.Tree.NodeExtensions FindNodes(CompareNode root, Func<CompareNode,bool> predicate) -> IEnumerable<CompareNode>
PrtgAPI.Tree.NodeExtensions FindNodes(PrtgNode root, Func<PrtgNode,bool> predicate) -> IEnumerable<PrtgNode>
PrtgAPI.Tree.NodeExtensions FindNodes<TNode>(PrtgNode root, Func<TNode,bool> predicate = null) -> IEnumerable<TNode>
PrtgAPI.Tree.NodeExtensions GetHashCode() -> int
PrtgAPI.Tree.NodeExtensions GetType() -> Type
PrtgAPI.Tree.NodeExtensions InsertNodeAfter<TRoot>(TRoot root, PrtgNode nodeInList, PrtgNode newNode) -> TRoot
PrtgAPI.Tree.NodeExtensions InsertNodeBefore<TRoot>(TRoot root, PrtgNode nodeInList, PrtgNode newNode) -> TRoot
PrtgAPI.Tree.NodeExtensions InsertNodesAfter<TRoot>(TRoot root, PrtgNode nodeInList, IEnumerable<PrtgNode> newNodes) -> TRoot
PrtgAPI.Tree.NodeExtensions InsertNodesAfter<TRoot>(TRoot root, PrtgNode nodeInList, params PrtgNode[] newNodes) -> TRoot
PrtgAPI.Tree.NodeExtensions InsertNodesBefore<TRoot>(TRoot root, PrtgNode nodeInList, IEnumerable<PrtgNode> newNodes) -> TRoot
PrtgAPI.Tree.NodeExtensions InsertNodesBefore<TRoot>(TRoot root, PrtgNode nodeInList, params PrtgNode[] newNodes) -> TRoot
PrtgAPI.Tree.NodeExtensions PrettyPrint(CompareNode node, PrettyWriter writer) -> void
PrtgAPI.Tree.NodeExtensions PrettyPrint(PrtgNode node, PrettyWriter writer) -> void
PrtgAPI.Tree.NodeExtensions Reduce(CompareNode node) -> CompareNode
PrtgAPI.Tree.NodeExtensions RemoveNode<TRoot>(TRoot root, PrtgNode node) -> TRoot
PrtgAPI.Tree.NodeExtensions RemoveNodes<TRoot>(TRoot root, IEnumerable<PrtgNode> nodes) -> TRoot
PrtgAPI.Tree.NodeExtensions RemoveNodes<TRoot>(TRoot root, params PrtgNode[] nodes) -> TRoot
PrtgAPI.Tree.NodeExtensions ReplaceNode<TRoot>(TRoot root, PrtgNode oldNode, PrtgNode newNode) -> TRoot
PrtgAPI.Tree.NodeExtensions ReplaceNodes<TRoot>(TRoot root, IEnumerable<PrtgNode> nodes, Func<PrtgNode,PrtgNode,PrtgNode> computeReplacementNode) -> TRoot
PrtgAPI.Tree.NodeExtensions ReplaceNodes<TRoot>(TRoot root, PrtgNode oldNode, IEnumerable<PrtgNode> newNodes) -> TRoot
PrtgAPI.Tree.NodeExtensions ReplaceNodes<TRoot>(TRoot root, PrtgNode oldNode, params PrtgNode[] newNodes) -> TRoot
PrtgAPI.Tree.NodeExtensions ToString() -> string
PrtgAPI.Tree.NodeExtensions WithChildren<TRoot>(TRoot node, IEnumerable<CompareNode> children) -> TRoot
PrtgAPI.Tree.NodeExtensions WithChildren<TRoot>(TRoot node, IEnumerable<PrtgNode> children) -> TRoot
PrtgAPI.Tree.NodeExtensions WithChildren<TRoot>(TRoot node, params CompareNode[] children) -> TRoot
PrtgAPI.Tree.NodeExtensions WithChildren<TRoot>(TRoot node, params PrtgNode[] children) -> TRoot
PrtgAPI.Tree.ProbeNode => Class
PrtgAPI.Tree.ProbeNode Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.ProbeNode Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.ProbeNode Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.ProbeNode AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.ProbeNode Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.ProbeNode Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.ProbeNode Contains(PrtgNode node) -> bool
PrtgAPI.Tree.ProbeNode DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.ProbeNode DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.ProbeNode Equals(object obj) -> bool
PrtgAPI.Tree.ProbeNode GetHashCode() -> int
PrtgAPI.Tree.ProbeNode GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.ProbeNode GetType() -> Type
PrtgAPI.Tree.ProbeNode Item { get; } -> PrtgNode
PrtgAPI.Tree.ProbeNode Item { get; } -> PrtgNode
PrtgAPI.Tree.ProbeNode Name { get; } -> string
PrtgAPI.Tree.ProbeNode Parent { get; } -> PrtgNode
PrtgAPI.Tree.ProbeNode Parent { get; } -> TreeNode
PrtgAPI.Tree.ProbeNode ToString() -> string
PrtgAPI.Tree.ProbeNode Type { get; } -> PrtgNodeType
PrtgAPI.Tree.ProbeNode Type { get; } -> TreeNodeType
PrtgAPI.Tree.ProbeNode Update(IProbe probe, IEnumerable<PrtgNode> children) -> PrtgNode<IProbe>
PrtgAPI.Tree.ProbeNode Value { get; } -> IProbe
PrtgAPI.Tree.ProbeNode Value { get; } -> ITreeValue
PrtgAPI.Tree.ProbeNode WithValue(IProbe value) -> PrtgNode<IProbe>
PrtgAPI.Tree.Progress.DepthManager => Class
PrtgAPI.Tree.Progress.DepthManager Decrement() -> void
PrtgAPI.Tree.Progress.DepthManager Depth { get; } -> int
PrtgAPI.Tree.Progress.DepthManager Dispose() -> void
PrtgAPI.Tree.Progress.DepthManager Equals(object obj) -> bool
PrtgAPI.Tree.Progress.DepthManager GetHashCode() -> int
PrtgAPI.Tree.Progress.DepthManager GetType() -> Type
PrtgAPI.Tree.Progress.DepthManager Increment() -> void
PrtgAPI.Tree.Progress.DepthManager ToString() -> string
PrtgAPI.Tree.Progress.ITreeProgressCallback => Interface
PrtgAPI.Tree.Progress.ITreeProgressCallback DepthManager { get; } -> DepthManager
PrtgAPI.Tree.Progress.ITreeProgressCallback OnLevelBegin(ITreeValue parent, PrtgNodeType parentType, int depth) -> void
PrtgAPI.Tree.Progress.ITreeProgressCallback OnLevelWidthKnown(ITreeValue parent, PrtgNodeType parentType, int width) -> void
PrtgAPI.Tree.Progress.ITreeProgressCallback OnProcessType(PrtgNodeType type, int index, int total) -> void
PrtgAPI.Tree.Progress.ITreeProgressCallback OnProcessValue(ITreeValue value) -> void
PrtgAPI.Tree.PropertyNode => Class
PrtgAPI.Tree.PropertyNode Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.PropertyNode Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.PropertyNode Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PropertyNode AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PropertyNode Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.PropertyNode Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.PropertyNode Contains(PrtgNode node) -> bool
PrtgAPI.Tree.PropertyNode DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PropertyNode DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PropertyNode Equals(object obj) -> bool
PrtgAPI.Tree.PropertyNode GetHashCode() -> int
PrtgAPI.Tree.PropertyNode GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.PropertyNode GetType() -> Type
PrtgAPI.Tree.PropertyNode Item { get; } -> PrtgNode
PrtgAPI.Tree.PropertyNode Item { get; } -> PrtgNode
PrtgAPI.Tree.PropertyNode Name { get; } -> string
PrtgAPI.Tree.PropertyNode Parent { get; } -> PrtgNode
PrtgAPI.Tree.PropertyNode Parent { get; } -> TreeNode
PrtgAPI.Tree.PropertyNode ToString() -> string
PrtgAPI.Tree.PropertyNode Type { get; } -> PrtgNodeType
PrtgAPI.Tree.PropertyNode Type { get; } -> TreeNodeType
PrtgAPI.Tree.PropertyNode Update(PropertyValuePair property, IEnumerable<PrtgNode> children) -> PrtgNode<PropertyValuePair>
PrtgAPI.Tree.PropertyNode Value { get; } -> ITreeValue
PrtgAPI.Tree.PropertyNode Value { get; } -> PropertyValuePair
PrtgAPI.Tree.PropertyNode WithValue(PropertyValuePair value) -> PrtgNode<PropertyValuePair>
PrtgAPI.Tree.PropertyNodeCollection => Class
PrtgAPI.Tree.PropertyNodeCollection Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.PropertyNodeCollection Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.PropertyNodeCollection Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PropertyNodeCollection AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PropertyNodeCollection Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.PropertyNodeCollection Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.PropertyNodeCollection Contains(PrtgNode node) -> bool
PrtgAPI.Tree.PropertyNodeCollection DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PropertyNodeCollection DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PropertyNodeCollection Equals(object obj) -> bool
PrtgAPI.Tree.PropertyNodeCollection GetHashCode() -> int
PrtgAPI.Tree.PropertyNodeCollection GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.PropertyNodeCollection GetType() -> Type
PrtgAPI.Tree.PropertyNodeCollection Item { get; } -> PrtgNode
PrtgAPI.Tree.PropertyNodeCollection Item { get; } -> PrtgNode
PrtgAPI.Tree.PropertyNodeCollection Name { get; } -> string
PrtgAPI.Tree.PropertyNodeCollection Parent { get; } -> PrtgNode
PrtgAPI.Tree.PropertyNodeCollection Parent { get; } -> TreeNode
PrtgAPI.Tree.PropertyNodeCollection ToString() -> string
PrtgAPI.Tree.PropertyNodeCollection Type { get; } -> PrtgNodeType
PrtgAPI.Tree.PropertyNodeCollection Type { get; } -> TreeNodeType
PrtgAPI.Tree.PropertyNodeCollection Value { get; } -> ITreeValue
PrtgAPI.Tree.PropertyValuePair => Class
PrtgAPI.Tree.PropertyValuePair Equals(object obj) -> bool
PrtgAPI.Tree.PropertyValuePair GetHashCode() -> int
PrtgAPI.Tree.PropertyValuePair GetType() -> Type
PrtgAPI.Tree.PropertyValuePair Id { get; } -> int?
PrtgAPI.Tree.PropertyValuePair ParentId { get; } -> int
PrtgAPI.Tree.PropertyValuePair Property { get; } -> Either<ObjectProperty,string>
PrtgAPI.Tree.PropertyValuePair ToString() -> string
PrtgAPI.Tree.PropertyValuePair Value { get; } -> object
PrtgAPI.Tree.PrtgNode => Class
PrtgAPI.Tree.PrtgNode Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.PrtgNode Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.PrtgNode Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNode AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNode Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.PrtgNode Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.PrtgNode Contains(PrtgNode node) -> bool
PrtgAPI.Tree.PrtgNode DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNode DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNode Device(IDevice device, IEnumerable<PrtgNode> children) -> DeviceNode
PrtgAPI.Tree.PrtgNode Device(IDevice device, params PrtgNode[] children) -> DeviceNode
PrtgAPI.Tree.PrtgNode Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNode GetHashCode() -> int
PrtgAPI.Tree.PrtgNode GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.PrtgNode GetType() -> Type
PrtgAPI.Tree.PrtgNode Group(IGroup group, IEnumerable<PrtgNode> children) -> GroupNode
PrtgAPI.Tree.PrtgNode Group(IGroup group, params PrtgNode[] children) -> GroupNode
PrtgAPI.Tree.PrtgNode Item { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNode Item { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNode Name { get; } -> string
PrtgAPI.Tree.PrtgNode Parent { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNode Parent { get; } -> TreeNode
PrtgAPI.Tree.PrtgNode Probe(IProbe probe, IEnumerable<PrtgNode> children) -> ProbeNode
PrtgAPI.Tree.PrtgNode Probe(IProbe probe, params PrtgNode[] children) -> ProbeNode
PrtgAPI.Tree.PrtgNode Property(Either<IPrtgObject,int> parentOrId, Either<ObjectProperty,string> property, object value) -> PropertyNode
PrtgAPI.Tree.PrtgNode Property(PropertyValuePair property) -> PropertyNode
PrtgAPI.Tree.PrtgNode PropertyCollection(IEnumerable<PropertyNode> children) -> PropertyNodeCollection
PrtgAPI.Tree.PrtgNode PropertyCollection(params PropertyNode[] children) -> PropertyNodeCollection
PrtgAPI.Tree.PrtgNode Sensor(ISensor sensor, IEnumerable<PrtgNode> children) -> SensorNode
PrtgAPI.Tree.PrtgNode Sensor(ISensor sensor, params PrtgNode[] children) -> SensorNode
PrtgAPI.Tree.PrtgNode ToString() -> string
PrtgAPI.Tree.PrtgNode Trigger(NotificationTrigger trigger) -> TriggerNode
PrtgAPI.Tree.PrtgNode TriggerCollection(IEnumerable<TriggerNode> children) -> TriggerNodeCollection
PrtgAPI.Tree.PrtgNode TriggerCollection(params TriggerNode[] children) -> TriggerNodeCollection
PrtgAPI.Tree.PrtgNode Type { get; } -> PrtgNodeType
PrtgAPI.Tree.PrtgNode Type { get; } -> TreeNodeType
PrtgAPI.Tree.PrtgNode Value { get; } -> ITreeValue
PrtgAPI.Tree.PrtgNode<TValue> => Class
PrtgAPI.Tree.PrtgNode<TValue> Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.PrtgNode<TValue> Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.PrtgNode<TValue> Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNode<TValue> AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNode<TValue> Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.PrtgNode<TValue> Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.PrtgNode<TValue> Contains(PrtgNode node) -> bool
PrtgAPI.Tree.PrtgNode<TValue> DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNode<TValue> DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNode<TValue> Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNode<TValue> GetHashCode() -> int
PrtgAPI.Tree.PrtgNode<TValue> GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.PrtgNode<TValue> GetType() -> Type
PrtgAPI.Tree.PrtgNode<TValue> Item { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNode<TValue> Item { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNode<TValue> Name { get; } -> string
PrtgAPI.Tree.PrtgNode<TValue> Parent { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNode<TValue> Parent { get; } -> TreeNode
PrtgAPI.Tree.PrtgNode<TValue> ToString() -> string
PrtgAPI.Tree.PrtgNode<TValue> Type { get; } -> PrtgNodeType
PrtgAPI.Tree.PrtgNode<TValue> Type { get; } -> TreeNodeType
PrtgAPI.Tree.PrtgNode<TValue> Update(TValue value, IEnumerable<PrtgNode> children) -> PrtgNode<TValue>
PrtgAPI.Tree.PrtgNode<TValue> Value { get; } -> ITreeValue
PrtgAPI.Tree.PrtgNode<TValue> Value { get; } -> TValue
PrtgAPI.Tree.PrtgNode<TValue> WithValue(TValue value) -> PrtgNode<TValue>
PrtgAPI.Tree.PrtgNodeCollection => Class
PrtgAPI.Tree.PrtgNodeCollection Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.PrtgNodeCollection Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.PrtgNodeCollection Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNodeCollection AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNodeCollection Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.PrtgNodeCollection Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.PrtgNodeCollection Contains(PrtgNode node) -> bool
PrtgAPI.Tree.PrtgNodeCollection DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNodeCollection DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNodeCollection Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNodeCollection GetHashCode() -> int
PrtgAPI.Tree.PrtgNodeCollection GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.PrtgNodeCollection GetType() -> Type
PrtgAPI.Tree.PrtgNodeCollection Item { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNodeCollection Item { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNodeCollection Name { get; } -> string
PrtgAPI.Tree.PrtgNodeCollection Parent { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNodeCollection Parent { get; } -> TreeNode
PrtgAPI.Tree.PrtgNodeCollection ToString() -> string
PrtgAPI.Tree.PrtgNodeCollection Type { get; } -> PrtgNodeType
PrtgAPI.Tree.PrtgNodeCollection Type { get; } -> TreeNodeType
PrtgAPI.Tree.PrtgNodeCollection Value { get; } -> ITreeValue
PrtgAPI.Tree.PrtgNodeDefaultVisitor => Class
PrtgAPI.Tree.PrtgNodeDefaultVisitor DefaultVisit(PrtgNode node) -> void
PrtgAPI.Tree.PrtgNodeDefaultVisitor Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNodeDefaultVisitor GetHashCode() -> int
PrtgAPI.Tree.PrtgNodeDefaultVisitor GetType() -> Type
PrtgAPI.Tree.PrtgNodeDefaultVisitor ToString() -> string
PrtgAPI.Tree.PrtgNodeDefaultVisitor Visit(PrtgNode node) -> void
PrtgAPI.Tree.PrtgNodeDefaultVisitor VisitCollection(PrtgNodeCollection node) -> void
PrtgAPI.Tree.PrtgNodeDefaultVisitor VisitDevice(DeviceNode node) -> void
PrtgAPI.Tree.PrtgNodeDefaultVisitor VisitGroup(GroupNode node) -> void
PrtgAPI.Tree.PrtgNodeDefaultVisitor VisitProbe(ProbeNode node) -> void
PrtgAPI.Tree.PrtgNodeDefaultVisitor VisitProperty(PropertyNode node) -> void
PrtgAPI.Tree.PrtgNodeDefaultVisitor VisitSensor(SensorNode node) -> void
PrtgAPI.Tree.PrtgNodeDefaultVisitor VisitTrigger(TriggerNode node) -> void
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> => Class
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> DefaultVisit(PrtgNode node) -> TResult
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> GetHashCode() -> int
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> GetType() -> Type
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> ToString() -> string
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> Visit(PrtgNode node) -> TResult
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> VisitCollection(PrtgNodeCollection node) -> TResult
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> VisitDevice(DeviceNode node) -> TResult
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> VisitGroup(GroupNode node) -> TResult
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> VisitProbe(ProbeNode node) -> TResult
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> VisitProperty(PropertyNode node) -> TResult
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> VisitSensor(SensorNode node) -> TResult
PrtgAPI.Tree.PrtgNodeDefaultVisitor<TResult> VisitTrigger(TriggerNode node) -> TResult
PrtgAPI.Tree.PrtgNodeFactory => Class
PrtgAPI.Tree.PrtgNodeFactory Device(int id, IEnumerable<PrtgNode> children) -> DeviceNode
PrtgAPI.Tree.PrtgNodeFactory Device(int id, params PrtgNode[] children) -> DeviceNode
PrtgAPI.Tree.PrtgNodeFactory Device(string name, IEnumerable<PrtgNode> children) -> DeviceNode
PrtgAPI.Tree.PrtgNodeFactory Device(string name, params PrtgNode[] children) -> DeviceNode
PrtgAPI.Tree.PrtgNodeFactory Devices(Property property, object value) -> List<DeviceNode>
PrtgAPI.Tree.PrtgNodeFactory Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNodeFactory GetHashCode() -> int
PrtgAPI.Tree.PrtgNodeFactory GetType() -> Type
PrtgAPI.Tree.PrtgNodeFactory Group(int id, IEnumerable<PrtgNode> children) -> GroupNode
PrtgAPI.Tree.PrtgNodeFactory Group(int id, params PrtgNode[] children) -> GroupNode
PrtgAPI.Tree.PrtgNodeFactory Group(string name, IEnumerable<PrtgNode> children) -> GroupNode
PrtgAPI.Tree.PrtgNodeFactory Group(string name, params PrtgNode[] children) -> GroupNode
PrtgAPI.Tree.PrtgNodeFactory Groups(Property property, object value) -> List<GroupNode>
PrtgAPI.Tree.PrtgNodeFactory Probe(int id, IEnumerable<PrtgNode> children) -> ProbeNode
PrtgAPI.Tree.PrtgNodeFactory Probe(int id, params PrtgNode[] children) -> ProbeNode
PrtgAPI.Tree.PrtgNodeFactory Probe(string name, IEnumerable<PrtgNode> children) -> ProbeNode
PrtgAPI.Tree.PrtgNodeFactory Probe(string name, params PrtgNode[] children) -> ProbeNode
PrtgAPI.Tree.PrtgNodeFactory Probes(Property property, object value) -> List<ProbeNode>
PrtgAPI.Tree.PrtgNodeFactory Properties(Either<IPrtgObject,int> objectOrId) -> List<PropertyNode>
PrtgAPI.Tree.PrtgNodeFactory Property(Either<IPrtgObject,int> objectOrId, Either<ObjectProperty,string> property) -> PropertyNode
PrtgAPI.Tree.PrtgNodeFactory Sensor(int id, IEnumerable<PrtgNode> children) -> SensorNode
PrtgAPI.Tree.PrtgNodeFactory Sensor(int id, params PrtgNode[] children) -> SensorNode
PrtgAPI.Tree.PrtgNodeFactory Sensor(string name, IEnumerable<PrtgNode> children) -> SensorNode
PrtgAPI.Tree.PrtgNodeFactory Sensor(string name, params PrtgNode[] children) -> SensorNode
PrtgAPI.Tree.PrtgNodeFactory Sensors(Property property, object value) -> List<SensorNode>
PrtgAPI.Tree.PrtgNodeFactory ToString() -> string
PrtgAPI.Tree.PrtgNodeFactory Trigger(Either<IPrtgObject,int> objectOrId, string name) -> TriggerNode
PrtgAPI.Tree.PrtgNodeFactory Triggers(Either<IPrtgObject,int> objectOrId) -> List<TriggerNode>
PrtgAPI.Tree.PrtgNodeGrouping => Class
PrtgAPI.Tree.PrtgNodeGrouping Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.PrtgNodeGrouping Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.PrtgNodeGrouping Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNodeGrouping AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNodeGrouping Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.PrtgNodeGrouping Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.PrtgNodeGrouping Contains(PrtgNode node) -> bool
PrtgAPI.Tree.PrtgNodeGrouping DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNodeGrouping DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.PrtgNodeGrouping Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNodeGrouping GetHashCode() -> int
PrtgAPI.Tree.PrtgNodeGrouping GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.PrtgNodeGrouping GetType() -> Type
PrtgAPI.Tree.PrtgNodeGrouping Group { get; } -> IReadOnlyList<PrtgNode>
PrtgAPI.Tree.PrtgNodeGrouping Item { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNodeGrouping Item { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNodeGrouping Name { get; } -> string
PrtgAPI.Tree.PrtgNodeGrouping Parent { get; } -> PrtgNode
PrtgAPI.Tree.PrtgNodeGrouping Parent { get; } -> TreeNode
PrtgAPI.Tree.PrtgNodeGrouping ToString() -> string
PrtgAPI.Tree.PrtgNodeGrouping Type { get; } -> PrtgNodeType
PrtgAPI.Tree.PrtgNodeGrouping Type { get; } -> TreeNodeType
PrtgAPI.Tree.PrtgNodeGrouping Value { get; } -> ITreeValue
PrtgAPI.Tree.PrtgNodeRewriter => Class
PrtgAPI.Tree.PrtgNodeRewriter Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNodeRewriter GetHashCode() -> int
PrtgAPI.Tree.PrtgNodeRewriter GetType() -> Type
PrtgAPI.Tree.PrtgNodeRewriter ToString() -> string
PrtgAPI.Tree.PrtgNodeRewriter Visit(PrtgNode node) -> PrtgNode
PrtgAPI.Tree.PrtgNodeRewriter VisitCollection(PrtgNodeCollection node) -> PrtgNode
PrtgAPI.Tree.PrtgNodeRewriter VisitDevice(DeviceNode node) -> PrtgNode
PrtgAPI.Tree.PrtgNodeRewriter VisitGroup(GroupNode node) -> PrtgNode
PrtgAPI.Tree.PrtgNodeRewriter VisitList(INodeList<PrtgNode> nodes) -> IReadOnlyList<PrtgNode>
PrtgAPI.Tree.PrtgNodeRewriter VisitProbe(ProbeNode node) -> PrtgNode
PrtgAPI.Tree.PrtgNodeRewriter VisitProperty(PropertyNode node) -> PrtgNode
PrtgAPI.Tree.PrtgNodeRewriter VisitSensor(SensorNode node) -> PrtgNode
PrtgAPI.Tree.PrtgNodeRewriter VisitTrigger(TriggerNode node) -> PrtgNode
PrtgAPI.Tree.PrtgNodeType => Enum
PrtgAPI.Tree.PrtgNodeType.Collection -> Value
PrtgAPI.Tree.PrtgNodeType.Device -> Value
PrtgAPI.Tree.PrtgNodeType.Group -> Value
PrtgAPI.Tree.PrtgNodeType.Grouping -> Value
PrtgAPI.Tree.PrtgNodeType.Probe -> Value
PrtgAPI.Tree.PrtgNodeType.Property -> Value
PrtgAPI.Tree.PrtgNodeType.Sensor -> Value
PrtgAPI.Tree.PrtgNodeType.Trigger -> Value
PrtgAPI.Tree.PrtgNodeVisitor => Class
PrtgAPI.Tree.PrtgNodeVisitor Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNodeVisitor GetHashCode() -> int
PrtgAPI.Tree.PrtgNodeVisitor GetType() -> Type
PrtgAPI.Tree.PrtgNodeVisitor ToString() -> string
PrtgAPI.Tree.PrtgNodeVisitor Visit(PrtgNode node) -> void
PrtgAPI.Tree.PrtgNodeVisitor VisitCollection(PrtgNodeCollection node) -> void
PrtgAPI.Tree.PrtgNodeVisitor VisitDevice(DeviceNode node) -> void
PrtgAPI.Tree.PrtgNodeVisitor VisitGroup(GroupNode node) -> void
PrtgAPI.Tree.PrtgNodeVisitor VisitProbe(ProbeNode node) -> void
PrtgAPI.Tree.PrtgNodeVisitor VisitProperty(PropertyNode node) -> void
PrtgAPI.Tree.PrtgNodeVisitor VisitSensor(SensorNode node) -> void
PrtgAPI.Tree.PrtgNodeVisitor VisitTrigger(TriggerNode node) -> void
PrtgAPI.Tree.PrtgNodeVisitor<TResult> => Class
PrtgAPI.Tree.PrtgNodeVisitor<TResult> Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNodeVisitor<TResult> GetHashCode() -> int
PrtgAPI.Tree.PrtgNodeVisitor<TResult> GetType() -> Type
PrtgAPI.Tree.PrtgNodeVisitor<TResult> ToString() -> string
PrtgAPI.Tree.PrtgNodeVisitor<TResult> Visit(PrtgNode node) -> TResult
PrtgAPI.Tree.PrtgNodeVisitor<TResult> VisitCollection(PrtgNodeCollection node) -> TResult
PrtgAPI.Tree.PrtgNodeVisitor<TResult> VisitDevice(DeviceNode node) -> TResult
PrtgAPI.Tree.PrtgNodeVisitor<TResult> VisitGroup(GroupNode node) -> TResult
PrtgAPI.Tree.PrtgNodeVisitor<TResult> VisitProbe(ProbeNode node) -> TResult
PrtgAPI.Tree.PrtgNodeVisitor<TResult> VisitProperty(PropertyNode node) -> TResult
PrtgAPI.Tree.PrtgNodeVisitor<TResult> VisitSensor(SensorNode node) -> TResult
PrtgAPI.Tree.PrtgNodeVisitor<TResult> VisitTrigger(TriggerNode node) -> TResult
PrtgAPI.Tree.PrtgNodeWalker => Class
PrtgAPI.Tree.PrtgNodeWalker Equals(object obj) -> bool
PrtgAPI.Tree.PrtgNodeWalker GetHashCode() -> int
PrtgAPI.Tree.PrtgNodeWalker GetType() -> Type
PrtgAPI.Tree.PrtgNodeWalker ToString() -> string
PrtgAPI.Tree.PrtgNodeWalker Visit(PrtgNode node) -> void
PrtgAPI.Tree.PrtgNodeWalker VisitCollection(PrtgNodeCollection node) -> void
PrtgAPI.Tree.PrtgNodeWalker VisitDevice(DeviceNode node) -> void
PrtgAPI.Tree.PrtgNodeWalker VisitGroup(GroupNode node) -> void
PrtgAPI.Tree.PrtgNodeWalker VisitProbe(ProbeNode node) -> void
PrtgAPI.Tree.PrtgNodeWalker VisitProperty(PropertyNode node) -> void
PrtgAPI.Tree.PrtgNodeWalker VisitSensor(SensorNode node) -> void
PrtgAPI.Tree.PrtgNodeWalker VisitTrigger(TriggerNode node) -> void
PrtgAPI.Tree.SensorNode => Class
PrtgAPI.Tree.SensorNode Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.SensorNode Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.SensorNode Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.SensorNode AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.SensorNode Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.SensorNode Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.SensorNode Contains(PrtgNode node) -> bool
PrtgAPI.Tree.SensorNode DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.SensorNode DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.SensorNode Equals(object obj) -> bool
PrtgAPI.Tree.SensorNode GetHashCode() -> int
PrtgAPI.Tree.SensorNode GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.SensorNode GetType() -> Type
PrtgAPI.Tree.SensorNode Item { get; } -> PrtgNode
PrtgAPI.Tree.SensorNode Item { get; } -> PrtgNode
PrtgAPI.Tree.SensorNode Name { get; } -> string
PrtgAPI.Tree.SensorNode Parent { get; } -> PrtgNode
PrtgAPI.Tree.SensorNode Parent { get; } -> TreeNode
PrtgAPI.Tree.SensorNode ToString() -> string
PrtgAPI.Tree.SensorNode Type { get; } -> PrtgNodeType
PrtgAPI.Tree.SensorNode Type { get; } -> TreeNodeType
PrtgAPI.Tree.SensorNode Update(ISensor sensor, IEnumerable<PrtgNode> children) -> PrtgNode<ISensor>
PrtgAPI.Tree.SensorNode Value { get; } -> ISensor
PrtgAPI.Tree.SensorNode Value { get; } -> ITreeValue
PrtgAPI.Tree.SensorNode WithValue(ISensor value) -> PrtgNode<ISensor>
PrtgAPI.Tree.TreeNode => Class
PrtgAPI.Tree.TreeNode Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.TreeNode Equals(object obj) -> bool
PrtgAPI.Tree.TreeNode GetHashCode() -> int
PrtgAPI.Tree.TreeNode GetType() -> Type
PrtgAPI.Tree.TreeNode Parent { get; } -> TreeNode
PrtgAPI.Tree.TreeNode ToString() -> string
PrtgAPI.Tree.TreeNode Type { get; } -> TreeNodeType
PrtgAPI.Tree.TreeNode<TTreeNode> => Class
PrtgAPI.Tree.TreeNode<TTreeNode> Ancestors() -> IEnumerable<TTreeNode>
PrtgAPI.Tree.TreeNode<TTreeNode> AncestorsAndSelf() -> IEnumerable<TTreeNode>
PrtgAPI.Tree.TreeNode<TTreeNode> Children { get; } -> INodeList<TTreeNode>
PrtgAPI.Tree.TreeNode<TTreeNode> Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.TreeNode<TTreeNode> Contains(TTreeNode node) -> bool
PrtgAPI.Tree.TreeNode<TTreeNode> DescendantNodes() -> IEnumerable<TTreeNode>
PrtgAPI.Tree.TreeNode<TTreeNode> DescendantNodesAndSelf() -> IEnumerable<TTreeNode>
PrtgAPI.Tree.TreeNode<TTreeNode> Equals(object obj) -> bool
PrtgAPI.Tree.TreeNode<TTreeNode> GetHashCode() -> int
PrtgAPI.Tree.TreeNode<TTreeNode> GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.TreeNode<TTreeNode> GetType() -> Type
PrtgAPI.Tree.TreeNode<TTreeNode> Item { get; } -> TTreeNode
PrtgAPI.Tree.TreeNode<TTreeNode> Item { get; } -> TTreeNode
PrtgAPI.Tree.TreeNode<TTreeNode> Name { get; } -> string
PrtgAPI.Tree.TreeNode<TTreeNode> Parent { get; } -> TreeNode
PrtgAPI.Tree.TreeNode<TTreeNode> Parent { get; } -> TTreeNode
PrtgAPI.Tree.TreeNode<TTreeNode> ToString() -> string
PrtgAPI.Tree.TreeNode<TTreeNode> Type { get; } -> TreeNodeType
PrtgAPI.Tree.TreeNodeDifference => Enum
PrtgAPI.Tree.TreeNodeDifference.Added -> Value
PrtgAPI.Tree.TreeNodeDifference.HasChildren -> Value
PrtgAPI.Tree.TreeNodeDifference.Name -> Value
PrtgAPI.Tree.TreeNodeDifference.None -> Value
PrtgAPI.Tree.TreeNodeDifference.NumberOfChildren -> Value
PrtgAPI.Tree.TreeNodeDifference.ParentId -> Value
PrtgAPI.Tree.TreeNodeDifference.Position -> Value
PrtgAPI.Tree.TreeNodeDifference.Removed -> Value
PrtgAPI.Tree.TreeNodeDifference.Type -> Value
PrtgAPI.Tree.TreeNodeDifference.Value -> Value
PrtgAPI.Tree.TreeNodeType => Enum
PrtgAPI.Tree.TreeNodeType.Collection -> Value
PrtgAPI.Tree.TreeNodeType.Grouping -> Value
PrtgAPI.Tree.TreeNodeType.Node -> Value
PrtgAPI.Tree.TreeParseOption => Enum
PrtgAPI.Tree.TreeParseOption.All -> Value
PrtgAPI.Tree.TreeParseOption.Common -> Value
PrtgAPI.Tree.TreeParseOption.Devices -> Value
PrtgAPI.Tree.TreeParseOption.Groups -> Value
PrtgAPI.Tree.TreeParseOption.Probes -> Value
PrtgAPI.Tree.TreeParseOption.Properties -> Value
PrtgAPI.Tree.TreeParseOption.Sensors -> Value
PrtgAPI.Tree.TreeParseOption.Triggers -> Value
PrtgAPI.Tree.TriggerNode => Class
PrtgAPI.Tree.TriggerNode Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.TriggerNode Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.TriggerNode Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.TriggerNode AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.TriggerNode Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.TriggerNode Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.TriggerNode Contains(PrtgNode node) -> bool
PrtgAPI.Tree.TriggerNode DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.TriggerNode DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.TriggerNode Equals(object obj) -> bool
PrtgAPI.Tree.TriggerNode GetHashCode() -> int
PrtgAPI.Tree.TriggerNode GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.TriggerNode GetType() -> Type
PrtgAPI.Tree.TriggerNode Item { get; } -> PrtgNode
PrtgAPI.Tree.TriggerNode Item { get; } -> PrtgNode
PrtgAPI.Tree.TriggerNode Name { get; } -> string
PrtgAPI.Tree.TriggerNode Parent { get; } -> PrtgNode
PrtgAPI.Tree.TriggerNode Parent { get; } -> TreeNode
PrtgAPI.Tree.TriggerNode ToString() -> string
PrtgAPI.Tree.TriggerNode Type { get; } -> PrtgNodeType
PrtgAPI.Tree.TriggerNode Type { get; } -> TreeNodeType
PrtgAPI.Tree.TriggerNode Update(NotificationTrigger trigger, IEnumerable<PrtgNode> children) -> PrtgNode<NotificationTrigger>
PrtgAPI.Tree.TriggerNode Value { get; } -> ITreeValue
PrtgAPI.Tree.TriggerNode Value { get; } -> NotificationTrigger
PrtgAPI.Tree.TriggerNode WithValue(NotificationTrigger value) -> PrtgNode<NotificationTrigger>
PrtgAPI.Tree.TriggerNodeCollection => Class
PrtgAPI.Tree.TriggerNodeCollection Accept(PrtgNodeVisitor visitor) -> void
PrtgAPI.Tree.TriggerNodeCollection Accept<T>(PrtgNodeVisitor<T> visitor) -> T
PrtgAPI.Tree.TriggerNodeCollection Ancestors() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.TriggerNodeCollection AncestorsAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.TriggerNodeCollection Children { get; } -> INodeList<PrtgNode>
PrtgAPI.Tree.TriggerNodeCollection Children { get; } -> IReadOnlyList<TreeNode>
PrtgAPI.Tree.TriggerNodeCollection Contains(PrtgNode node) -> bool
PrtgAPI.Tree.TriggerNodeCollection DescendantNodes() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.TriggerNodeCollection DescendantNodesAndSelf() -> IEnumerable<PrtgNode>
PrtgAPI.Tree.TriggerNodeCollection Equals(object obj) -> bool
PrtgAPI.Tree.TriggerNodeCollection GetHashCode() -> int
PrtgAPI.Tree.TriggerNodeCollection GetMetaObject(Expression parameter) -> DynamicMetaObject
PrtgAPI.Tree.TriggerNodeCollection GetType() -> Type
PrtgAPI.Tree.TriggerNodeCollection Item { get; } -> PrtgNode
PrtgAPI.Tree.TriggerNodeCollection Item { get; } -> PrtgNode
PrtgAPI.Tree.TriggerNodeCollection Name { get; } -> string
PrtgAPI.Tree.TriggerNodeCollection Parent { get; } -> PrtgNode
PrtgAPI.Tree.TriggerNodeCollection Parent { get; } -> TreeNode
PrtgAPI.Tree.TriggerNodeCollection ToString() -> string
PrtgAPI.Tree.TriggerNodeCollection Type { get; } -> PrtgNodeType
PrtgAPI.Tree.TriggerNodeCollection Type { get; } -> TreeNodeType
PrtgAPI.Tree.TriggerNodeCollection Value { get; } -> ITreeValue
PrtgAPI.TriggerChannel => Class
PrtgAPI.TriggerChannel Equals(object other) -> bool
PrtgAPI.TriggerChannel Equals(TriggerChannel other) -> bool
PrtgAPI.TriggerChannel GetHashCode() -> int
PrtgAPI.TriggerChannel GetType() -> Type
PrtgAPI.TriggerChannel op_Implicit(Channel channel) -> TriggerChannel
PrtgAPI.TriggerChannel op_Implicit(StandardTriggerChannel channel) -> TriggerChannel
PrtgAPI.TriggerChannel Parse(object value) -> TriggerChannel
PrtgAPI.TriggerChannel Primary -> TriggerChannel
PrtgAPI.TriggerChannel ToString() -> string
PrtgAPI.TriggerChannel Total -> TriggerChannel
PrtgAPI.TriggerChannel TrafficIn -> TriggerChannel
PrtgAPI.TriggerChannel TrafficOut -> TriggerChannel
PrtgAPI.TriggerChannel TryParse(object value, TriggerChannel& result) -> bool
PrtgAPI.TriggerCondition => Enum
PrtgAPI.TriggerCondition.Above -> Value
PrtgAPI.TriggerCondition.Below -> Value
PrtgAPI.TriggerCondition.Change -> Value
PrtgAPI.TriggerCondition.Equals -> Value
PrtgAPI.TriggerCondition.NotEquals -> Value
PrtgAPI.TriggerPeriod => Enum
PrtgAPI.TriggerPeriod.Day -> Value
PrtgAPI.TriggerPeriod.Hour -> Value
PrtgAPI.TriggerPeriod.Month -> Value
PrtgAPI.TriggerPeriod.Week -> Value
PrtgAPI.TriggerProperty => Enum
PrtgAPI.TriggerProperty.Channel -> Value
PrtgAPI.TriggerProperty.Condition -> Value
PrtgAPI.TriggerProperty.EscalationLatency -> Value
PrtgAPI.TriggerProperty.EscalationNotificationAction -> Value
PrtgAPI.TriggerProperty.Latency -> Value
PrtgAPI.TriggerProperty.OffNotificationAction -> Value
PrtgAPI.TriggerProperty.OnNotificationAction -> Value
PrtgAPI.TriggerProperty.Period -> Value
PrtgAPI.TriggerProperty.RepeatInterval -> Value
PrtgAPI.TriggerProperty.State -> Value
PrtgAPI.TriggerProperty.Threshold -> Value
PrtgAPI.TriggerProperty.UnitSize -> Value
PrtgAPI.TriggerProperty.UnitTime -> Value
PrtgAPI.TriggerSensorState => Enum
PrtgAPI.TriggerSensorState.Down -> Value
PrtgAPI.TriggerSensorState.DownPartial -> Value
PrtgAPI.TriggerSensorState.Unknown -> Value
PrtgAPI.TriggerSensorState.Unusual -> Value
PrtgAPI.TriggerSensorState.Up -> Value
PrtgAPI.TriggerSensorState.Warning -> Value
PrtgAPI.TriggerType => Enum
PrtgAPI.TriggerType.Change -> Value
PrtgAPI.TriggerType.Speed -> Value
PrtgAPI.TriggerType.State -> Value
PrtgAPI.TriggerType.Threshold -> Value
PrtgAPI.TriggerType.Volume -> Value
PrtgAPI.UserAccount => Class
PrtgAPI.UserAccount Active { get; set; } -> bool
PrtgAPI.UserAccount DisplayType { get; set; } -> string
PrtgAPI.UserAccount Equals(object obj) -> bool
PrtgAPI.UserAccount GetHashCode() -> int
PrtgAPI.UserAccount GetType() -> Type
PrtgAPI.UserAccount Id { get; set; } -> int
PrtgAPI.UserAccount Name { get; set; } -> string
PrtgAPI.UserAccount ParentId { get; set; } -> int
PrtgAPI.UserAccount Tags { get; set; } -> string[]
PrtgAPI.UserAccount ToString() -> string
PrtgAPI.UserAccount Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.UserGroup => Class
PrtgAPI.UserGroup Active { get; set; } -> bool
PrtgAPI.UserGroup DisplayType { get; set; } -> string
PrtgAPI.UserGroup Equals(object obj) -> bool
PrtgAPI.UserGroup GetHashCode() -> int
PrtgAPI.UserGroup GetType() -> Type
PrtgAPI.UserGroup Id { get; set; } -> int
PrtgAPI.UserGroup Name { get; set; } -> string
PrtgAPI.UserGroup ParentId { get; set; } -> int
PrtgAPI.UserGroup Tags { get; set; } -> string[]
PrtgAPI.UserGroup ToString() -> string
PrtgAPI.UserGroup Type { get; set; } -> StringEnum<ObjectType>
PrtgAPI.VMwareSessionMode => Enum
PrtgAPI.VMwareSessionMode.CreateNewSession -> Value
PrtgAPI.VMwareSessionMode.ReuseSession -> Value
PrtgAPI.WmiDataSource => Enum
PrtgAPI.WmiDataSource.PerformanceCounters -> Value
PrtgAPI.WmiDataSource.PerformanceCountersAndWMI -> Value
PrtgAPI.WmiDataSource.WMI -> Value
PrtgAPI.WmiMode => Enum
PrtgAPI.WmiMode.Alternative -> Value
PrtgAPI.WmiMode.Default -> Value
PrtgAPI.WmiServiceStatus => Enum
PrtgAPI.WmiServiceStatus.ContinuePending -> Value
PrtgAPI.WmiServiceStatus.Paused -> Value
PrtgAPI.WmiServiceStatus.PausePending -> Value
PrtgAPI.WmiServiceStatus.Running -> Value
PrtgAPI.WmiServiceStatus.StartPending -> Value
PrtgAPI.WmiServiceStatus.Stopped -> Value
PrtgAPI.WmiServiceStatus.StopPending -> Value
PrtgAPI.WmiTimeoutMethod => Enum
PrtgAPI.WmiTimeoutMethod.Manual -> Value
PrtgAPI.WmiTimeoutMethod.OnePointFiveTimesInterval -> Value
PrtgAPI.XmlDeserializationException => Class
PrtgAPI.XmlDeserializationException Data { get; } -> IDictionary
PrtgAPI.XmlDeserializationException Equals(object obj) -> bool
PrtgAPI.XmlDeserializationException GetBaseException() -> Exception
PrtgAPI.XmlDeserializationException GetHashCode() -> int
PrtgAPI.XmlDeserializationException GetObjectData(SerializationInfo info, StreamingContext context) -> void
PrtgAPI.XmlDeserializationException GetType() -> Type
PrtgAPI.XmlDeserializationException GetType() -> Type
PrtgAPI.XmlDeserializationException HelpLink { get; set; } -> string
PrtgAPI.XmlDeserializationException HResult { get; } -> int
PrtgAPI.XmlDeserializationException InnerException { get; } -> Exception
PrtgAPI.XmlDeserializationException Message { get; } -> string
PrtgAPI.XmlDeserializationException Source { get; set; } -> string
PrtgAPI.XmlDeserializationException StackTrace { get; } -> string
PrtgAPI.XmlDeserializationException TargetSite { get; } -> MethodBase
PrtgAPI.XmlDeserializationException ToString() -> string
